Класс
class НазваниеКласса:
	свойства (поля, переменные)
		- статические -> за пределами init
		- динамические (свойства класса) -> внутри init
	методы (функции)
		- статические (@staticmethod -> def method()) -> это функция внутри класса
		- экземпляра класса (def method(self))
		- методы классов (@classmethod -> def method(cls))
	атрибуты = свойства + методы

Магические методы (dunder-методы) - отрабатывают каждый раз при создании экземпляра класса

Чтобы язык считался объектно-ориентированым, он должен соблюдать следующие парадигмы (уметь реализовывать свойства):
- инкапсуляция
- наследование
- полиморфизм (много форм одного и того же метода) - способность системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта (у одного действия несколько реализаций, в зависимости от того, с каким классом ведётся работа)

Модификаторы доступа:
public - self.name - открытый доступ
protected - self._name - используется при наследовании
private - self.__name - защищённый доступ (нельзя получить из вне)

Наследование

родительский (базовый, основной, суперкласс) класс
	дочерний (наследник, подкласс) класс
В Python не преветствуется дублирование кода(например, одинакового инициализатора):
DRY (Don`t Repeate Yourself) -  не повторяйся! -> помагает наследование

# Модули из стандартной библиотеки Python
# marshal - для чтения и записи bytecode модулей Python; поддерживал старое расширение (.pyc)
# pickle - формат Python, только все типы данных Python
# json - на любом ЯП

Методы для работы с pickle и json:

обращение к модулю.dump() - сохраняет данные в открытый файл
dumps() - сохраняет данные в строку (в оперативной памяти)

	- считать из файла:
load() - считывает данные из открытого файла
loads() - считывает данные из строки
"20": null, // у формата json все ключи строка

Парсинг сайтов 

Установка модулей

pip install requests -> для получения доступа к json-объекту; отправки http-запросов

csv (Comma Separated Values - переменные, разделённые запятыми или ";"-> у меня) - лёгкий текстовый документ, легко передаётся по сети. Позволяет наполнять себя большими объёмами данными для их передачи, хранения(интернет-маназин с большим объёмом ресурсов)
data.csv -> может читать Excel

Методы чтения .csv в Python:
reader => []
DictReader => {} - работает с данными как с элементами словаря

Методы для записи .csv из Python:
write => []
DictWrite => {} - работает с данными как с элементами словаря

запись csv компактнее JSON, csv новее JSON

pip install bs4 (beautifulsoup4) -> для извлечения *.html, *.htm. в Python нет тэгов, чтобы распознавать html-разметку

pip install lxml

Паттерны -> картинка - шаблоны проектирования
MVC -> Model View Controller - разделяет логику приложения на три части

Введение в теорию баз данных, занятие 37.

SQL - язык структурированных запросов
SQlite
*.db, *.sqlite, *.db3, *.sqlite3

SELECT [ALL | DISTINCT] * | столбец [, столбец_N] -> ALL-ПО УМОЛЧАНИЮ; DISTINCT-ТОЛЬКО УНИКАЛЬНЫЕ ЭЛЕМЕНТЫ
FROM таблица_1 [, таблица_N]
WHERE условие
	=, ==, <>, !=, >, >=, <, <=
	AND, OR
	выражение [NOT] BETWEEN начальное_значение AND кончное_значение
	выражение [NOT] LIKE шаблон_строки:
		% - любое количество символов
		_ - любой одиночный символ 
	выражение [NOT] GLOB регулярное выражение:
		* - любое кол-во символов
		? - соответствует одному символу
		. - любой одиночный символ
		[символы] - один из заданных символов, например [abc] - либо a, либо b, либо c
		[начальный_символ-конечный_символ] - один из диапазона
		[a-z0-9]
		[^...] - инвертирование, любой, кроме заданных [^abc], [^0-9] 
	выражение IS [NOT] NULL - является пустым
	выражение [NOT] IN(набор значений | выражение)
	EXISTS (существует)
GROUP BY - (группировать по)	имя_столбца
HAVING (условие) - для сравнение функции агрегирования
ORDER BY столбец_1 | номер столбца [ASC | DESC] - (сортировки по возрастанию (можно не указывать) и убыванию соответственно) [, столбец_N]
LIMIT кол-во_строк OFFSET (смещение)
	LIMIT [смещение,] кол-во_строк

[Па-Ле]
Добавление, изменение, удаление записей в таблице.
ISERT
UPDATE
DELETE


ISERT INTO имя_таблицы [(столбец_1, столбец_N)]
VALUES (столбец_1, столбец_N)

ISERT INTO имя_таблицы [(столбец_1, столбец_N)]
SELECT [(столбец_1, столбец_N)]
FROM имя_таблицы(из которой берём данные)
WHERE условие

UPDATE имя_таблицы
SET столбец_1=значение_1, столбец_N=значение_N
WHERE условие

DELETE FROM имя_таблицы
WHERE условие

Логическая база данных -> первые разработчики
Физическая база данных -> вторые разработчики

Декартовое произвнедение - все возможные комбинации одной строки одной таблицы с 
каждой строкой другой таблицы -> получаем избыточные результаты,когда не установлены связи

Функции агрегирования - результат определённого столбца
SUM	 только с числами
AVG	 только с числами
COUNT	любые типы дынных
MIN		любые типы дынных
MAX		любые типы дынных

Работа с подзапросами (возможность создания внутреннего запроса, внутренний или вложенных запрос)

Однострочный подзапрос -> когда вложенный запрос возвращает одно значение, используются любые операторы сравнения:
	=, <>, >=, <=, >, <
	
Многострочный подзапрос
	IN, NOT IN
	
UNION - исключает повторяющиеся элементы(объединяет запросы)
UNION ALL - выводит повторяющиеся элементы(объединяет результаты 2-х SELECT)

SELECT столбцы
FROM таблица_1 [INNER] JOIN таблица_2
ON условие

SELECT столбцы
FROM таблица_1 LEFT JOIN таблица_2
ON условие

SELECT столбцы
FROM таблица_1 RIGHT JOIN таблица_2
ON условие
	
Пример:
SELECT s.com
FROM Salespeople s, Customers c
WHERE s.snum=c.snum AND c.city="Rome";

SELECT com
FROM Salespeople
WHERE snum IN 
    (SELECT snum --(1003, 1004, 1000)
    FROM Customers
    WHERE city="Rome" AND Salespeople.sname="Axelrod");

/*SELECT amt
FROM Orders
WHERE snum IN --1007
    (SELECT snum
    FROM Salespeople
    WHERE sname="Rifkin");*/
SELECT cname, city, rating, "Высокий рейтинг"
FROM Customers
WHERE rating >= 200

SELECT cname, city, rating, "Низкий рейтинг"
FROM Customers
WHERE Rating < 200

# Занятие 41 16.06.2024

Установка SQLAlchemy

pip install sqlalchemy

пакет models
	__init.py__
	database.py
	student.py
	group.py
	lesson.py
create_database.py

pip install faker - помагает делать фейковые данные

Шаблонизатор (Jinja)

{{ переменные }}

{% for i in collections %}

{% endfor %}

Условия

{% if условие %}

{% elif условие %}

{% else %}

{% endif %}

Работа фреймворка

1. Flask -> микрофреймворк (имеет базовый инструментарий для построения сайта) -> min эл-ов
	стандартная установка: pip install flask
2. Django -> полноценный фреймворк (не один документ, а проект)

Элементы flask:
int - должны присутствовать только цифры
float - только вещественные числами
path - любые добустимые символы URL + "/". Не допускается пробел
Без ограничения

http://127.0.0.1:5000/contact?username=irina&email=irina%40gmail.com&message=Message -> get

Для обратной связи с пользователем, во Flask существует:

flash() - формирует сообщение пользователю в *.py задаётся
get_flashed_message() - обработка сформированных сообщений в шаблоне документа в *.html задаётся

Установка Django

pip install django +
Работа с django: создаём папку -> переходим в terminal(pycharm) -> через него заходим в папку: cd first (зайти в first)
																								cd password_generator_project + начать писать и Tab
Создать проект django-admin startproject password_generator_project -> новый проект на Django с именем password_generator_project

Далее нужно запустить сервер: python manage.py runserver

Создание приложения в проекте:
	python manage.py startapp generator
	
Запустить приложение: python manage.py runserver
	
clrl + c => Выйти

Подняться на два уровня выше cd ../..

По умолчанию в проекте метод GET: http://127.0.0.1:8000/?length=2, ? - показывает что закончился адресс, из select видно атрибут name, 2 -> value; name - важный атрибут

РЕЗЮМИРУЮ: ОСТАНОВИТЬ СЕРВЕР: clrl + c; ЗАПУСТИТЬ СЕРВЕР: python manage.py runserver

!!!! Если стили css во Flask не применились, то нажать ctrl + F5 !!!! -> ОЧИСТКА КЭША БРАУЗЕРА!!

Второй проект - папка second
Зайти: cd second
Создать проект: django-admin startproject personal_portfolio
Создание приложений проекта second:
	Сначало зайти в папку с проектом:
	cd personal_portfolio
		Создать:
		python manage.py startapp skills
		python manage.py startapp blog
		
		На остановленном сервере
		python manage.py makemigrations - создаём файл с миграциями
		python manage.py migrate - применяем миграции

		
Попасть в admin панель: http://127.0.0.1:8000/admin/login/?next=/admin/
Создать себе admin панель: python manage.py createsuperuser - создать суперпользователя(пользователь с полными правами администратора)
АУДИТОРНАЯ РАБОТА:
Username: admin
E-mail: admin@localhost
Password: 1234qiv -> Можно делать один на все сайты


Стили css к линейным элементам. Например тег <input> - линейный элемент -> фыизически не выравнивается по центру.
Нужно его поместить в теги <p> или <div> - дать класс либо сразу добавить стили, например:
<p style="text-align: center">
	<input /> -> инпут - линейный элемент, атрибут "text-align" - не работает
</p>

Далее с добавлением документов base.html и index.html по пути \second\personal_portfolio\skills\templates\skills нужно перезапускать сервер: clrl + c | python manage.py runserver, так как будут ошибки, потому что внёс критические изменения и без перезапуска будет выдаваться ошибки. Если не обновляется clrl + F5, либо зажать clrl и нажать кнопку "обновить" в браузере

csrf_token
token - механизм, который позволяет идентифицировать пользователя или конкретную сессию для безопасного обмена информацией; помагает проверить личность пользователя
csrf_token - защита от csrf-мошенников разработчиками django; работает: создаёт случайный ключ(token) и отправляет его браузеру клиента -> когда браузер запрашивает у сервера информацию, сервер, прежде чем дать ответ требует показать ключ и проверяет его достоверность -> если token совпадают, то сессия продолжается, иначе прерывается -> token действует только одну сессию, с новой сессией он обновляется. Обеспечивает защиту формы от несанкционированного доступа при попытке повредить БД.

Атрибут on_delete:

models.CASCADE - если пользователь будет удалён, то и удалятся все его задачи;
models.PROTECT - запрещает удалять пользователя, пока у него есть задачи;
models.SET_NULL - задачи остануться в базе даже при удалении пользователя, но значение в поле задачи измениться на NULL(при удалении пользователя оставлять его комментарии);
models.SET_DEFAULT - задачи остануться в базе даже при удалении пользователя, но значение в поле задачи измениться на то, что будет установлено по умолчанию; ... - не все значения, основные

Типы связей к django

OneToOneField - связь один к одному
ForeignKey - связь один ко многим
ManyToManyField - связь многие ко многим

request - запрос
redirect - перенаправлять

!!!ЕСЛИ favicon.ico НЕ ОТОБРАЖАЕТСЯ, ТО ПЕРЕЗАГРУЗИТЬ СЕРВЕР И НАЖАТЬ clrl + F5!!!


C:\Users\Forz1kGG\Desktop\python\FW\FW\FW_4\FW_4_new Теория Querysets и Querysets-List
python manage.py shell -> консоль с привязкой к директории и доступом к моделям в Terminal, ЗАЙТИ
from projects.models import Project
Project.objects.all()
Project.objects.get(id=1) ->  Website for Picture Print Shop - первый элемент, id=1, поиск всегда одного элемента, не возвращает список
Project.objects.filter(id=1) -> <QuerySet [<Project: Website for Picture Print Shop>]> - список
Project.objects.filter(title__contains="site") - найдёт все проекты со словом или частью слова "site" в названии
Project.objects.exclude(title__contains="site") - найдёт все проекты без слова или части слова "site" в названии

quit() - ВЫЙТИ ИЗ shell

Тестовая форма авторизации:

<form action="{% url 'login' %}" method="post">
    {% csrf_token %}
    <input type="text" name="username" placeholder="Username">
    <input type="password" name="password" placeholder="Password">
    <input type="submit" value="Login">
</form>

Тестовая форма регистрации:
<h1>Register User</h1>

<form action="{% url 'register' %}" method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Register">
</form>

<p>Already have an account <a href="{% url 'login' %}">Login</a></p>

Тестовая форма редактирования пользователя:
<h1>Edit Account</h1>

<form action="{% url 'edit-account' %}" method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Submit">
</form>

Поиск 
exact - точное совпадение
name__icontains - регистронезависимое точное совпадение
Доп. документы
signals.py
utils.py
pagination.html

ctrl + r => поиск и замена в python











