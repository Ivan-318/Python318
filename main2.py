# first_name = "Nikolay"  # комментарий
# print("Hello, " + first_name + "!")
# import re

# a = 30
# b = "Hello"
# c = 2.8
# print(type(a))
# print(type(b))
# print(type(c))

# a = 5
# print(a, type(a))
# b = "Hello"
# print(b, type(b))
# print(str(a) + b)

# a = 5
# print(a, id(a))  # 5
# b = 4
# print(b, id(b))  # 4
# a = b
# print(a, id(a))  # 4

# a = b = c = 4
# print(a, b, c)

# a, b, c = 5, "Hello", 9.2
# print(a, b, c)

# PI = 3.14
# print(PI)
# PI = 2  # Нарушение соглашения на уровне работы программиста
# print(PI)

# Поменять местами переменные
# a = 21
# b = 512
# print("a: ", a)
# print("b: ", b)
# # 2 Способ
# a, b = b, a
#
# # 1 Способ
# # c = a  # c = 1
# # a = b  # a = 2
# # b = c  # b = 1
#
# print("a: ", a)  # в a попала 2
# print("b: ", b)  # в b попала 1

# ДЗ Сделать третий способ обмена чисел без использования третьей переменной(арифметические операции?)

# print("строка\t\t символов строка символов строка символов строка символов строка символов строка символов\n "
#       "строка символов строка символов строка символов строка символов \
# строка символов строка символов строка символов строка символов \
# строка символов строка символов строка символов строка символов")
# print('строка \nсимволов')

# print("Документ 'file.txt'")
# # Экранирование
# print("Документ \"file.txt\" \nнаходится по пути \rD:\\folder\\file.txt")

# s1 = "Hello"
# s2 = "Python"
# # print(s1 + " " + s2)  # Hello Python
# s3 = s1 + ", " + s2 + "!"
# print(s3)  # Hello, Python!
# print(s1 * 5)

# print(694702472057027502748038530580)
# # Дробная часть выводит только 15 символов и округляет 16-й
# print(6.94702472057027502748038530580)

# print(6 + 2)
# print(6 - 2)
# print(6 * 2)
# print(6 / 2)  # 3.0
# print(6 / 4)  # 1.5
#
# print(6 // 2)  # 3 целочисленное деление
# print(6 // 4)  # 1 целочисленное деление
#
# print(6 ** 2)  # 36
# print(6 ** 3)  # 216 = 6 * 6 * 6
#
# print(6 % 2)  # 0 - остаток от деления
# print(6 % 4)  # 0 - остаток от деления

# Создадим выражение
# number = 6 + 4 * 5 ** 2 + 7  # 1 действие - возведение в степень, 2-е - умножение, 3-е - сложение слева-направо, = 113
# print(number)
# number1 = (6 + 4) * (5 ** 2 + 7)  # 1 действие скобки, степень, умножение, сложение, слева-направо # 320
# print(number1)


# num = 10
# num += 5 # num = num + 5
# print(num)  # 15
#
# num -= 3  # num = num - 3 = 15 - 3
# print(num)  # 12

# Дано четырёхзначное число, нужно вывести его в обратной последовательности, исходное: 4321, обратное: 1234
# num = 4321  # 432 избавиться от 1 у числа
# print(num)
# a = num % 10
# print("a:", a) # 1
# num = num // 10
# # print(num) # 432
# b = num % 10
# print("b:", b) # 2
# num = num // 10
# # print(num) # 43
# c = num % 10
# print("c:", c) # 3
# num = num // 10
# # print(num) # 4
# d = num % 10
# print("d:", d) # 4
# print(a * 1000 + b * 100 + c * 10 + d) # 1234

# 2 способ, сокращённые выражения, создание одной переменной, принято использовать

# num = 4321
# print(num)
# res = num % 10 * 1000  # 1000
# num //= 10  # num = num // 10 # num = 432
# res += num % 10 * 100  # 1200
# num //= 10
# res += num % 10 * 10  # 1230
# num //= 10
# res += num % 10  # 1234
# print(res)

# num1 = "2"  # строковое значение
# num2 = 3  # числовое значение
# # res = num1 + num2 # не может сделать конкатенацию переменных двух разных типов str и int
# # res = num1 + str(num2) # num2 к str, вывод: 23
# res = int(num1) + num2  # num1 к int, вывод: 5
# print(res)

# Если

# num1 = "2.5"  # строковое значение
# num2 = 3  # числовое значение
# # res = int(num1) + num2  # ошибка 2.5 НЕ int
# # print(res)
#
# # print(int(2.5))  # вывод: 2, дробная часть отброшена
# # print(int("2.5"))  # если строка, то ошибка, интерпретатор видит точку как символ, т.е 2ю5
#
# res = float(num1) + num2  # результат: 5.5, float - упорядоченная последовательность символов
# print(res)

# print(int(2.5))  # 2 Отброс дробной части - 2, если математическое округление - 3
# print(round(2.5))  # 2
# print(round(2.8))  # 3
# print(round(2.6))  # 3
# print(round(2.56))  # 3, если после 5 есть хотя бы один знак, то округление 2.6 -> в большую сторону
# # Округление вещественного числа методом round
# print(round(2.519, 2))  # 2,52 два знака после запятой

# a = 2.519
# b = round(a)
# print(b, type(b))  # 3 <class 'int'>
# c = round(a, 2)
# print(c, type(c))  # 2.52 <class 'float'>

# Особенности функции print

# name = "Виктор"
# age = 28
# print("Меня зовут", name, ". Мне", age, "лет.") # перед "точкой" пробел из-за запятой
# print("Меня зовут " + name + ". Мне " + str(age) + " лет.")  # конкатенация, нельзя сделать конкатенацию между строкой
# и числом
# print("Меня зовут", name, ". Мне", age, "лет.", sep="---", end=" &&& ")  # где есть запятая отобразил три дефиса,
# end="" отменил перенос Hello на новую строку
# print("Меня зовут", name, ". Мне", age, "лет.", sep="---", end="\n\n")  # end="\n\n" два раза enter
# print("Меня зовут ", name, ". Мне ", age, " лет.", sep="", end="\n\n")  # правильные пробелы
# print("Hello")  # каждый print делает перенос на другую строчку

# name = input()
# print("Hello,", name)

# name = input("Введите имя: ")  # input - возвращает строковое значение
# print("Hello,", name)

# Пусть пользователь вводит число, а программа возводит в степень

# num = input("Введите число: ")
# power = input("Введите степень: ")
#
# res = num ** power
# print("Число", num, "в степени", power, "равно:", res)  # не отработает, так как две строки, возведение строки
# # в степень строка

# num = input("Введите число: ") #2
# power = input("Введите степень: ") #3
#
# num = int(num)  # преобразовать к типу данных int, вернуть в переменную num
# power = int(power)
#
# res = num ** power
# print("Число", num, "в степени", power, "равно:", res) # Число 2 в степени 3 равно: 8

# Сокращённая форма записи
# num = int(input("Введите число: "))  # сразу приведём к типу данных int
# power = int(input("Введите степень: "))  # сразу приведём к типу данных int
#
# res = num ** power
# print("Число", num, "в степени", power, "равно:", res)

# Задача. Запросите у пользователя четыре числа. Отдельно сложите первые два и отдельно вторые два. Разделите первую
# сумму на вторую. Выведите результат на экран так, чтобы ответ содержал две цифры после запятой.

# Введите четыре числа:
# 1: 9
# 2: 6
# 3: 7
# 4: 5
# Результат: 1.25

# Решение
# num1 = int(input("1: "))
# num2 = int(input("2: "))
# num3 = int(input("3: "))
# num4 = int(input("4: "))
# res1 = num1 + num2
# res2 = num3 + num4
# res = res1/res2
# print("Результат: ", round(res, 2))

# Сократим код
# num1 = int(input("1: "))
# num2 = int(input("2: "))
# num3 = int(input("3: "))
# num4 = int(input("4: "))
# print("Результат: ", round((num1 + num2) / (num3 + num4), 2))

# Тип данных Boolean, работает неявное преобразование типов

# b1 = True
# b2 = False
# print(b1 + 5)  # 1 + 5 = 6, True => 1
# print(b2 + 5)  # 0 + 5 = 5, False => 0

# Преобразование любого элемента к булевому значению, логическому типу данных

# print(bool("python"))  # True
# print(bool(""))  # False
# print(bool(" "))  # True
# print(bool(1234))  # True
# print(bool(-12.34))  # True
# print(bool(0))  # False
# print(bool(0.0))  # False
# print(bool(0.1))  # True
# print(bool(False))  # False
# print(bool(None))  # False: не возвращает ничего, инициализирует переменную неопределённым типом данных

# test = None
# print(test)  # None
# test = 5
# print(test)  # 5

# Операторы сравнения

# print(7 == 7)  # возвращает булево значение True
# print(2 + 5 == 7)  # арифметические операторы имеют приоритет выше, чем сравнение; True
# print(7 != 10 - 3)  # False
# print(8 > 5)  # True
# print(8 < 5)  # False
# print(8 >= 8)  # True
# print(8 <= 8)  # True
#
# # Сравнение строк
# print("привет" > "ПРИВЕТ")  # True, сравнивается по коду символа 1087 > 1055 по первому коду символа => true
#
# # Посмотреть код символа
#
# print(ord("п"))  # 1087
# print(ord("П"))  # 1055

# Выражения для операторов сравнения
# print(2 < 4 < 9)  # True : True => True, как лог. "И", т.е. True && True => True
# print(2 * 5 > 7 >= 4 + 3)  # 10 > 7 => True > 7 >= 7 => True > True => True && True => True
# print(3 * 3 <= 7 >= 2)  # 9 <= 7 => False; 7 >= 2 => True; False && True => False

# a = 10
# b = 5
# c = a == b
# print(a, b, c)  # 10 5 False

# # Логический оператор И
# print(5 - 3 == 2 and 1 + 3 == 4)  # True: True => True
# print(5 - 3 == 2 and 1 + 3 < 4)  # True: False => False
# print(5 - 3 > 2 and 1 + 3 == 4)  # False: True => False
# print(5 - 3 > 2 and 1 + 3 < 4)  # False: False => False

# # Логический оператор ИЛИ
# print(5 - 3 == 2 or 1 + 3 == 4)  # True: True => True
# print(5 - 3 == 2 or 1 + 3 < 4)  # True: False => True
# print(5 - 3 > 2 or 1 + 3 == 4)  # False: True => True
# print(5 - 3 > 2 or 1 + 3 < 4)  # False: False => False

# Логическое НЕ
# print(not 9 - 5)  # False
# print(not 9 - 9)  # True, так как "0" всегда False

# Условные операторы
# cnt = 5
# if cnt < 10:
#     cnt += 1
#     print(cnt)  # 6

# print ничего не выведет, так как мы в if не попадаем
# cnt = 15
# if cnt < 10:
#     cnt += 1
#     print(cnt)

# cnt = 15
# if cnt < 10:
#     cnt += 1
# print(cnt)  # 15

# cnt = 5
# if cnt < 10:
#     cnt += 1
# print(cnt)  # 6

# age = int(input("Введите свой возраст: "))
# if age >= 18:
#     # print("Доступ на сайт разрешён")
#     # если для проверки else нужно чем-то закрыть блок if => pass - заглушка от синтаксической ошибки
#     pass
# else:
#     print("Доступ запрещён")

# Вариант заглушки 2 "..."
# age = int(input("Введите свой возраст: "))
# if age >= 18:
#     ...
# else:
#     print("Доступ запрещён")

# age = int(input("Введите свой возраст: "))
# if age >= 18:
#     print("Доступ на сайт разрешён")
# else:
#     print("Доступ запрещён")

# a = 25
# b = 25
# if a > b:
#     print("a > b")
# else:
#     print("b > a")  # b > a при одинаковых значениях

# Вариант 2

# a = 25
# b = 25
# if a > b:
#     print("a > b")
# if b > a:
#     print("b > a")
# if a == b:
#     print("a == b")

# Вариант 3

# a = 35
# b = 25
# if a > b:
#     print("a > b")
# if b > a:
#     print("b > a")
# else:
#     print("a == b")

# Вывод: a > b
#        a == b - не корректно, отработает лишний else

# Вариант 3 Исправленный

# a = 25
# b = 25
# if a > b:
#     print("a > b")
# elif b > a:
#     print("b > a")
# else:
#     print("a == b")

# Задача. Даны длины сторон треугольника. Проверить, является ли треугольник равносторонним, равнобедренным
# или разносторонним

# Введите первую сторону: 10
# Введите вторую сторону: 20
# Введите третью сторону: 20

# Треугольник равнобедренный

# Решение

# num1 = int(input("Введите первую сторону: "))
# num2 = int(input("Введите вторую сторону: "))
# num3 = int(input("Введите третью сторону: "))
# Можно не писать int
# num1 = input("Введите первую сторону: ")
# num2 = input("Введите вторую сторону: ")
# num3 = input("Введите третью сторону: ")
# if num1 == num2 == num3:  # '10' == '10' == '10'
#     print("Треугольник равносторонний")
# elif num1 == num2 or num1 == num3 or num2 == num3:
#     print("Треугольник равнобедренный")
# else:
#     print("Треугольник разносторонний")

# Задача. Пусть будет семь дней недели, хотим разделить будние и выходные дни, пользователь может ввести день недели,
# которого не существует. Также необходимо показать какой конкретно это день недели. Вложенные условия

# day = int(input("Введите день недели (цифрой): "))
# if 1 <= day <= 5:  # - вариант под Python
#     # (day >= 1) and (day <= 5):
#     print("Рабочий день -", end=" ")
#     if day == 1:
#         print("понедельник")
#     if day == 2:
#         print("вторник")
#     if day == 3:
#         print("среда")
#     if day == 4:
#         print("четверг")
#     if day == 5:
#         print("пятница")
# # elif 6 <= day <= 7: - не корректно, так как всего 2 значения, не диапазон
# # корректно
# elif day == 6 or day == 7:
#     print("Выходной день -", end=" ")
#     if day == 6:
#         print("суббота")
#     if day == 7:
#         print("воскресенье")
# else:
#     print("Такого дня недели не существует!")

# Напишите программу, которая запрашивает у пользователя номер месяца и затем выводит соответствующие название времени
# года. В случае если пользователь введёт недопустимое число, программа должна вывести сообщение "Ошибка ввода данных".

# Введите номер месяца: 6
# Лето

# month = int(input("Введите номер месяца (цифрой): "))
# if 1 <= month <= 12:
#     if 1 <= month <= 2 or month == 12:
#         print("Зима")
#     if 3 <= month <= 5:
#         print("Весна")
#     if 6 <= month <= 8:
#         print("Лето")
#     if 9 <= month <= 11:
#         print("Осень")
# else:
#     print("Ошибка ввода данных")

# 2 способ - другой подход

# month = int(input("Введите номер месяца (цифрой): "))
# if 3 <= month <= 5:
#     print("Весна")
# elif 6 <= month <= 8:
#     print("Лето")
# elif 9 <= month <= 11:
#     print("Осень")
# elif 1 <= month <= 2 or month == 12:
#     print("Зима")
# else:
#     print("Ошибка ввода данных")

# 3 способ

# month = int(input("Введите номер месяца (цифрой): "))
# if 1 <= month <= 12:
#     if 3 <= month <= 5:
#         print("Весна")
#     elif 6 <= month <= 8:
#         print("Лето")
#     elif 9 <= month <= 11:
#         print("Осень")
#     else:
#         print("Зима")  # так как ограничены значения от 1 до 12
# else:
#     print("Ошибка ввода данных")

# Занятие 3

# Задача. Написать программу, которая предлагает пользователю ввести число ворон на ветке в диапазоне от 0 до 9, а
# затем вывести сообщение, о количестве ворон, определив при этом правильный падеж слова "вороны".

# Ввести количество ворон: 2
# На ветке 2 вороны

# Разобьём задачу на 2 составляющие
# 1-я: Определим диапазон действий
# шаг 1. от 0 по 9 - диапазон
# шаг 2. Определим, сколько будет падежей и при каких значениях какой падеж использовать
# 1. ворона - одна (1)
# 2. вороны - две, три, четыре (2, 3, 4)
# 5. ворон - ноль, пять, шесть, семь, восемь, девять (0, 5, 6, 7, 8, 9)

# n = int(input("Введите количество ворон: "))  # преобразовываем input к типу данных int
# if 0 <= n <= 9:
#     print("На ветке", end=" ")  # пробельный символ и убираем перенос на другую строчку
#     if n == 1:
#         print(n, "ворона")
#     elif 2 <= n <= 4:
#         print(n, "вороны")
#     else:
#         print(n, "ворон")
# else:
#     print("Ошибка ввода данных")

# 2 способ, усложнённый

# n = int(input("Введите количество ворон: "))  # преобразовываем input к типу данных int
# if 0 <= n <= 9:
#     print("На ветке", end=" ")  # пробельный символ и убираем перенос на другую строчку
#     if n == 1:
#         print(n, "ворона")
#     if 2 <= n <= 4:
#         print(n, "вороны")
#     if 5 <= n <= 9 or n == 0:
#         print(n, "ворон")
# else:
#     print("Ошибка ввода данных")

# Тернарные выражения, используется, когда не нужно большое тело условия, более короткий синтаксис записи
#                   условие
# abs_number = number if number >= 0 else -number
#              <- если True        если False ->

# Пример, найдём минимальное из значений
# a, b = 10, 20
# minim = a if a < b else b
# print(minim) # 10

# a, b = 30, 20
# minim = a if a < b else b
# print(minim)  # 20

# Больше, меньше или равно
# a, b = 20, 30
# print("a == b" if a == b else "a > b" if a > b else "b > a")

# Написать программу проверки деления на нуль с использованием тернарного выражения: 2.0 (обычное деление - вещественное
# число
# если делитель является нулём, выводим "на нуль делить нельзя" иначе возвращаем результат двух чисел

# a, b = 2, 0
# print('на нуль делить нельзя' if b == 0 else a / b)

# a, b = 20, 5
# print('на нуль делить нельзя' if b == 0 else a / b)  # 4.0

# Для чего это надо, если делитель "0"
# a, b = 20, 0
# print('на нуль делить нельзя' if b == 0 else a / b)
# print(a / b)  # ZeroDivisionError: division by zero, если бы дальше был код, то программа бы остановилась,
# не выполнялась, здесь мы обработали исключение, но не все мы можем обработать

# Рассмотрим исключения
# 6a = 0  # интерпретатор выбросил исключение SyntaxError: invalid syntax

# a = 0
# print(a + b)  # интерпретатор выбросил исключение NameError: name 'b' is not defined

# Объявим b
# a = 0
# b = "2"
# print(a + b)  # интерпретатор выбросил исключение TypeError: unsupported operand type(s) for +: 'int' and 'str' разный
# тип данных, типы данных не соответствующего типа

# a = 0
# b = "2"
# print(a + int(b))  # 2

# a = 0
# b = "2a"
# print(a + int(b)) # интерпретатор не может преобразовать такого типа строку к числовому значению ValueError: invalid
# literal for int() with base 10: '2a'

# a = 5
# b = 0
# print(a / b)  # ZeroDivisionError: division by zero, возникает, когда второй аргумент операции division - деление,
# равен нулю

# Рассмотрим задачу и возможные ошибки
# n = int(input(
#     "Введите целое число: "))  # осложнение в том, что пользователь может ввести что угодно,
# проблем нет только с целым числом, при вводе 0.2 int не может его преобразовать к целочисленному типу данных =>
# ValueError: invalid literal for int() with base 10: '0.2', при вводе числа словом, пользователь так захотел
# "Введите целое число: пять" => ValueError: invalid literal for int() with base 10: 'пять'. Ошибка возникает
# на выполнении функции int, тип данных к int не преобразовывается. В таком случае программа полностью прекращает
# работоспособность, а если она большая, то на начальном этапе мы уже работать не можем!!! Для этого такие исключения
# нужно обрабатывать с помощью блоков "try" и "except" = "исключение"
# print(n * 2)

# Обработка ошибок
# try:
#     n = int(input("Введите целое число: "))  # пять
#     print(n * 2)
# except ValueError:  # указываем, какую ошибку обрабатываем
#     print("Что-то пошло не так")  # Что-то пошло не так => программа выполнилась и работает дальше

# Пример 2, с двумя исключениями
# try:
#     n = int(input("Введите делимое: "))
#     m = int(input("Введите делитель: "))
#     print(n / m)
# except ValueError:
#     print("Нельзя вводить строки")  # не обязательно "print", может и код выполняться
# except ZeroDivisionError:
#     print("Нельзя делить на нуль")

# Объединить except

# try:
#     n = int(input("Введите делимое: "))
#     m = int(input("Введите делитель: "))
#     print(n / m)
# except (ValueError, ZeroDivisionError):  # это кортеж, один элемент с перечислениями исключений
#     print("Нельзя вводить строки или нельзя делить на нуль")  # Способ быстрый, но не самый удобный. Пример с сайтом
#     # неправильно введён логин или пароль и гадайте сами, что из них)))

# Добавим операторов, например else
# try:
#     n = int(input("Введите делимое: "))
#     m = int(input("Введите делитель: "))
#     print(n / m)
# except (ValueError, ZeroDivisionError):
#     print("Нельзя вводить строки или нельзя делить на нуль")
# else:  # отработает, когда в блоке try не возникло исключения
#     print("Всё нормально. Вы ввели числа", n, "и", m)  # отработает, если не выбросилось исключение, в блоке except
# не будет отрабатывать; else отрабатывает, если корректно отработал блок try
# Рассмотрим блок finally

# try:
#     n = int(input("Введите делимое: "))
#     m = int(input("Введите делитель: "))
#     print(n / m)
# except (ValueError, ZeroDivisionError):
#     print("Нельзя вводить строки или нельзя делить на нуль")
# else:
#     print("Всё нормально. Вы ввели числа", n, "и", m)
# finally: # выполнится в любом случае, завершающий блок, используется когда работают с элементами, которые нужно
# открывать и закрывать: работа с файлами, с БД (остановить запросы к БД в холостую, всё равно уже результата нет),
#     # чтоб корректно закрыть файл, его удобно поместить в finally
#     print("Конец программы")  # закрыть элемент или выполнить код в любом случае


# Задача. Напишите программу, которая запрашивает ввод двух значений. Если хотя бы одно из них не является числом,
# то должна выполняться конкатенация, то есть соединение, строк. В остальных случаях введённые числа суммируются

# Введите первое число: пять
# Введите второе число: два
# пятьдва
# если сразу присвоить int конкатенацию не сделать
# n = input("Введите первое число: ")
# m = input("Введите второе число: ")
#
# try:
#     print(int(n) + int(m))
# except ValueError:
#     print(n + m)

# Способ 2

# n = input("Введите первое число: ")
# m = input("Введите второе число: ")
#
# try:
#     n = int(n)  # если возможно преобразовать сохраниться в n
#     m = int(m)  # если возможно преобразовать сохраниться в m
# except ValueError:
#     n = str(n)  # исключение на случай, если первое - число; второе - строка
# finally:
#     print(n + m)  # выводит сумму

# Циклы(в python 2 в чистом виде, в JavaScript 3(+do-while))

# i = 0
# while i < 5:
#     print("i =", i)  # тело цикла отодвигается на одну табуляцию
#     # i = i + 1  # шаг цикла
#     i += 1  # короткая запись

# i = 10
# while i > 0:
#     print("i =", i)
#     # i -= 1
#     i -= 2  # выводит каждое чётное число

# Можем ни разу не попасть в while
# i = 10
# while i < 0:  # пока i < 0, 10 < 0 - False, не попали в цикл, его тело не выполнилось
#     print("i =", i)
#     i -= 2

# Написать программу, выводящую на экран только чётные числа в диапазоне от 1 до 20
# Вывод: i = 2, i = 4, i = 6, i = 8, i = 10, i = 12, i = 14, i = 16, i = 18, i = 20

# i = 2
# while i <= 20:
#     print("i =", i)
#     i += 2 Не корректно, так как в задаче начинается с "1"

# Корректируем

# i = 1
# while i <= 20:
#     if i % 2 == 0:
#         print("i =", i)
#     i += 1

# Написать программу, которая выводит на экран ряд из звёздочек ('*'). Количество выводимых символов указывает
# пользователь.

# Укажите количество символов: 7
# *******

# n = int(input("Укажите количество символов: "))
# print(n * "*") - 1 способ
# выведем символы в столбец
# c промежуточной переменной "i"

# i = 0
# while i < n:
#     print("*")
#     i += 1

# Без i

# while n > 0:
#     print("*")
#     n -= 1

# Рассмотрим
# print(n * "*\n")  # можно без цикла, так как "\n" работает как перенос на другую строку

# Нельзя обойтись без цикла. Пусть пользователь вводит число, а выведутся чередующиеся символы столько раз, чему
# равно число

# Вывод: # 5; +-+-+

# n = int(input("Укажите количество символов: "))
# print(n * "+-")
# Вывод: +-+-+-+-+- - это 10 символов

# Возможно через цикл

# n = int(input("Укажите количество символов: "))
# print(n * "+-")  # вывод 10 символов
#
# # вывод 5 символов
# i = 0
# while i < n:
#     if i % 2 == 0:
#         print("+", end="")  # end убирает перенос у print
#     else:
#         print("-", end="")
#     i += 1

# Способ с тернарными выражениями
# n = int(input("Укажите количество символов: "))
# i = 0
# while i < n:
#     print(i * "+" if i % 2 == 0 else i * "-")
#     i += 1
# Вывод: Укажите количество символов: 5
#
# -
# ++
# ---
# ++++ - треугольник

# Верно
# n = int(input("Укажите количество символов: "))
# i = 0
# while i < n:
#     print("+" if i % 2 == 0 else "-", end="")
#     i += 1
# Вывод: +-+-+

# Написать программу, которая находит сумму всех целых нечётных чисел в диапазоне, указанном пользователем

# Введите начало диапазона: 1
# Введите конец диапазона: 5
# Сумма целых нечётных чисел: 9, т. е. 1 + 3 + 5 = 9

# Проверка на НЕЧЁТНОСТЬ: if a % 2:; на ЧЁТНОСТЬ: if a % 2 == 0:

# a = int(input("Введите начало диапазона: "))
# b = int(input("Введите конец диапазона: "))
# # sum = 0 # Shadows built-in name 'sum' - зарезервированный элемент, готовая функция, не надо перезаписывать, назвать:
# sum1 = 0
# while a <= b:  # включить границы 1 <= 5
#     if a % 2:  # == "a % 2 != 0:"
#         # print(a, end=" ") - мешает выводу суммы, позволяет посмотреть, какие числа попали в диапазон
#         sum1 += a
#     a += 1
# print("Сумма целых нечётных чисел:", sum1)

# Задача. Обработать ввод данных, чтоб пользователь вводил целочисленное значение, добиться, чтоб ввёл число

# n = input("Введите целое число: ")
#
# while type(n) != int:  # цикл будет работать до тех пор, пока тип данных n не будет равен int
#     try:
#         n = int(n)
#     except ValueError:
#         print("Число не целое")
#         n = input("Введите целое число: ")
# if n % 2 == 0:
#     print("Чётное")
# else:
#     print("Нечётное")

# i = 0
# while i < 10:
#     if i == 3:
#         i += 1  # без счётчика программа не завершится
#         continue  # i = 3 => continue прерывает текущую итерацию, не дойдём до вывода "3", не выведем;
#         вывод: 0 1 2 4 5
#     print(i, end=" ")  # вывод в одну строку
#     if i == 5:
#         break  # прервём на "5"
#     i += 1
# print("\nЦикл завершён!")

# Бесконечные циклы while True

# i = 0
# while True:
#     print(i)
#     i += 1  # Бесконечный бесполезный цикл

# Прервём выполнение while True

# i = 0
# while True:
#     print(i)
#     if i == 5:
#         break
#     i += 1

# Применение while True

# while True:
#     n = int(input("Введите положительное число: "))
#     # Пусть при отр числе завершиться работа цикла
#     if n < 0:
#         break

# Написать программу поиска произведения последовательности положительных и отрицательных чисел, вводимых с клавиатуры,
# пока пользователь не введёт 0 - условие выхода из цикла.

# Введите число: 5
# Введите число: -3
# Введите число: 2
# Введите число: 0
# Результат: - 30

# p = 1
# while True:
#     n = int(input("Введите число: "))
#     if n == 0:
#         break  # чтобы 0 не попадал в нахождение произведения
#     p *= n
# print("Результат:", p)


# i = 0
# while i < 10:
#     print(i)
#     i += 1
# else:
#     print("Цикл окончен, i =", i)  # в Python "else" может быть у циклов while и or, у любого, используется редко,
#     # но существует

# Прервём выполнение программы
# i = 0
# while i < 10:
#     if i == 5:
#         break  # выполняется else, код ниже выполняется
#     # if i == 8:
#     #     print(5 / 0)  # прервали while исключением, до else не дошли
#     print(i)
#     i += 1
# else:
#     print("Цикл окончен, i =", i)
#     # Вывод: 0
#     # 1
#     # 2
#     # 3
#     # 4 else не отрабатывает
#
# print("Код ниже")

# 27.01.2024

# Вложенные циклы

# j = 1 - если j объявить выше, как глобальную, то вложенный элемент (внутренний цикл) отработает один раз
# i = 1
# while i < 5:
#     print("Внешний цикл: i =", i)
#     j = 1
#     while j < 4:
#         print("\t Внутренний цикл: j=", j)
#         j += 1  # соблюдаем табуляции, чтобы не получить superloop
#     i += 1

# Вывод:
# Внешний цикл: i = 1
# 	 Внутренний цикл: j= 1
# 	 Внутренний цикл: j= 2
# 	 Внутренний цикл: j= 3
# Внешний цикл: i = 2
# 	 Внутренний цикл: j= 1
# 	 Внутренний цикл: j= 2
# 	 Внутренний цикл: j= 3
# Внешний цикл: i = 3
# 	 Внутренний цикл: j= 1
# 	 Внутренний цикл: j= 2
# 	 Внутренний цикл: j= 3
# Внешний цикл: i = 4
# 	 Внутренний цикл: j= 1
# 	 Внутренний цикл: j= 2
# 	 Внутренний цикл: j= 3

# Задача. Необходимо вывести на экран таблицу умножения

# i = 1  # отвечает за строки
# while i < 10:
#     j = 1  # отвечает за столбцы
#     while j < 10:
#         print(i, "*", j, "=", i * j, end="\t\t")  # делаем по горизонтали "end= """ - убирает перенос на др строку, j
#         # передаёт второй множитель
#         j += 1
#     print()  # делает перенос на др строку после отработки вложенного цикла
#     i += 1

# Вывести на экран прямоугольник из символов, циркумфлекс, признак вложенного цикла: табличное представление (двумерное)
# элементов, созданных по одному и тому же принципу
# ^^^^^^
# ^^^^^^
# ^^^^^^

# i = 0
# while i < 3:  # наружный цикл отвечает за строки
#     j = 0
#     while j < 6:  # номера итераций: {0, 1, 2, 3, 4, 5} = 6
#         print("^", end="")
#         j += 1
#     print()
#     i += 1

# Необходимо вывести на экран прямоугольник из чередующихся символов:
# ++++++++++++++++
# ----------------
# ++++++++++++++++
# ----------------
# ++++++++++++++++
# ----------------
# 6 строк на 16 столбцов

# i = 0
# while i < 6:
#     j = 0
#     while j < 16:
#         if i % 2 == 0: # строки
#             print("+", end="")
#         else:
#             print("-", end="")
#         j += 1
#     print()
#     i += 1

# Написать программу, выводящую чередующиеся символы по вертикали
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-

# i = 0
# while i < 6:
#     j = 0
#     while j < 16:
#         if j % 2 == 0: # так же как и предыдущая, i строки меняем на j столбцы
#             print("+", end="")
#         else:
#             print("-", end="")
#         j += 1
#     print()
#     i += 1

# вывести диагональ из звёздочек
# *
#  *
#   *
#    *
#     *

# Способ 1
# i = 0
# while i < 5:  # строки
#     j = 0
#     while j < i:
#         print(" ", end="")
#         j += 1
#     print("*")
#     i += 1

# Способ 2. Для Python (так как он умеет строку умножать на число), отодвигает всю диагональ на один пробельный символ
# в столбце, sep="" это исправляет
# i = 0
# while i < 5:
#     print("-" * i, "*", sep="")
#     i += 1

# Цикл for
# Может пройтись только по коллекциям и имеет следующий синтаксис записи, работает с коллекциями:
# for i(element) in collection:
#     print(i(element)),
# element - элемент из коллекции

# for i in "Hello":
#     print(i)

# Вывод:
# H
# e
# l
# l
# o

# Пример
# for color in "red", "blue", "green":
#     print(color)

# Вывод:
# red
# blue
# green

# Работа for со вспомогательной функцией range, принимающей только 3 параметра:
# range(start, stop, step), где start - стартовое значение, stop - до какого значения доходим, step - шаг
# print(range(9))
# Вывод:
# range(0, 9) # так как start = 0 (по умолчанию), если не указать и step = 1

# for i in range(9):
#     print(i, end=" ")

# Вывод: 0 1 2 3 4 5 6 7 8

# Сделаем while по аналогии
# print()
# i = 0
# while i < 9:
#     print(i, end=" ")
#     i += 1
# Вывод: 0 1 2 3 4 5 6 7 8

# Сделаем не нулевой старт для while

# i = 2
# while i < 9:
#     print(i, end=" ")
#     i += 1

# Сделаем не нулевой старт для for

# for i in range(2, 9):
#     print(i, end=" ")

# Вывод:
# 2 3 4 5 6 7 8 # Не включая 9

# Выведем каждый второй элемент для while

# i = 2
# while i < 9:
#     print(i, end=" ")
#     i += 2
# Вывод:
# 2 4 6 8

# print()

# Выведем каждый второй элемент для for
# for i in range(2, 9, 2):
#     print(i, end=" ")

# Вывод:
# 2 4 6 8

# Также функция range не работает от большего диапазона к меньшему:
# print(range(2, 9, 2))
# for i in range(9, 2):
#     print(i, end=" ")
# print()
# Аналогично в while
# i = 9
# while i < 2:  # 9 < 2 => False
#     print(i, end=" ")
#     i += 2

# Разворачивание элементов в противоположную сторону
# i = 10
# while i > 0:
#     print(i, end=" ")
#     i -= 1

# for i in range(10, 0, -1):
#     print(i, end=" ")

# Print
# 10 9 8 7 6 5 4 3 2 1

# Включить граничное условие в for, аналог <= в while
# a = 9
# for i in range(0, a + 1, 1):  # start и step можно было и не указывать, так как всё равно по умолчанию
#     print(i, end=" ")
#
# print()
#
# i = 0
# while i <= 9:
#     print(i, end=" ")
#     i += 1

# Преобразовать while в for

# i = 100
# while i > 0:
#     print(i, end=" ")
#     i -= 10

# print()
# Решение
# a = 10

# for i in range(100, a - 10, -10):
# 2 способ
# for i in range(100, 0, -10):
#     print(i, end=" ")

# Задача. Пользователь вводит число.
# Необходимо вывести все числа, на которое заданное число делится без остатка.

# Введите целое число: 36
# 1 2 3 4 6 9 12 18 36

# n = int(input("Введите целое число: "))
# for i in range(1, n + 1):  # делаем start = 1, чтобы n не делить на 0 и не получать ошибку; n + 1 - чтобы включить
#     # введённое число, так как число делится само на себя
#     if n % i == 0:
#         print(i, end=" ")

# Вывести целые числа в диапазоне от 10 до 100 у которых есть две одинаковые цифры. 11 22 33 44 55 66 77 88 99

# for i in range(10, 100):  # start = 10, stop = 100
#     # if i % 11 == 0:
#     # для условия первая цифра равна последней цифре
#     if i // 10 == i % 10:  # делим нацело на 10 = первое число; получаем остаток от деления на 10 = второе число
#         print(i, end=" ")

# for, else
# for i in range(3):
#     print(i)
#     if i == 1:
#         break  # прерываем выполнение цикла на "1"
# else:
#     print("Конец цикла")

# Вложенные циклы чаще используются на for, так как проще и нет счётчика

# for i in range(3):
#     print("+++")
#     for j in range(2):
#         print("----")

# Задача. Вывести на экран прямоугольник из звёздочек, ширину и высоту задаёт пользователь

# w = int(input("Введите ширину прямоугольника: "))
# h = int(input("Введите высоту прямоугольника: "))
#
# for i in range(h):
#     for j in range(w):
#         print("*", end="")
#     print()

# Задача. Пусть прямоугольник рисуется только контуром, не закрашивается, отображается первый и последний столбец

# w = int(input("Введите ширину прямоугольника: "))
# h = int(input("Введите высоту прямоугольника: "))
#
# for i in range(h):
#     for j in range(w):
#         if i == 0 or i == h - 1 or j == 0 or j == w - 1:
#             print("*", end="")
#         else:
#             print(" ", end="")  # если не попадаем в условие, чтобы выводил пробельные символы
#     print()

# Запись в одну строку
# d = [i for i in "Hello"]
# print(d)
# Вывод ['H', 'e', 'l', 'l', 'o'], прошёлся по коллекции и вывел один тип данных

# num = [i for i in range(30)]
# print(num)
# Вывод [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]

# Запись в одну строку с условиями

# num = [i for i in range(30) if i % 2 == 0]
# print(num)

# Вывод [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28] - каждое чётное

# Тип данных - список (list), аналог массивы в JavaScript, но, как правило массив это один тип данных, в Python список
# можно помещать разные типы данных, пример ниже, что не будет ошибкой, поэтому не массив, а список.
# Массива в Python нет
# nums = [8, 3, 9, 4, 1, "Hello", True]
# print(nums)
# print(type(nums))
# # Для получения доступа к списку, обращаемся по имени и указываем индекс нужного элемента:
# print(nums[0])  # 8
# print(nums[2])  # 9
# print(nums[-1])  # True - существуют обращения по отрицательным индексам, справа индексация не с 0, а с -1, нет -0
# print(nums[6])  # True
# print(nums[-2])  # Hello
# print(nums[-7])  # 8
# Перезаписать список
# nums[1] = 256
# print(nums)
# Вывод: [8, 256, 9, 4, 1, 'Hello', True]
# nums[2] += 100
# print(nums)
# Вывод: [8, 256, 109, 4, 1, 'Hello', True]
# Списки как итерируемый объект
# for i in nums:
#     print(i)
# Вывод: 8
# 256
# 109
# 4
# 1
# Hello
# True - Поэтому называется итерируемый объект, все перебрал значения

# Вспомогательные функции, показывающие длину списка
# print(len(nums))  # 7, len работает со всеми итерируемыми объектами: list, dict (упорядоченная последовательность пар
# ключ-значение), tup (упорядоченная неизменяемая последовательность объектов), set (неупорядоченная коллекция
# уникальных объектов)

# Работа со списками и способы их создания

# s = []
# print(s)
# print(type(s))

# s1 = list()
# print(s1)
# print(type(s1))

# Работа с методом 1
# s = [1, 3, 5]
# print(s)
# print(type(s))

# Работа с методом 2
# s1 = list("Hello")
# print(s1)  # ['H', 'e', 'l', 'l', 'o']
# print(type(s1))

# Сложение списков
# s2 = s1 + s
# print(s2)  # ['H', 'e', 'l', 'l', 'o', 1, 3, 5]

# Умножение списков на целое число

# s3 = s * 2
# print(s3)  # [1, 3, 5, 1, 3, 5]

# Преобразование к разным типам данных
# n = list(range(10))  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# n = list(range(2, 10))  # [2, 3, 4, 5, 6, 7, 8, 9]
# n = list(range(2, 10, 3)) # [2, 5, 8]
# print(n)

# Работа циклов в одну строку. Генератор списка

# a = [0 for i in range(5)]
# print(a)  # [0, 0, 0, 0, 0]
#
# a1 = [i for i in range(5)]
# print(a1)  # [0, 1, 2, 3, 4]
#
# a2 = [i for i in range(1, 25)]
# print(a2)  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
#
# a3 = [i ** 2 for i in range(1, 25)]
# print(a3)  # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484,
# # 529, 576]. Работает только, если над переменными одно действие, например, возведение в степень, с сокращёнными
# # действиями также не работает, так как более одного действия, пример: a3 = [i **= 2 for i in range(1, 25)]
#
# a4 = [i * 3 for i in "Python"]
# print(a4)  # ['PPP', 'yyy', 'ttt', 'hhh', 'ooo', 'nnn']

# Наполнение списка

# a = [0] * int(input("Введите количество элементов списка: "))
# print(a)  # [0, 0, 0]
# Заменим на пользовательские значения
# for i in range(3):
#     a[i] = int(input("-> "))
# print(a)
# Работа программы: Введите количество элементов списка: 3
# [0, 0, 0]
# -> 9
# -> 5
# -> 7
# [9, 5, 7]


# 28.01.2024

# a = [0] * int(input("Введите количество элементов списка: "))
# print(a)  # [0, 0, 0] в переменной a храниться список, а range() может принимать только числовые значения -> будет
# подчёркивать
# for i in range(a):  # будет подчёркивать, поэтому нужно передать длину списка
# for i in range(len(a)):
#     a[i] = int(input("-> "))
# print(a)
# Работа программы:
# Введите количество элементов списка: 2
# [0, 0]
# -> 1
# -> 2
# [1, 2]

# Введите количество элементов списка: 5
# [0, 0, 0, 0, 0]
# -> 1
# -> 2
# -> 3
# -> 4
# -> 5
# [1, 2, 3, 4, 5]

# Создадим генератор списка в одну строку
# a = [int(input("-> ")) for i in range(int(input("Количество элементов в списке, n = ")))]  # в input("-> ") указываем,
# что хотим получать на выходе, хотим, чтобы пользователь вводил какое-то значение, для работы со строками убираем
# первый int()
# print(a)

# Задача. Посчитать в списке сумму всех отрицательных элементов (список вводит пользователь с клавиатуры)
# n = 4
# -> -3
# -> 9
# -> -5
# -> -1
# Сумма отрицательных элементов: -9

# Способ 1
# summ = 0
# a = [int(input("-> ")) for i in range(int(input("Количество элементов в списке, n = ")))]
# for i in range(len(a)):
#     if a[i] < 0:
#         summ += a[i]
# print("Сумма отрицательных элементов:", summ)

# Способ 2

# s = list(range(10, 100, 10))
# print(s)
#
# for i in range(len(s)):
#     # print(i, end=" ")  # 0 1 2 3 4 5 6 7 8 range вывел порядковый номер элементов в списке, индекс
#     print(s[i], end=" ")  # 10 20 30 40 50 60 70 80 90 - значения элементов
# print()
# for i in s:
#     print(i, end=" ")  # , end=" " вывел элементы в строку, без него столбец

# Рассмотрим способ 1

# summ = 0
# a = [int(input("-> ")) for i in range(int(input("Количество элементов в списке, n = ")))]
# for i in range(len(a)):  # в i попадают только индексы, поэтому обращаемся ->
#     if a[i] < 0:  # -> через имя и индекс
#         summ += a[i]
# Второй вариант for как коллекция
# for i in a:
#     if i < 0:
#         summ += i
# print("Сумма отрицательных элементов:", summ)

# Задача. В списке на 10 элементов посчитать количество чётных элементов и найти сумму нечётных элементов.

# Список: [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
# Сумма чётных элементов списка: 10
# Сумма нечётных элементов списка: 300

# n = list(range(21, 41))
# print(n)
# count = s = 0
# for i in range(len(n)):
#     if n[i] % 2 == 0:
#         count += 1  # счётчик, считаем сколько раз попадём в if
#     else:
#         s += n[i]
# print("Кол-во чётных элементов списка:", count)
# print("Сумма нечётных элементов:", s)

# Сократим через второй тип for, collection
# n = list(range(21, 41))
# print(n)
# count = s = 0
# for i in n:
#     if i % 2 == 0:
#         count += 1
#     else:
#         s += i
# print("Кол-во чётных элементов списка:", count)
# print("Сумма нечётных элементов:", s)

# Рассмотрим тип задач, не решаемых через коллекции, только с использованием for и переменных с индексами. Это задачи
# на обращение текущий - предыдущий n[a] и n[a - 1] и текущий следующий n[a] и n[a + 1] элемент, решаем только
# через range

# Пользователь вводит список чисел. Выведите все элементы списка, которые больше предыдущего элемента

# Введите элементы списка: n = 6
# -> 2
# -> 9 # 9 > 2 -> 9
# -> 4 # 4 > 9 -> False
# -> 6 # 6 > 4 -> 6
# -> 3 # 3 > 6 -> False
# -> 5 # 5 > 3 -> 5
# 9 6 5
# a = [int(input("-> ")) for i in range(int(input("Количество элементов в списке, n = ")))]
# print(a)
# for i in range(1, len(a)):  # чтобы не учитывать нулевой индекс
#     if a[i] > a[i - 1]:
#         print(a[i])

# Задача. Найти среднее арифметическое всех ненулевых элементов введённого списка,
# т. е. при наличии нулей их в n не учитывать
# n = 5
# -> 6
# -> 3
# -> 0
# -> 8
# -> 2
# Среднее арифметическое: 4.75

# a = [int(input("-> ")) for i in range(int(input("Количество элементов в списке, n = ")))]
# print(a)
# s = count = 0
# for i in range(len(a)):
#     s += a[i]
#     if a[i] != 0:
#         count += 1
# print("Среднее арифметическое:", s / count)

# Поменяем первый и второй элемент в списке местами
# a = [7, 9, 2, 1, 17]
# print(a)
# a[0], a[1] = a[1], a[0]
# print(a)
# Вывод:
# [7, 9, 2, 1, 17]
# [9, 7, 2, 1, 17]

# Срез списков - список[start:stop:step]
# s = [5, 9, 3, 7, 1, 8]
# print(s)
# print(s[1])
# # Вывод: 9
# print(s[1:3])
# # Вывод: срез списка [9, 3]
# print(s[:3])  # [5, 9, 3]
# print(s[3:])  # [7, 1, 8]
# print(s[:])  # [5, 9, 3, 7, 1, 8]
# # Развернём элементы списка в противоположную сторону с помощью третьего параметра step:
# print(s[::-1])  # [8, 1, 7, 3, 9, 5] если разворачиваем весь список
# print(s[6:22])  # там ничего нет, получаем []
# print(s, id(s))  # [5, 9, 3, 7, 1, 8] 2156649717632
# print(s[6:22], id(s[6:22]))  # [] 2343105905792 # 2
# print(s[::-1], id(s[::-1]))  # [8, 1, 7, 3, 9, 5] 2343105905792 # 3 -> # 2 и # 3 ссылаются на одну и ту же
# область памяти

# Задание. Создать срезы из списка: [1, 2, 3, 4, 5, 6, 7]

# lst = list(range(1, 8))
# print(lst[:])  # [1, 2, 3, 4, 5, 6, 7]
# print(lst[::-1])  # [7, 6, 5, 4, 3, 2, 1]
# print(lst[::2])  # [1, 3, 5, 7]
# print(lst[1::2])  # [2, 4, 6]
# print(lst[:1])  # [1]
# print(lst[6:])  # [7]
# print(lst[-1:])  # [7]
# print(lst[3:4])  # [4]
# print(lst[4:])  # [5, 6, 7]
# print(lst[4:1:-1])  # [5, 4, 3]
# print(lst[2:5])  # [3, 4, 5] до пятого элемента не включая его

# Создадим строку
# st = "Hello"
# print(st)
# print(st[0])
# Hello
# H
# print(st[0:3])  # Hel
# Развернём строку
# print(st[::-1])  # olleH
# Срезы работают только с итерируемыми типами данных, со строками, так называемыми, коллекциями. Для чисел не работают,
# так как число это один элемент, не коллекция и не итерируемый объект (хранит в 1 переменной несколько значений)

# # Рассмотрим список
# s = [9, 5, 6, 3, 7, 4]
# print(s[5])  # последний элемент списка всегда на единицу меньше его длины
# print(s)
# # Перезапишем пятый элемент списка
# s[5] = 8
# print(s)
# # Результат
# # [9, 5, 6, 3, 7, 4]
# # [9, 5, 6, 3, 7, 8]
# # Изменение длины списка. Добавление элемента в его конец. Методы списков. 1-й Метод append - добавление элемента в
# # конец списка, но только одного, например, одного числа или одного списка
# s.append(8)
# print(s)  # [9, 5, 6, 3, 7, 8, 8]
# # s.append("add")
# # print(s)  # [9, 5, 6, 3, 7, 8, 8, 'add']
# s.append([8, 2])
# print(s)  # [9, 5, 6, 3, 7, 8, 8, 'add', [8, 2]] - добавил вложенный список
# # Существует функция позволяющая просматривать методы у любого типа данных - функция dir,
# # просматривается в Python Console dir(str), dir(int), dir(list) и т. д.
# # Метод extend
# s.extend([20, 1, 2])
# print(s)  # [9, 5, 6, 3, 7, 8, 8, [8, 2], 20, 1, 2] - добавил без вложенности
# s.extend("add")
# print(s)  # [9, 5, 6, 3, 7, 8, 8, [8, 2], 20, 1, 2, 'a', 'd', 'd'] - строка итерируемый объект
# # Методом extend добавляем набор элементов в конец списка. Существует метод добавляющий элемент не в конец списка,
# # а в любую позицию - insert - добавляет элемент по заданному индексу, др. элементы отодвинуться
# s.insert(0, 100)  # s.insert(index: 0, object: 100)
# print(s)  # [100, 9, 5, 6, 3, 7, 8, 8, [8, 2], 20, 1, 2, 'a', 'd', 'd']
# s.insert(-1, 222)  # встаёт на позицию заданного индекса, остальное отодвигает вправо
# print(s)  # [100, 9, 5, 6, 3, 7, 8, 8, [8, 2], 20, 1, 2, 'a', 'd', 222, 'd']
# # Чтобы методом insert добавить в конец списка, нужно указать индекс, которого не существует, который выходит за
# # диапазон допустимых значений
# s.insert(20, 222)
# print(s)  # [100, 9, 5, 6, 3, 7, 8, 8, [8, 2], 20, 1, 2, 'a', 'd', 222, 'd', 222] - добавили в конец списка
# print(s[-1])  # 222


# Дан список
# s = []
# n = int(input("Введите количество элементов списка: "))
# for num in range(n):
#     x = int(input("Введите число: "))
#     # s.append(x)
#     s.insert(0, x) # поставил первое число 9 на нулевой индекс, а каждое последующее в начало списка
# print(s)

# Сравним с генератором списка в одну строку (результат одинаков):
# a = [int(input("-> ")) for i in range(int(input("Количество элементов в списке, n = ")))]
# print(a) - нельзя делать условия
# Вывод insert. Введите количество элементов списка: 3
# Введите число: 9
# Введите число: 5
# Введите число: 1
# [1, 5, 9]
# Количество элементов в списке, n = 3
# -> 9
# -> 5
# -> 1
# [9, 5, 1]

# Добавление только чётных элементов
# s = []
# n = int(input("Введите количество элементов списка: "))
# for num in range(n):
#     x = int(input("Введите число: "))
#     if x % 2 == 0:
#         s.append(x)
# print(s)

# Задача. Программа должна просить пользователя заданное количество раз ввести число 3, проверять, действительно ли оно
# кратно 3. Если да, то добавлять в список, если нет, то выводить пользователю на экране *введённое пользователем число*
# не делиться на 3 без остатка.

# Количество элементов списка: 6
# Введите число кратное 3: 9
# Введите число кратное 3: 3
# Введите число кратное 3: 5
# 5 не делиться на 3 без остатка.
# Введите число кратное 3: 8
# 8 не делиться на 3 без остатка.
# Введите число кратное 3: 12
# Введите число кратное 3: 1
# 1 не делиться на 3 без остатка.
# [9, 3, 12]

# s = []
# n = int(input("Введите количество элементов списка: "))
# for num in range(n):
#     x = int(input("Введите число кратное 3: "))
#     if x % 3 == 0:
#         s.append(x)
#     else:
#         print(x, "не делиться на 3 без остатка.")
# print(s)

# Создадим два списка. Сделаем их область пересечения
# a = [5, 9, 2, 1, 4, 3]
# b = [4, 2, 1, 3, 7]
# c = []  # в список c помещаем элемент, который есть в первом и во втором списке одновременно, [2, 1, 4, 3]
# # Способ 1
#
# for i in a:  # пройдёмся по элементу списка как по коллекции
#     for j in b:
#         if i in c:
#             continue  # чтобы когда есть повторяющиеся в a => прервал, не дал дойти до второго if и не записал
#             # их дубли, при этом просто бы перенаправил на следующую итерацию цикла
#         if i == j:
#             c.append(i)
#             break  # чтобы дальше не проверять элементы из b, когда добавим совпадение, чтоб не выводил несколько раз
#             # одинаковую область пересечения
# print(c)
#
# # Способ 2
# s = []
# for el in a:
#     if el in b and el not in s:  # защита от дублей, и элемент не находиться в списке s
#         s.append(el)
# print(s)

# Задача. Напишите функцию, которая создаёт комбинацию двух списков таким образом: [1, 2, 3] (+) [11, 22, 33]
# -> [1, 11, 2, 22, 3, 33]. Результат: [1, 11, 2, 22, 3, 33]

# a = [1, 2, 3]
# b = [11, 22, 33]
# c = []
# # print(a + b)  # [1, 2, 3, 11, 22, 33] не верно, нужно чередовать элементы из первого и второго списка
# for i in range(len(b)):
#     c.append(a[i])  # [1, 2, 3]
#     c.append(b[i])  # [1, 11, 2, 22, 3, 33]
# print(c)

# Пусть в первом списке будет на 2 элемента больше
# a = [1, 2, 3]
# b = [11, 22, 33, 44, 55]  # выведем два последних числа 44 и 55 просто в конец, так как им не с кем чередоваться
# c = []
# if len(b) > len(a):
#     for i in range(len(a)):
#         c.append(a[i])
#         c.append(b[i])
#     for i in range(len(a), len(b)): # от длины минимального до длины максимального, на случай добавления новых
#     элементов
#         c.append(b[i])
# else: # len(b) < len(a)
#     for i in range(len(b)):
#         c.append(a[i])
#         c.append(b[i])
#     for i in range(len(b), len(a)):
#         c.append(a[i])
# Если не важен порядок элементов, можно просто сделать через обмен переменными
# a = [1, 2, 3, 44, 55]
# b = [11, 22, 33]
# c = []
#
# if len(a) > len(b):
#     a, b = b, a
# for i in range(len(a)):
#     c.append(a[i])
#     c.append(b[i])
# for i in range(len(a), len(b)):
#     c.append(b[i])
# print(c)

# Методы для удаления списков. Рассмотрим метод remove, который удаляет из списка элемент по значению,
# но удаляет только первое найденное совпадение
# a = [7, 9, 2, 1, 17]
# print(a)
# a.remove(9)
# print(a)  # [7, 2, 1, 17]
#
# b = [7, 9, 2, 9, 1, 17, 9]
# print(b)
# b.remove(9)
# print(b)  # [7, 2, 9, 1, 17, 9] - удалил только первую 9
#
# # Метод pop - удаляет последний элемент из списка
# last = b.pop()  # удаляет последний элемент из списка и возвращает удалённый элемент, этот элемент сохранится,
# # потом его можно будет использовать
# print(last)  # 9
# second = b.pop(-2)  # 1 - удаляем -2 элемент списка
# print(second)  # [7, 2, 9, 17]
# print(b)  # [7, 2, 9, 1, 17]
#
# # Метод clear, очищает список
# b.clear()
# print(b)  # []

# # Методы списков, не изменяющие список
# a = [7, 9, 2, 9, 1, 17, 9]
# print(a)
# # Посчитаем количество элементов списка, метод count
# # num = a.count(9)
# # print(num)  # 3
# # Получение индекса элемента по заданному значению, метод index
# # ind = a.index(17)
# # print(ind)  # 5
# # ind = a.index(9)
# # print(ind)  # 1 только одной девятки
# # ind2 = a.index(9, 2)
# # print(ind2)  # 3
#
# # Если ищем число 4, которого нет в списке
# # num = 4  # 7 -> покажет индекс 0
# # if num in a:
# #     print(a.index(num))  # без if ValueError: 4 is not in list
#
# # Развернём список в противоположную сторону
# a.reverse()
# print(a)  # [9, 17, 1, 9, 2, 9, 7]

# a = [1, 2, 3]
# b = a
# print("a =", a)  # [1, 2, 3]
# print("b =", b)  # [1, 2, 3]
# a.append(4)
# print("a =", a)  # [1, 2, 3, 4]
# print("b =", b)  # [1, 2, 3, 4]
# b.append(120)
# print("a =", a)  # [1, 2, 3, 4, 120]
# print("b =", b)  # [1, 2, 3, 4, 120]

# Чтобы не ссылались на одну ячейку в памяти
# a = [1, 2, 3]
# b = a.copy()  # делаем дубликат списка, создаём новую ячейку в памяти, на которую будет ссылаться b
# print("a =", a)  # [1, 2, 3]
# print("b =", b)  # [1, 2, 3]
# a.append(4)
# print("a =", a)  # [1, 2, 3, 4]
# print("b =", b)  # [1, 2, 3]
# b.append(120)
# print("a =", a)  # [1, 2, 3, 4]
# print("b =", b)  # [1, 2, 3, 120]

# 3.02.2024. Метод сортировки - sort

# # Рассмотрим список из числовых значений
# a = [7, 9, 2, 9, 1, 17, 9]
# print(a)
# # a.sort()  # по умолчанию сортирует по возрастанию [1, 2, 7, 9, 9, 9, 17]
# # print(a.sort())  # None, в подсказке также было написано None, значит распечатать элемент и сохранить в переменную
# # мы не можем, список ничего не возвращает, но сортирует
# # a.sort(reverse=False)  # [1, 2, 7, 9, 9, 9, 17]
# a.sort(reverse=True)  # [17, 9, 9, 9, 7, 2, 1] - по убыванию
# print(a)

# Рассмотрим список из строковых значений, атрибут key

# s = ["Виталий", "Сергей", "Александр", "Анна"]
# print(s)
# # s.sort()  # отсортирует по алфавиту ['Александр', 'Анна', 'Виталий', 'Сергей']
# s.sort(reverse=True)  # ['Сергей', 'Виталий', 'Анна', 'Александр'] по убыванию
# # Сортировка по длине слова
# s.sort(key=len)  # ['Анна', 'Сергей', 'Виталий', 'Александр'], отсортировал по кол-ву символов
# s.sort(key=len, reverse=True)  # ['Александр', 'Виталий', 'Сергей', 'Анна']
# print(s)
# print(len(s))  # кол-во элементов в списке
# print(len(s[0]))  # 9 - кол-во символов в слове "Александр"

# Функция sorted - готовая функция. В отличие от sort не меняет исходный список, а возвращает новый список


# a = [7, 9, 2, 9, 1, 17, 9]
# print(a)
# # lst = sorted(a)
# # print(lst)  # [1, 2, 7, 9, 9, 9, 17]
# lst = sorted(a, reverse=True)  # [17, 9, 9, 9, 7, 2, 1]
# print(lst)

# Работа сортировки key с функцией sorted
# s = ["Виталий", "Сергей", "Александр", "Анна"]
# # lst = sorted(s, reverse=True)
# # print(lst)  # ['Сергей', 'Виталий', 'Анна', 'Александр']
# lst = sorted(s, key=len, reverse=True)
# print(lst)  # ['Александр', 'Виталий', 'Сергей', 'Анна']
# print(s)  # ['Виталий', 'Сергей', 'Александр', 'Анна']

# Генерация случайных данных

# Импортируем установленный модуль random, должен быть в самом верху
# import random

# print(random.random())  # 0.4276036194466052
# print(random.randint(0, 9))  # 4, границы включаются
# print(random.randrange(9))  # 2, не включая "9"
# # от 3 до 9
# print(random.randrange(3, 9, 2))  # 7
# # Формирование вещественного числа
# print(random.uniform(10.5, 25.5))  # 13.05948527173565
# print(round(random.uniform(10.5, 25.5), 2))  # 22.92

# Списки из числовых значений
# s = [20, 30, 40, 50, 60, 70, 80, 90, 10]
# print(s)  # [20, 30, 40, 50, 60, 70, 80, 90, 10]
# # Перемешаем его элементы
# # random.shuffle(s)
# # print(s)  # [60, 20, 40, 30, 10, 80, 50, 90, 70]
# # Возьмём элемент из списка
# print(random.choice(s))  # 80, случайное значение из списка
# print(random.choices(s))  # [30]
# print(random.choices(s, k=3))  # [50, 70, 10], может повторять элементы [90, 90, 70]

# Генерация списка случайных элементов
# lst = [0 for i in range(10)]  # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# lst1 = [i for i in range(10)]  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# lst2 = [input("-> ") for i in range(10)]  # пользователь вводит 10 значений
# Генерация случайных значений
# lst3 = [random.randint(0, 100) for i in range(10)]  # включая 100
# print(lst)
# print(lst1)
# print(lst2)
# print(lst3)  # [39, 50, 66, 15, 30, 1, 45, 20, 77, 84]

# s = [20, 30, 40, 50, 60, 70, 80, 90, 10]
# print(s)
# print("кол-во элементов списка =", len(s)) # работает со строкой
# print("сумма элементов списка =", sum(s))  # не сложит, если строка, синтаксис: '20', для каждого элемента
# print("максимальный элемент списка =", max(s)) # работает со строкой
# print("минимальный элемент списка =", min(s)) # работает со строкой

# # Сумма без готовой функции
# s = [20, 30, 40, 50, 60, 70, 80, 90, 10]
# print(s)
# res = 0  # так как реализация функции sum в python на первом же этапе предполагает число, конкатенация невозможна,
# # строки не сложить
# for i in s:
#     res = res + i
# print(res)
# # Сумма с готовой функцией
#
# print(sum(s))

# Задача. Заполнить список из 10 элементов случайными числами. Найти максимальный элемент списка и переместить его
# в начало списка.

# [71, 19, 22, 88, 27, 52, 50, 57, 10, 19]
# Max: 88
# [88, 71, 19, 22, 27, 52, 50, 57, 10, 19]

# lst = [random.randint(0, 100) for i in range(10)]
# print(lst)
# lst1 = max(lst)
# print("Max: ", lst1)
# lst.remove(lst1)
# lst.insert(0, lst1)
# print(lst)

# x = list('1a2b3c4d')
# print(x)
# # print('a' in x)  # Проверяет если a внутри списка x, если есть -> true
# print('a' not in x)  # False
# # print('e' in x)  # Проверяет если a внутри списка x, если нет -> false
# print('e' not in x)  # True
# # s = 'c1'  # менять здесь, так как без input
# # if s in x:
# #     print("Такой элемент в списке присутствует")
# # else:
# #     print(s, "Такой элемент в списке отсутствует")

# Проверяем, пуст ли список

# lst = []
# # if lst == []:  # pycharm ругается на сравнение явным образом
# # if len(lst) == 0:  # корректная запись
# if not lst:  # pycharm предложил replace
#     print("Список пуст")
# print(bool(lst))  # False, так как в списке пусто

# Задача. Два списка целых заполняются случайными числами. Необходимо:
# Сформировать третий список, содержащий элементы обоих списков;
# Сформировать третий список, содержащий элементы обоих списков без повторений;
# Сформировать третий список, содержащий элементы общие для двух списков;
# Сформировать третий список, содержащий только минимальное и максимальное значение каждого из списков.

# Введите размер первого списка: 5
# Введите размер второго списка: 4
# Первый список: [9, 3, 0, 5, 10]
# Второй список: [6, 7, 3, 10]
# Третий список: [9, 3, 0, 5, 10, 6, 7, 3, 10]
# Элементы общих списков без повторений: [9, 3, 0, 5, 10, 6, 7]
# Элементы общие для двух списков: [3, 10]
# Минимальное и максимальное значение каждого из списков: [0, 3, 10, 10]

# n1 = int(input("Введите размер первого списка: "))
# n2 = int(input("Введите размер второго списка: "))
# a = [random.randint(0, 10) for i in range(n1)]
# b = [random.randint(0, 10) for j in range(n2)]
# print("Первый список:", a)
# print("Второй список:", b)
# # c = a + b
# # print("Третий список:", c)
# # d = []
# # for i in range(len(a)):
# #     if a[i] not in d:
# #         d.append(a[i])
# # for i in range(len(b)):
# #     if b[i] not in d:
# #         d.append(b[i])
# # print("Элементы общих списков без повторений:", d)
# # e = []
# # for i in range(len(a)):
# #     if a[i] in b and a[i] not in e:
# #         e.append(a[i])
# # print("Элементы общие для двух списков:", e)
# f = [min(a), min(b), max(a), max(b)]
# print(f)

# Заполнить список уникальными случайными числами

# Размер списка: 10
# Уникальные случайные числа: [8, 9, 0, 5, 6, 4, 2, 1, 7, 3]. Python позволяет сократить синтаксис такой задачи
# за счёт in или not in

# # n1 = 10
# n1 = int(input("Введите размер списка: "))
# # a = [random.randint(0, 10) for i in range(n1)]
# a = []
# while len(a) != n1:
#     n = random.randrange(n1)  # от 0 до 10
#     if n not in a:
#         a.append(n)
# print(a)  # [9, 8, 0, 6, 3, 1, 5, 2, 7, 4]

# Вложенные списки в списке, матрицы

# m = [
#     [1, 2, 3, 4],
#     [5, 6, 7, 8],
#     [9, 10, 11, 12]
# ]
# print(m)
# print(len(m))  # 3
# # Получить доступ к вложенному элементу
# print(m[1][2])  # 7

# Применение
# s = ["Hello", "World"]
# print(s[1][2])  # r
# print(s[1][0])  # W

# Вернёмся, возможно задать не матрицу, ТО ЕСТЬ СПИСОК НЕ ОДИНАКОВОЙ ДЛИНЫ
# m = [
#     [1, 2, 3, 4, 55],
#     [5, 6, 7, 8],
#     [9, 10, 11, 12, 33, 44]
# ]
# print(m)

# Выведем элементы
# m = [
#     [1, 2, 3, 4],  # , 55
#     [5, 6, 7, 8],
#     [9, 10, 11, 12]  # , 33, 44
# ]
# print(m, end="\n\n")
# ...
# for row in range(len(m)):  # в переменной row лежат значения: 0, 1, 2
#     # print(row)
#     # 0
#     # 1
#     # 2
#     # print(m[row])
#     # [1, 2, 3, 4]
#     # [5, 6, 7, 8]
#     # [9, 10, 11, 12]
#     for col in range(len(m[row])):
#         # print(col)  # получим все индексы вложенных элементов
#         print(m[row][col], end="\t\t")  # 1	2	3	4	5	6	7	8	9	10	11	12
#     print()  # получим двумерную таблицу
# print()
# for row in m:
#     # print(row)
#     # [1, 2, 3, 4]
#     # [5, 6, 7, 8]
#     # [9, 10, 11, 12]
#     for x in row:
#         # print(x)  # получили содержимое матрицы в столбик
#         print(x, end="\t\t")
#     print()  # получим двумерную таблицу вторым способом

# Задача. Возвести каждый элемент матрицы в квадрат.
# m = [
#     [1, 2, 3, 4],
#     [5, 6, 7, 8],
#     [9, 10, 11, 12]
# ]
# for row in m:
#     for x in row:
#         print(x, end="\t\t")
#     print()
# print()
# for row in m:
#     for x in row:
#         print(x ** 2, end="\t\t")
#     print()

# # Задача. Зададим размер матрицы, получим матрицу, заполненную нулями
# w, h = 5, 3
# # matrix = [[0 for x in range(w)] for y in range(h)]
# # , заполненную случайными значениями
# # matrix = [[random.randint(1, 20) for x in range(w)] for y in range(h)] - короткая запись
# # Формирование без вложенных элементов: matrix = [[0 for x in range(w)] for y in range(h)]
# matrix = []  # [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
# for y in range(h):  # 3
#     new_row = []
#     for x in range(w):  # 5
#         new_row.append(0)  # new_row = [0, 0, 0, 0, 0]
#     matrix.append(new_row)
# for row in matrix:
#     for x in row:
#         print(x, end="\t\t")
#     print()

# Рассмотрим вложенные списки с одинаковым количеством элементов. Распаковка последовательности, удобнее без обращения
# по индексу

# for x, y, z in [[1, 2, 1], [3, 4, 2], [5, 6, 3], [7, 8, 4]]:
#     print(z, ") ", x, " + ", y, " = ", x + y, sep="")

# Имея только переменную x:

# for x in [[1, 2, 1], [3, 4, 2], [5, 6, 3], [7, 8, 4]]:
#     print(x[2], ") ", x[0], " + ", x[1], " = ", x[0] + x[1], sep="")

# Разработать программу, которая выводит на экран линию из символов. Пользователь указывает: число символов, тип символа
# и ориентацию линии - вертикальную или горизонтальную. НОВЫЙ СПОСОБ!!!!

# Количество символов: 15
# Тип символа: @
# 0 - горизонтальная ориентация линии
# 1 - вертикальная ориентация линии
# ориентация линии: 0
# @ @ @ @ @ @ @ @ @ @ @ @ @ @ @

# n = int(input("Кол-во символов: "))
# sim = input("Тип символа: ")
# orient = int(input("0 - горизонтальная\n1 - вертикальная\nориентация линии: "))
# i = 0
# while i < n:
#     if orient == 0:
#         print(sim, end=" ")
#         # print(sim, end=" ") - горизонтальная ориентация
#     if orient == 1:
#         print(sim)  # вертикальная ориентация
#     i += 1  # 2 способ
# else:  # 2 способ
#     print("Такой ориентации не предусмотрено")
#     # else:
#     #     print("Такой ориентации не предусмотрено")
#     #     # break # 1-й способ прерывания цикла
#     # i += 1

# import math. Такой способ добавляет в весу нашего документа, вес документа math
#
# num1 = math.sqrt(4)
# num2 = math.pi
# num3 = math.ceil(3.2)  # 4 округляет в большую сторону вне зависимости от дробной части
# num4 = math.floor(3.8)  # 3 округляет в меньшую сторону вне зависимости от дробной части
#
# print(num1)
# print(num2)
# print(num3)
# print(num4)

# Другой способ вызова import, например, название модуля большое
# import math as m
#
# num3 = m.ceil(3.2)
# num4 = m.floor(3.8)
#
# print(num3)
# print(num4)

# Третий способ вызова import
# Вообще не нужно обращаться к модулю

# from math import *
#
# num3 = ceil(3.2)
# num4 = floor(3.8)
#
# print(num3)
# print(num4)

# Для экономии памяти можно выборочно импортировать функции и методы по названию
# from math import ceil, floor
#
# num3 = ceil(3.2)
# num4 = floor(3.8)
#
# print(num3)
# print(num4)

# Способы сокращения названия
# from math import ceil, floor as f
#
# num3 = ceil(3.2)
# num4 = f(3.8)
#
# print(num3)
# print(num4)

# Задача. Пользователь вводит длину окружности. Найдите радиус окружности

# Введите радиус окружности: 9
# Длина окружности: 56.55

# from math import pi
#
# radius = int(input("Введите радиус окружности: "))
# print("Длина окружности: ", round(2 * pi * radius, 2))

# Работа с датой и временем. Метод time - возвращает текущее время, прошедшее с начала 1970 года в секундах, так как
# 1970 год считается точкой отсчёта цифровой эпохи, то есть данные начали фиксировать в электронном виде
# import time
#
# second = time.time()
# print(second)

# Вернём местное время. Т. е. количество секунд из time преобразуются в стандартный формат. Если этот метод привязать
# к сайту, то каждый пользователь будет видеть своё местное время, это время привязывается к часам, которые
# выставлены на компьютере

# local_time = time.ctime()
# print(local_time)

# Можно возвращать заданное количество секунд, например время создания файла

# import time
#
# s = 1707270441
# local_time = time.ctime(s)
# print(local_time)
# # Wed Feb  7 10:47:21 2024


# Метод localtime(s) - возвращает объект, представляющий местное время или время s
# import time
# # Для локализации вывода, чтоб месяц выводил на русском не February, а Февраль -> см Category.JPG
# import locale
#
# locale.setlocale(locale.LC_ALL, "ru")  # Сегодня: Февраль 07, 2024


# Так как у ОС итак русская локализация, способ 2
# locale.setlocale(locale.LC_ALL, "")
# Белорусская локализация
# locale.setlocale(locale.LC_ALL, "bel") # Сегодня: люты 07, 2024, серада

# res = time.localtime()
# print(res)  # time.struct_time(tm_year=2024, tm_mon=2, tm_mday=7, tm_hour=10, tm_min=52, tm_sec=33, tm_wday=2,
# # tm_yday=38, tm_isdst=0)
# print(res.tm_year)  # 2024 - вывели только год
# # Отформатируем дату, смотреть картинку Модуль_time.JPG
# print("0" + str(res.tm_mday) if res.tm_mday < 10 else res.tm_mday, ".", res.tm_mon, ".", res.tm_year, sep="")
# # 07.2.2024 - Долго, можно использовать метод, смотреть картинку Модуль_time.JPG:
# s = 1550704510
# # print(time.strftime("Today is %B %d, %Y"))  # Today is February 07, 2024
# # print(time.strftime("%d/%m/%Y, %H:%M:%S"))  # 07/02/2024, 11:11:58
# # Передадим кол-во секунд вторым параметром
# print(time.strftime("%d/%m/%Y, %H:%M:%S", time.localtime(s)))  # 21/02/2019, 08:15:10
# # Перевод на русский язык
# print(time.strftime("Сегодня: %B %d, %Y, %A"))

# Имитация задержки по времени

# pause = 1.5
# print("Программа запущена... ")
# time.sleep(pause)
# print("Пауза была", pause, "секунд")

# # Имитация задержки по времени + замерим время работы программы
#
# start = time.time()
# pause = 1.5
# print("Программа запущена... ")
# time.sleep(pause)
# print("Пауза была", pause, "секунд")
# finish = time.time()
# res = finish - start  # 1.5048959255218506
# print(res)

# Имитация задержки по времени + замерим время работы программы, метод monotonic()

# start = time.monotonic()
# pause = 1.5
# print("Программа запущена... ")
# time.sleep(pause)
# print("Пауза была", pause, "секунд")
# finish = time.monotonic()
# res = finish - start  # 1.5 более точно считает время, подходит для теста, решение задачи, тестирование алгоритма
# # сортировки, сколько времени понадобилось для сортировки одного и того же объёма данных
# print(res)

# Функции - в рассматриваемом случае это программный код, который можно вынести в отдельный блок, так называемую
# функцию, вызывать её любое кол-во раз с использованием разных параметров. Функция вызывается там, где к ней
# обращаемся в программном коде. В python набор функций ограничен. Первый вид - это обычная функция, записываемая
# отдельно, потом вызывается. Второй вид - "лямбда" - выражение (анонимные функции)

# 1-й способ задания функции использует ключевое слово def от define - "определять!". Когда заканчиваем строку с
# функцией обязательно ставим ":"

# def hello():
#     print("Hello")
#
#
# hello()

# Попробуем вызвать функцию выше:
# print()
# hello()  # NameError: name 'hello' is not defined -> сама функция в Python должна находится выше, чем её вызов
#
#
# def hello():
#     print("Hello")

# Укажем параметр в принимаемом аргументе функции
# print()
#
#
# def hello(name, age):
#     print("Мне", age, "Меня зовут", name)  # Мне 28 Меня зовут Irina Мне 19 Меня зовут Igor
#     # print("Hello", name)
#
#
# hello("Irina", 28)  # Если не передать имя hello() missing 1 required positional argument: 'name' - отсутствует один
# # обязательный позиционный аргумент
# hello("Igor", 19)
# # hello(52, "Elena")  # Мне Elena Меня зовут 52 - т. к. не строго типизированный язык
# # Hello Irina
# # Hello Igor

# Рассмотрим другую функцию. В Python лучше вместо camelCase регистра использовать символ подчёркивания - snake
# регистр, змеиный регистор, когда названия идут через подчёркивание:


# def get_sum(a, b):
#     print(a + b)
#
#
# get_sum(2, 5)  # 7
# get_sum("Hello", "Word")  # Один тип данных отработает как конкатенация строк
# # get_sum("Hello", 8)  # TypeError: can only concatenate str (not "int") to str - разные типы данных работать
# # не будут
# # a = 2
# # b = 5 - внутренние параметры нельзя называть как переменные наружной области видимости
# n = 2
# m = 5
# # get_sum(n, m)  # 7
# # Пусть
# res = get_sum(n, m)
# # print(res ** 2) # TypeError: unsupported operand type(s) for ** or pow(): 'NoneType' and 'int'
# print(res)  # None - когда вызываем функцию, то результат пытаемся сохранить в переменной res, там лежит None, потому
#
#
# # что функция не возвращает никакого значения, только печатает результат, но из функции значения не возвращаются, для
# # того, чтобы код отрабатывал, нужно не печатать результат, а возвращать (!)
#
# # c = 3
# # d = 7
# # get_sum(c, d)  # 10
#
# # -> для того, чтобы код отрабатывал, нужно не печатать результат, а возвращать (!):

# def get_sum(a, b):
#     print("Сумма: ", end="")  # здесь код достижим(!!!)
#     return a + b
#     # print("Сумма: ", end="") # недостижимый код, потому что return прекращает выполнение функции, выводится не будет
#
#
# n = 2
# m = 5
# # res = get_sum(n, m)  # 7
# # print(res ** 2)  # 49
# # Можно записать и короче:
#
# # print(get_sum(n, m))  # Сумма: 7
#
# # Если
# res = get_sum(n, m)
# print(res)
# print(res + 5 - 2)  # считает, но слово "Сумма" не выводит # 10


# # Можно сделать иначе:
# def get_sum(a, b):
#     print("Сумма: ", end="")
#     return a + b
#     # return "Сумма: " + str(a + b)  # приводим к строке, чтобы строку вернуть
#
#
# n = 2
# m = 5
#
# res = get_sum(n, m)
# print(res)  # Сумма: 7
# print(res + 5 - 2)  # 10

# Напишем функцию нахождения максимального числа, отметим, что два return подряд отработать не могут, только в условии:
# def maximum(one, two):
#     if one > two:
#         return one
#     else:
#         return two
#
#
# print(maximum(9, 6))  # 9
# print(maximum(9, 16))  # 16

# Написать функцию, нахождения разности, если a>b или суммы, если a<b; a и b - вводятся с клавиатуры

# a = 5
# b = 9
# Результат: 14

# def raz(a, b):
#     if a > b:
#         return a - b
#     else:
#         return a + b
#
#
# n = int(input("Введите первое число, a: "))
# m = int(input("Введите второе число, b: "))
#
# print("Результат: ", raz(n, m))

# Задача 2. Вывести куб всех чисел от 1 до 10 (функция, которая принимает один параметр и возвращает значение)

# 1 в кубе = 1
# 2 в кубе = 8
# 3 в кубе = 27
# 4 в кубе = 64
# 5 в кубе = 125
# 6 в кубе = 216
# 7 в кубе = 343
# 8 в кубе = 512
# 9 в кубе = 729
# 10 в кубе = 1000

# def cub(a):
#     return a * a * a
#
#
# for i in range(1, 11):
#     print(i, "в кубе =", cub(i))

# Напишите функцию change(list), которая принимает список и меняет местами его первый и последний элемент. В исходном
# списке минимум 2 элемента.

# Исходные данные:
# [1, 2, 3]
# [9, 12, 33, 54, 105]
# ['с', 'л', 'о', 'н']
# Результат:
# [3, 2, 1]
# [105, 12, 33, 54, 9]
# ['н', 'л', 'о', 'с']

# def change(lst):
#     lst[0], lst[-1] = lst[-1], lst[0]
#     return lst
#
#
# print(change([1, 2, 3]))
# print(change([9, 12, 33, 54, 105]))
# print(change(['с', 'л', 'о', 'н']))

# 2 способ с использованием методов списка

# def change(lst):
#     end = lst.pop()  # удалили последний элемент из списка
#     start = lst.pop(0)  # удалили первый элемент из списка
#     lst.insert(0, end)  # добавляем элементы в начало списка
#     lst.append(start)  # добавляем элемент в конец списка
#     return lst
#     # return end # "3 105 н" - проверили, что храниться в удалённых. 2 return НЕЛЬЗЯ!!!
#     # return start # проверили, что первые элементы лежат "1 9 с"
#
#
# print(change([1, 2, 3]))
# print(change([9, 12, 33, 54, 105]))
# print(change(['с', 'л', 'о', 'н']))

# # Функции, возвращающие логический тип данных
# def maximum(one, two):
#     if one > two:
#         return True
#     else:
#         return False
#
#
# print(maximum(9, 6))  # True
# print(maximum(9, 16))  # False
#
# # if maximum(9, 6):
# #     print("Первое число больше второго")
# # else:
# #     print("Второе число больше первого")
# #
# # # Первое число больше второго
#
# if maximum(9, 16):
#     print("Первое число больше второго")
# else:
#     print("Второе число больше первого")
#
# # Второе число больше первого

# Пример. Сделаем проверку надёжности пароля. Условие его длина 8 и больше и хотя бы одна буква в нижнем и одна буква
# в верхнем регистре и хотя бы одна цифра

# def check_password(password):
#     has_lower = False
#     has_upper = False
#     has_num = False
#
#     for ch in password:
#         if "a" <= ch <= "z":  # Сравниваются по коду символа ASCII 97 <= 49 <= 122 -> False, до кода символа
#             # k -> 107: 97 <= 107 <= 122 -> True или a -> 97 -> True
#             has_lower = True
#         if "A" <= ch <= "Z":
#             has_upper = True
#         if "0" <= ch <= "9":
#             has_num = True
#
#     if len(password) >= 8 and has_lower and has_upper and has_num:
#         return True
#     # else:
#     #     return False
#     return False  # в функциях можно обойтись без else, отработает и так с return
#
#
# p = input("Введите пароль: ")
# if check_password(p):
#     print("Это надёжный пароль")
# else:
#     print("Это не надёжный пароль")

# !!! Домашнее задание. Написать программу, которая случайным образом заполняет двумерный список размерностью 3x4
# цифрами от -20 до 10. Необходимо найти количество отрицательных элементов. Необходимо найти количество отрицательных
# элементов. dz6 03.02.2024.py

# -18 --- 4 --- -7
# -20 --- 9 --- -3
# -18 --- -14 --- 1
# 4 --- -8 --- -8
# Количество отрицательных элементов: 8

# w, h = 3, 4
# count = 0
# matrix = [[randint(-20, 10) for y in range(w)]for x in range(h)]
# for row in matrix:
#     for x in row:
#         print(x, end="\t\t")
#         if x < 0:
#             count += 1
#     print()
# print("Количество отрицательных элементов: ", count)

# Занятие 8. 10.02.2024

# Функции в Python. Рассмотрим какие типы аргументов бывают у функций. 1. Функция может принимать количество каких-то
# аргументов. В параметр нужно передавать всю информацию, что функция может возвращать. Это надо писать в print.
# В def: one, two - объявляем функцию. Если есть условие, то функция может возвращать несколько значений,
# # например true, false. Если true принтуется список одних значений, если false других. Создадим функцию: 7:50
# def get_sum(a, b, c, d):
#     return a + b + c + d
#
#
# print(get_sum(1, 5, 2, 7))  # print вызовет то, что вернёт return
# # print(get_sum(1, 5, 2,))  # TypeError: get_sum() missing 1 required positional argument: 'd' нужен аргумент d

# def get_sum(a, b, c, d=1):
#     return a + b + c + d  # в d просто попадёт единица и python просто сделает + 1, можно сделать
#     # параметром по умолчанию и c, но нельзя делать справа-налево
#
#
# print(get_sum(1, 5, 2))  # 9 и ошибки не будет


# Пример ошибки:
# def get_sum(a=4, b, c=0, d=1): # Нельзя поставить пробельные символы вокруг оператора сравнения
#     return a + b + c + d
#
#
# print(get_sum(1, 5, 2))
# print(get_sum(1, 5, d=2))

# Название ошибки

#   File "F:\main2.py", line 2520
#     def get_sum(a=4, b, c=0, d=1):
#                         ^
# SyntaxError: non-default argument follows default argument

# Чтобы 2 попала в d

# def get_sum(a, b, c=0, d=1):  # Нельзя поставить пробельные символы вокруг оператора сравнения
#     return a + b + c + d
#
#
# print(get_sum(1, 5, d=2))  # 8            1 + 5 + 0 + 2


# Написать функцию, которая имеет количество символов = 20 и символ '-', в качестве аргументов по умолчанию и выводит
# на экран набор произвольных символов заданной длины.

# Вывод
# ++++++++++
# *****
# ###############
# -------
# --------------------

# def set_param(c=20, s="-"):
#     print(s * c, end="")
#     print()
#
#
# set_param()
# # set_param(7) выведет 7 дефисом, а не 20
# set_param(s="#")  # выведется 20 # так как они попадут в s
# set_param(15, "+")  # выведется 15 +


# Написать функцию, принимающую некоторое целое число и вычисляющую по умолчанию сумму его чётных цифр.
# Предусмотреть возможность изменения поведения функции таким образом, чтобы она также могла вычислять
# сумму нечётных цифр.
# Тестовые значения:
# N = 9874023, even_sum=14, odd_sum=19
# N = 38271, even_sum=10, odd_sum=11
# N = 123456789, even_sum=20, odd_sum=25

# Сумма чётных цифр:
# 14
# 10
# 20

# Сумма нечётных цифр:
# 19
# 11
# 25

# def digits_sum(n, even=True):  # 9874023, изначально even=False
#     s = 0
#     while n > 0:
#         cur_digit = n % 10
#         if even and cur_digit % 2 == 0:  # Проверка для even=True
#             s += cur_digit
#         if not even and cur_digit % 2:  # Проверка для even=False
#             s += cur_digit
#         n //= 10  # n = n // 10
#     return s
#
#
# print("Сумма чётных цифр:")
# print(digits_sum(9874023))
# print(digits_sum(38271))
# print(digits_sum(123456789))
# print("Сумма нечётных цифр:")
# print(digits_sum(9874023, even=False))
# print(digits_sum(38271, even=False))
# print(digits_sum(123456789, even=False))

# Параметры со значениями по умолчанию

# def display_info(name, age):
#     print("Name:", name, "\nAge", age)
#
#
# display_info("Irina", 23)
# display_info("23", "Irina")
# display_info("Igor", age=23, name="Irina") TypeError: display_info() got multiple values for argument 'name'

# lt1 = [1, 2, 3]
# lt2 = [1, 2, 3]
# print(lt1 == lt2)  # True
# print(lt1 is lt2)  # False
#
# a = "Hello"
# b = "Hello"
# print(a == b)  # True
# print(a is b)  # True
# a = a + "_new"
# print(a)
# print(a == b)  # False
# print(a is b)  # False

# lt1 = [1, 20, 3]
# print(lt1, id(lt1), id(lt1[0]), id(lt1[1]))
# lt1[1] = 50
# print(lt1, id(lt1), id(lt1[0]), id(lt1[1]))  # адрес изменённого списка не меняется

# Неизменяемые типы данных - int, str, float, bool, tuple(кортеж)
# Изменяемые типы данных - list

# Тип данных - кортеж (англ. tuple) = неизменяемый список

# Дан список
# lst = [10, 20, 30]  # список
# tpl = (10, 20, 30)  # кортеж
# print(lst.__sizeof__())  # 104 размер списка больше кортежа, так как изменяемый
# print(tpl.__sizeof__())  # 48
#
# # Поменяем элемент списка, так как изменяемый тип данных
# lst[1] = 5
# print(lst)  # [10, 5, 30]
# # Поменяем элемент кортежа
# # tpl[1] = 5
# # print(tpl)  # TypeError: 'tuple' object does not support item assignment
# # К кортежу можно обратиться по индексу
# print(tpl[1])  # 20
# print(type(tpl))  # <class 'tuple'>

# a = ()

# print(a, type(a))  # () <class 'tuple'>

# # b = tuple()
# # print(b, type(b))  # () <class 'tuple'>
# # Кортеж - это функция явного преобразования типов данных
# # b = tuple("Hello")
# #
# # print(b, type(b))  # ('H', 'e', 'l', 'l', 'o') <class 'tuple'> Каждый символ попадёт в свой элемент кортежа,
# # # разложили по индексно
# # b = tuple(["Hello", "World"])  # список на 2 эл-та из которого получили кортеж на 2 эл-та
# # b = tuple(["Hello", "World"])
# # ('Hello', 'World') <class 'tuple'> теперь каждое слово он считает за индексы, итерабильный объект
# b = tuple(123456789)  # TypeError: 'int' object is not iterable Не итерируемый объект, в цикле нельзя пройтись,
# # объект оторвать
# print(b, type(b))
# a = (1, 5, 9, 7, 8)  # (1, 5, 9, 7, 8) <class 'tuple'>
#
# print(a, type(a))

# a = 1, 5, 9, 7, 8  # (1, 5, 9, 7, 8) <class 'tuple'> Другой способ задания кортежа,
# # может сбить с толку других разработчиков
# print(a, type(a))
#
# b = (5)
#
# print(b, type(b))  # 5 <class 'int'> Пока нет запятой он не поймёт, что это кортеж
# # 5 <class 'int'> Пока нет запятой он не поймёт, что это кортеж
# с = (5,)
# print(с, type(с))  # (5,) <class 'tuple'> Теперь кортеж, даже без круглых скобок. Вывод: круглые скобки нужны,
# # чтобы не сбивать пользователя

# Кроме получения доступа по индексу, к кортежам применяют срезы, не отличаются от списков

# a = (4, 9, 5, 10, 6)
# print(a[2:4])  # (5, 10) срез от 2 до 4, е включая 4-й индекс

# Всё, что применяют к спискам, работает и с кортежами, но их после создания изменить нельзя

# Создадим генератор списков на 5 элементов, заполненных нулями

# tpl = [0 for i in range(5)] # [0, 0, 0, 0, 0]


# print(tpl)

# Для кортежей:
# tpl = (0 for i in range(5))  # <generator object <genexpr> at 0x00000284D692AAC0> есть какой-то адрес,
# <generator object <genexpr> at 0x00000284D692AAC0> есть какой-то адрес,
# но он не может отобразить результат
# print(tpl)
# Чтобы отработало нужно сделать явное преобразование типов, можно без квадратных скобок
# tpl = tuple([0 for i in range(5)])  # (0, 0, 0, 0, 0)
# print(tpl)

# Сделаем для пользователя
# tpl = tuple(input("->") for i in range(5))  # можно вводить данные
# tpl = tuple(randint(1, 100) for i in range(5))  # будет генерация
# print(tpl)
# Заполнить кортеж из 10-ти элементов степенями двойки от 1 до 12 включительно
# (2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096)

# tpl = tuple(2 ** i for i in range(1, 13))
# print(tpl)

# Создадим 2 кортежа, можно складывать и умножать на ЦЕЛОЕ число

# t1 = tuple("hello")
# t2 = tuple("world")
# print(t1)
# print(t2)
#
# t3 = t1 + t2
# print(t3)
# print(t3 * 2)
#
# # У КОРТЕЖЕЙ ЕСТЬ ДВА МЕТОДА СПИСКОВ count, index ОСТАЛЬНЫЕ МЕТОДЫ ИЗМЕНЯЮТ ТИП ДАННЫХ
# print(t3.count("l"))  # 3 В hello world 3 буквы "l", посчитал
# print(t3.index('l', 4))  # 8 индекс буквы "l", ищем с 8-го элемента кортежа t3:
# # ('h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd', 'h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')
# # print(t3.index('l', 4, -2))  # ValueError: tuple.index(x): x not in tuple ОШИБКА ТАК КАК ИЩЕМ В ТОМ
# # ДИАПАЗОНЕ ГДЕ l НЕТ ДЛЯ ЭТОГО МЕТОДА НУЖНА ПРОВЕРКА, ЧТО ЭЛЕМЕНТ СУЩЕСТВУЕТ
# # Подстраховка от ошибки ищем другую букву, выносим в переменную:
# # sym = "e"
# # if sym in t3:
# #     print(t3.index(sym))  # показывает, что в t3 у e 1-й индекс
# # Нужна подстраховка на случай, если символа не существует, вдруг букву "a" ищем
# # sym = "a"
# # if sym in t3:
# #     print(t3.index(sym))
# # else:
# #     print("Не существует")
# # Результат: Не существует. Чтобы поиск для диапазона сработал корректно, нужно сделать проверку,
# # воспользоваться исключением. Конструкция if-else работает некорректно для поиска ТОЛЬКО на диапазоне - обрабатываем
# # исключение, если диапазона нет if-else, так как index в отличие от count выбрасывает исключения
# sym = "l"
#
# try:
#     print(t3.index(sym, 4, -2))
# except ValueError:
#     print("Не существует в заданном диапазоне")

# Задача. Функция slicer() на вход принимает кортеж и случайный элемент. Требуется вернуть новый кортеж, начинающийся
# с первого появления элемента в нём и заканчивающийся вторым его появлением включительно. Если элемента нет вовсе -
# вернуть пустой кортеж. Если элемент встречается только один раз, то вернуть кортеж, который начинается с него и
# идёт до конца исходного.
# Тесты:
# (1, 2, 3), 8)
# (1, 8, 3, 4, 8, 8, 9, 2), 8)
# (1, 2, 8, 5, 1, 2, 9), 8)
#
# ()
# (8, 3, 4, 8)
# (8, 5, 1, 2, 9)

# def slicer(tpl, el):
#     if el in tpl:
#         if tpl.count(el) > 1:
#             first = tpl.index(el)
#             second = tpl.index(el, first + 1)
#             return tpl[first:second + 1]
#         else:
#             return tpl[tpl.index(el):]
#     else:
#         return ()
#
#
# print(slicer((1, 2, 3), 8))
# print(slicer((1, 8, 3, 4, 8, 8, 9, 2), 8))
# print(slicer((1, 2, 8, 5, 1, 2, 9), 8))

# Способ 2
# def slicer(tpl, el):
#     if el in tpl:
#         ...
#     else:
#         return tuple()
#
#
# print(slicer((1, 2, 3), 8))
# print(slicer((1, 8, 3, 4, 8, 8, 9, 2), 8))
# print(slicer((1, 2, 8, 5, 1, 2, 9), 8))

# Способ 3
# def slicer(tpl, el):
#     if el in tpl:
#         if tpl.count(el) > 1:
#             return tpl[tpl.index(el):tpl.index(el, tpl.index(el) + 1) + 1]
#         else:
#             return tpl[tpl.index(el):]
#     else:
#         return ()
#
#
# print(slicer((1, 2, 3), 8))
# print(slicer((1, 8, 3, 4, 8, 8, 9, 2), 8))
# print(slicer((1, 2, 8, 5, 1, 2, 9), 8))

# Создадим кортеж и положим в него 3 списка. Положим в неизменяемый тип данных изменяемый и изменим. Покажем что
# возможно исключение неизменяемости изменяемых объектов

# t = (10, 11, [1, 2, 3], [4, 5, 6], ["hello", "world"])
# print(t, id(t))
# t[4][0] = "hi"
# t[4].append("new")
# print(t, id(t))

# Создадим второй кортеж. Пусть это будут координаты точки, мы их по отдельности будем получать. Чтобы обращаться не
# по индексу, а по имени в переменную x сохраним t по индексу 0, в переменную y t по индексу 1, а в z t по индексу 2

# t = (1, 2, 3)
# x = t[0]
# y = t[1]
# z = t[2]
# print(x, y, z)  # 1 2 3
#
# # Сделаем проще
# t = (1, 2, 3)
# x, y, z = t  # распаковка кортежа
# print(x, y, z)  # 1 2 3

# Применение распаковки кортежа в функциях

# def get_user():
#     name = "Tom"
#     age = 22
#     is_married = False  # Вернём все переменные через запятую, вернётся кортеж
#     return name, age, is_married
#
#
# user = get_user()
# # print(user)  # ('Tom', 22, False) можно из кортежа получить элемент по индексу
# print(user[0])  # Tom
# print(user[1])  # 22
# print(user[2])  # False Данная конструкция не удобна, можно распаковать кортеж

# def get_user():
#     name = "Tom"
#     age = 22
#     is_married = False
#     return name, age, is_married
#
#
# user = get_user()
# # first_name, year, married = user так как переменные в разных областях видимости, можно и не менять названия,
# # но получим бежевое подчёркивание
# name, age, is_married = user
# print(name, age, is_married)  # Tom 22 False
#
# # Можно ещё сократить
# def get_user():
#     name = "Tom"
#     age = 22
#     is_married = False
#     return name, age, is_married
#
#
# first_name, year, married = get_user()
# print(first_name, year, married)  # Tom 22 False

# Занятие 9 17.02.2024

# Python 4 области видимости (везде основные 2: глобальная и локальная)

# name = "Igor"  # В else попадаем при пустой строке
#
# if name:
#     print("Name:", name)
#     name = "Marina"
# else:
#     print("ELSE")
#
# print(name)  # Вывод: Marina, в отличие от javaScript локальная переменная перезаписывает глобальную, нет "}"

# Для циклов аналогично

# name = "Igor"
#
# for i in range(5):
#     print(i, end=" ")
#     name = "Marina"
#
# print()
# print(name)  # Marina - глобальная переменная изменилась
#
# # Только для функций создаются локальные области видимости в Python

# name = "Igor"
#
#
# def func():
#     print("Hello")
#
#
# func()
# print(name)
# # Hello
# # Igor

# Перезапишем функцию в локальной области:
# name = "Igor"
#
#
# def func():
#     print("Hello")
#     name = "Marina"
#
#
# func()
# print(name)  # Igor - глобальная переменная не изменилась у функции

# Сложные кортежи

# countries = (
#     ("Германия", 80.2, (("Берлин", 3.326), ("Гамбург", 1.718))),
#     ("Франция", 66, (("Париж", 2.2), ("Марсель", 1.6))),
# )
# print(countries, end="\n\n")
#
# for country in countries:
#     country_name, country_population, cities = country
#     print("\nСтрана: ", country_name, ", население = ", country_population, sep="")
#     for city in cities:
#         city_name, city_population = city
#         print("\tГород: ", city_name, ", население = ", city_population, sep="")

# Множества (set) - неупорядоченная коллекция, нет индекса, которая хранит только уникальные значения
# (изменяемый тип данных) и итерируемый объект

# s = {"red", "green", "blue", "red", "green"}
# print(type(s))  # <class 'set'>
# print(s)  # {'green', 'blue', 'red'} - множество сохраняет только уникальные значения не повторяет
# print(len(s))  # 3

# Работа с множествами

# a = {}
# print(a, type(a))  # {} <class 'dict'>, а не set!!! То есть в Python есть ещё один тип данных создаваемый
# # в фигурных скобках, это dict - словарь

# Создание пустого множества
# a = set()
# print(a, type(a))  # set() <class 'set'>

# Генерация множеств

# s = {x * x for x in range(3)}
# print(s)

# Ввод множеств
# s = {input("-> ") for x in range(3)}
# print(s)

# Заполнение случайными значениями

# s = {randint(20, 50) for x in range(10)} # Если выведет меньше 10, значит попали случайные одинаковые значения
# # set не повторяет
# print(s)

# Проверка существует ли элемент в множестве
# s = {"red", "green", "blue"}
# print("green" in s)  # True
# print("green" not in s)  # False

# Рассмотрим вариации конструкции for - in
# Список с условием, для множеств также
# lst = ['ab_1', 'ac_2', 'bc_1', 'bc_2']
# # lt = [i for i in lst if 'a' in i]  # вместо if else нельзя. Заменим регистр, используем тернарное выражение
# # lt = ['A' + i[1:] if i[0] == 'a' else 'B' + i[1:] for i in lst] # if-else слева от for
# lt = ['A' + i[1:] if i[0] == 'a' else 'B' + i[1:] for i in lst if i[1] == 'c']
# print(lt)

# Множества изменяемый тип данных, покажем

# s = {"red", "green", "blue"}
# print(s)
# s.add("black")  # добавление элемента, всего 1 метод
# print(s)
# # Удалим элемент
# # s.remove("black")
# # print(s)
# # s.remove("pink")
# # print(s)  # KeyError: 'pink' Метод не безопасен, выбрасывает исключения
# # Безопасный метод удаления:
# s.discard("green")
# print(s)  # {'black', 'red', 'blue'}
# s.discard("pink")
# print(s)  # {'red', 'black', 'blue'} не выбросит исключение, действий не будет, исключения не выбросит, если эл-та
# # не существует
# color = s.pop()  # удаляет первый элемент из множества, который случайный
# print(s)
# print(color)
# s.clear()  # очищает множество
# print(s)

# # Методы множеств
# # a = {0, 1, 2, 3}
# # b = {4, 3, 2, 1}  # "+" НЕ РАБОТАЕТ, есть ОБЪЕДИНЕНИЕ
# # # c = a.union(b)  # {0, 1, 2, 3, 4}
# # c = a | b  # {0, 1, 2, 3, 4} то же, что и union
# # a |= b
# # print(a)  # {0, 1, 2, 3, 4}
# # print(c)  # {0, 1, 2, 3, 4}
# a = {0, 1, 2, 3}
# b = {4, 3, 2, 1}
# # c = a & b
# # print(c)  # {1, 2, 3} - пересечение множеств
# # c = a - b
# # print(c)  # {0} - оставляет только уникальные элементы из первого множества
# c = a ^ b
# print(c)  # {0, 4} - уникальные для двух множеств

# Когда 2-е подмножество 1-го
# a = {0, 1, 2, 3, 4}
# b = {3, 2, 1}
# print(a <= b)  # False, a не подмножество b
# print(a >= b)  # True, b подмножество a
# print(a < b)  # False
# print(a > b)  # True
# print(a != b)  # True

# Задача. Дан набор множеств: {1, 2}, {3}, {4, 5}, {3, 2, 6}, {6}, {7, 8}, {9, 8}. Найти количество уникальных элементов
# во всех множествах. Найти минимальный и максимальный элементы среди них.

# s1 = {1, 2}
# s2 = {3}
# s3 = {4, 5}
# s4 = {3, 2, 6}
# s5 = {6}
# s6 = {7, 8}
# s7 = {9, 8}
# # s = s1.union(s2, s3, s4, s5, s6, s7)
# s = s1 | s2 | s3 | s4 | s5 | s6 | s7
# print(s)
# print(len(s))
# print(min(s))
# print(max(s))

# Задача 2. Найти общие буквы в двух разных строках.

# s1 = "Hello"
# s2 = "How are you"
# a = set(s1) & set(s2)
# print(a)  # {'H', 'o', 'e'}
# for i in a:
#     print(i, end=" ")  # e o H

# Задача 3. Марина, Женя и Света занимаются рисованием, а Костя, Женя и Илья - дополнительно посещают уроки музыки.
# Определите сколько человек занимается только одним видом искусства и выведите список их имён. Ученик,
# занимающийся в обоих кружках, решил бросить занятия рисованием. Произведите соответствующие изменения.

# Вывод:
# Only one hobby: {'Sveta', 'Kostya', 'Ilya', 'Marina'}
# Both hobbies: {'Jenya'}
# Drawing: {'Sveta', 'Marina'}

# drawing = {"Марина", "Женя", "Света"}
# music = {"Костя", "Женя", "Илья"}
# one_hobby = drawing ^ music
# print(one_hobby)
# both_hobbies = drawing & music
# print(both_hobbies)
# drawing = drawing - both_hobbies
# print(drawing)

# Взаимодействие set - list (со списком). Найти набор уникальных значений списка. Для кортежа tuple также
# a = [9, 8, 6, 5, 8, 7, 1, 5, 5, 4, 4, 7, 8, 7, 8, 9, 5, 4]
# print(a)
# s = set(a)
# print(s)
# a1 = list(s)
# print(a1)  # [1, 4, 5, 6, 7, 8, 9] - повторяющихся нет, только уникальные
#
# s = frozenset("Hello")  # в отличие от обычного множества - set - неизменяемый тип данных
# print(s)

# Словари (dict)

# lst = [1, 2, 3]
# d = {"one": 1, "two": 2, "three": 3}
# print(lst)  # [1, 2, 3]
# print(lst[1])  # 2
# print(d)  # {'one': 1, 'two': 2, 'three': 3}
# print(d["two"])  # 2
# lst[1] = 200
# print(lst)  # [1, 200, 3]
# d["two"] = 200
# print(d)  # {'one': 1, 'two': 200, 'three': 3}


# 2 способа создания dict

# d = {}
# print(d, type(d))  # {} <class 'dict'>
#
# d1 = dict()
# print(d1, type(d1))  # {} <class 'dict'>
#
# # Особенности словарей dict
# # d1 = dict("one": 1, "two": 2) # подчёркивание, так как структуры "ключ - значение" не существует без фигурных скобок
#
# # Синтаксис записи для словаря, структура ключ-значение, похоже на функцию "аргумент - значение":
# d2 = dict(one=1, two=2)
# print(d2, type(d2))  # {'one': 1, 'two': 2} <class 'dict'>
#
# d3 = dict([["a", 1]])
# print(d3, type(d3))  # {'a': 1} <class 'dict'> - получили словарь
# # Для передачи нескольких ключей используют кортеж
#
# d3 = dict([("a", 1), ("b", 2)])
# print(d3, type(d3))  # {'a': 1, 'b': 2} <class 'dict'> - словарь

# Занятие 10. 18.02.2024

# d = {0: "text", "one": 45, (1, 2.3): "Кортеж", "список": [2, 3, 6, 7], True: 1}
# # ключом может быть только неизменяемый тип данных, приоритета нет, выводиться то, что встречается первым
# print(d)
# print(d[0])  # [0] - ключ
# print(d[1, 2.3])
# # Проверка существования элементов в словаре:
# print("one" in d)  # True
# print("ne" in d)  # False
#
# # Добавим в словарь
# d["ne"] = "Новое значение"
# print(d)

# Пройдёмся в цикле по элементам словаря:
# for i in d:
#     print(i)  # Получим только ключи:
# 0
# one
# (1, 2.3)
# список
# True
# ne

# Получим значения (пара ключ - значение)
# for key in d:
#     print(key, ":", d[key])
# # Удаление ключа
# key = "one"
#
# del d[key]
#
#
# print(d)

# Исключение на несуществующий ключ:
# key = True
# if key in d:
#     del d[key]
#
# print(d)
# 2-й способ исключения try - except
# key = 45
#
#
# try:
#     del d[key]
# except KeyError:
#     print("Элемента с ключом " + str(key) + " нет в словаре")
# print(d)

# Задача. Дан словарь с числовыми значениями. Необходимо их все перемножить и вывести на экран.
# {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}

# -105

# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}
# a = 1
# for key in d:
#     a *= d[key]
# print(a)

# Задача. Предложите пользователю ввести название четырёх овощей и сохраните их в словаре с числовыми индексами,
# начиная с 1. Выведите содержимое словаря с указанием индексов и элементов. Спросите пользователя, какой элемент он
# хочет исключить, и удалите его из списка. Выведите содержимое словаря.

# d = dict()  # {}
# d[1] = input("-> ")
# d[2] = input("-> ")
# d[3] = input("-> ")
# d[4] = input("-> ")
# Способ в одну строку
# d = {i: input("-> ") for i in range(1, 5)}  # генератор словарей
# print(d)
# dislike = int(input("Какой элемент исключить: "))
# del d[dislike]
# print(d)

# Написать программу, в которой хранятся данные о товарах, их количестве и цене. При запуске программы эта информация
# выводится на экран. Далее пользователю должно предлагаться вводить номера товаров и их новое количество. Изменение
# данных должно завершаться, если пользователь вводит специально оговоренный символ (например, 0). После этого все
# данные о товарах должны снова выводится на экран.

# goods = {
#     '1': ['Core-i3-4330', 9, 4500],
#     '2': ['Core-i5-4670', 3, 8500],
#     '3': ['AMD FX-6300', 6, 3700],
#     '4': ['Pentium G3220', 8, 2100],
#     '5': ['Core-i5-3450', 5, 6400],
# }
#
# for i in goods:
#     print(i, ") ", goods[i][0], " - ", goods[i][1], " шт. по ", goods[i][2], " руб.",  sep="")
#
# while True:
#     n = input("№: ")
#     if n != "0":
#         if n in goods:
#             while True:
#                 try:
#                     count = int(input("Количество: "))
#                     goods[n][1] = count
#                     break
#                 except ValueError:
#                     print("Значение некорректно. Введите число")
#         else:
#             print("Такого ключа не существует")
#     else:
#         break
#
# for i in goods:
#     print(i, ") ", goods[i][0], " - ", goods[i][1], " шт. по ", goods[i][2], " руб.",  sep="")

# Методы словарей
# d = {'a': 1, 'b': 2, 'c': 3}
# print(d)
# print(d.keys())
# print(d.values())
# print(d.items())
# # for key in d.keys():
# # for key in d.values():
# # for key in d.items():
# for key, value in d.items():
#     print(key, "->", value)
# # print(list(d))
# print(list(d.keys()))
# print(list(d.values()))
# print(list(d.items()))

# d = {'a': 1, 'b': 2, 'c': 3}
# d2 = d

# Все ссылаются на одну ячейку памяти
# print("D =", d)
# print("D2 =", d2)
#
# d['b'] = 5
# d2['e'] = 7
# print("D =", d)
# print("D2 =", d2)

# # d и d2 ссылаются на разные ячейки в памяти
# d2 = d.copy()  # делает копию по другому адресу
#
# print("D =", d, id(d))
# print("D2 =", d2, id(d2))
#
# d['b'] = 5
# d2['e'] = 7
# print("D =", d, id(d))
# print("D2 =", d2, id(d2))

# d = {'a': 1, 'b': 2, 'c': 3}
# print(d['b'])  # 2
# # value = d.get('b')
# value = d.get('b', 'Такого ключа не существует')
# print(value)  # 2
# item = d.setdefault('c')
# item = d.setdefault('w', 5)  # {'a': 1, 'b': 2, 'c': 3, 'w': 5}
# print(item)  # 3
# print(d)  # {'a': 1, 'b': 2, 'c': 3}

# Удаление элементов из словаря
# d = {'a': 1, 'b': 2, 'c': 3}
# # item = d.pop('b')
# item = d.pop('w', "Такого ключа не существует")  # Безопасный не выбрасывает исключения
# print(item)
# print(d)  # {'a': 1, 'c': 3}
# item2 = d.popitem()  # Удаляет последний ключ и значение и возвращает кортеж с удалёнными элементами
# print(item2)
# print(d)
# # Очистить словарь
# d.clear()
# print(d)

# Создать словарь
# d = dict.fromkeys(['a', 'b'], 100)  # {'a': 100, 'b': 100}
# print(d)

# Складывать словари нельзя
# d = {'a': 1, 'b': 2, 'c': 3}
# d2 = {'r': 7, 'q': 9}
# print(list(d2.items()))  # [('r', 7), ('q', 9)] - список кортежей
# d.update(d2)
# d3 = d.copy()
# d3.update(d2)  # через d3 только так
# print(d)  # {'a': 1, 'b': 2, 'c': 3, 'r': 7, 'q': 9} только так объединяются
# С версией 3.9 появилась возможность операций
# d3 = d | d2  # можно d |= d2
# print(d3)  # {'a': 1, 'b': 2, 'c': 3, 'r': 7, 'q': 9}

# Словарь и список кортежей неявно преобразуются и складываются

# d = {'a': 1, 'b': 2, 'c': 3}
# d2 = [('r', 7), ('q', 9)]
# d |= d2
# print(d)  # {'a': 1, 'b': 2, 'c': 3, 'r': 7, 'q': 9}

# Задача. Дан словарь {'name': 'Kelly', 'age': 25, 'salary': 8000, 'city': 'New York'}.
# Создать новый словарь, который будет содержать только имя и зарплату сотрудника,
# а затем удалить эти значения из исходного словаря.

# {'age': 25, 'city': 'New York'}
# {'name': 'Kelly', 'salary': 8000}

# d = {'name': 'Kelly', 'age': 25, 'salary': 8000, 'city': 'New York'}
# new_d = dict()
#
# new_d['name'] = d.pop('name')
# new_d['salary'] = d.pop('salary')
#
#
# print(d)
# print(new_d)

# Переименуем ключ 'city' в 'location'
# d = {'name': 'Kelly', 'age': 25, 'salary': 8000, 'city': 'New York'}
# print(d)
#
# d['location'] = d.pop('city')
#
# print(d)

# Поменяем ключи и значения местами
# d = {'один': 1, 'два': 2, 'три': 3, 'четыре': 4}
# new_d = {value: key for key, value in d.items()}
# print(new_d)

# Вывести только два первых ключа и значения
# d = {'один': 1, 'два': 2, 'три': 3, 'четыре': 4}
# new_d = {value: key for key, value in d.items() if value <= 2}
# print(new_d)  # {1: 'один', 2: 'два'}

# Создайте следующий набор данных, представляющий объёмы продаж по регионам, в виде двумерного словаря.
# Запросите у пользователя имя и регион. Выведите соответствующие данные. Запросите у пользователя имя и регион
# того значения, которое он хочет изменить, и позвольте скорректировать объём продаж. Выведите объёмы продаж по всем
# регионам для имени, выбранного пользователем.

# sales = {
#     "John": {"N": 3056, "S": 8463, "E": 8441, "W": 2694},
#     "Tom": {"N": 4832, "S": 6786, "E": 4737, "W": 3612},
#     "Anne": {"N": 5939, "S": 4802, "E": 5820, "W": 1859},
#     "Fiona": {"N": 3904, "S": 3645, "E": 8821, "W": 2451},
# }
# print(sales)
#
# for x in sales:
#     print(x)
#     for y in sales[x]:
#         print("\t", y, ":", sales[x][y])
#
# person = input("Имя: ")
# region = input("Регион: ")
# print(sales[person][region])
# new_data = int(input("Новое значение: "))
# sales[person][region] = new_data
# print(sales[person])

# 24.02.2024(25.02.2024: выходной)

# # Создание словаря из списка, функция zip (должно быть одинаковое количество элементов) так что первый параметр
# # a - ключ, b - значение
# a = ['Dec', 'Jan', 'Feb']
# # b = [12, 1, 2] можно передавать и кортежи ->
# b = (12, 1, 2)
# # d = dict(zip(a, b))  # {'Dec': 12, 'Jan': 1, 'Feb': 2}
# # d = list(zip(b, a))  # [(12, 'Dec'), (1, 'Jan'), (2, 'Feb')] - список кортежей
# d = tuple(zip(b, a))  # ((12, 'Dec'), (1, 'Jan'), (2, 'Feb')) - кортеж кортежей
# print(d)

# zip в циклах, дано 2 словаря, нужно объединить и распаковать

# one = {'name': "Igor", 'surname': "Doe", 'job': "Consultant"}
# two = {'name': "Irina", 'surname': "Smith", 'job': "Manager"}
#
# for (k1, v1), (k2, v2) in zip(one.items(), two.items()):
#     print(k1, '->', v1)
#     print(k2, '->', v2)

# # Распаковка последовательностей 1. Получим список кортежей
# a = ('Dec', 'Jan', 'Feb')
# b = (12, 1, 2)
# d = list(zip(a, b))
# print(d)  # [('Dec', 12), ('Jan', 1), ('Feb', 2)]
# Дан список кортежей, получим из него 2 списка, распаковка последовательности
# lt = [('Dec', 12), ('Jan', 1), ('Feb', 2)]
# a, b = zip(*lt)
# print(a)
# print(b)

# Даны 2 списка
# a = [1, 2, 3]
# # b = [a, 4, 5, 6]
# # b = [*a, 4, 5, 6]  # [1, 2, 3, 4, 5, 6] # звёздочка избавляет от квадратных скобок
# b = [4, *a, 5, 6]  # [4, 1, 2, 3, 5, 6] # звёздочка избавляет от квадратных скобок
# print(b)  # [[1, 2, 3], 4, 5, 6]
# print(len(b))  # 4
# тоже для кортежа
# a = (1, 2, 3)
# b = [4, *a, 5, 6]  # * избавляет от круглых скобок
# print(b)  # [4, 1, 2, 3, 5, 6]
# print(len(b))  # 6

# Распаковка словаря
# first = {'one': 1, 'two': 2}
# second = {'three': 3, 'four': 4}
# print({**first, **second})  # {'one': 1, 'two': 2, 'three': 3, 'four': 4} ** убирают вложенные фигурные скобки, делают
# # общий словарь. Выведем из общего словаря все ключи и значения.
# for k, v in {**first, **second}.items():
#     print(k, "=>", v)
# # Вывод:
# # one => 1
# # two => 2
# # three => 3
# # four => 4

# 1) Нумерация элементов в итерируемом объекте, проходим циклом for

# colors = ['red', 'green', 'blue']
# i = 1  # здесь меняется первая цифра нумерации
# for color in colors:
#     print(i, ") ", color, sep="")
#     i += 1
#
# # 2) Для создания нумерации в python воспользуемся готовой функцией
#
# print()
# # for num, val in enumerate(colors, start=1):  # первая цифра нумерации
# for num, val in enumerate(colors, 1):  # первая цифра нумерации
#     print(num, ") ", val, sep="")

# Задача. Пользователь вводит данные о количестве студентов, их фамилии, имена и балл для каждого.
# Программа должна определить средний балл и вывести фамилии и имена студентов, чей балл выше среднего.

# Количество студентов: 5
# 1-й студент: Игорь
# Балл: 12
# 2-й студент: Валентин
# Балл: 7
# 3-й студент: Виктор
# Балл: 4
# 4-й студент: Григорий
# Балл: 9
# 5-й студент: Дмитрий
# Балл: 6

# Средний балл: 8. Студенты с баллом выше среднего:
# Игорь
# Григорий

# studs = {}
# n = int(input("Кол-во студентов: "))
# # s = 0 первый способ нахождения суммы
#
# for i in range(n):
#     name = input(str(i + 1) + "-й студент: ")
#     point = int(input("Балл: "))
#     studs[name] = point
#     # s += point первый способ нахождения суммы
#
# s = sum(studs.values())
# avg = s / n
# print(studs)
# print(s)
# print("Средний балл: ", avg)
#
# # for i in studs:  # Имена
# #     if studs[i] > avg:  # балл > среднего арифметического
# #         print(i)  # i = имена
#
# # Способ 2
#
# for k, v in studs.values():
#     if v > avg:
#         print(k)  # TypeError: cannot unpack non-iterable int object

# Дополнительные возможности функций

# def func(*args):  # * - позволяет возвращать кортеж на n-элементов
#     return args
#
#
# print(func(5))  # (5,)
# print(func(5, 6, 7, 8, "abc"))  # (5, 6, 7, 8, 'abc')
# print(func())  # ()

# def summa(*params):
#     print(params)  # (1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9) - кортежи
#     print(*params)  # * - даёт распакованные кортежи 1 2 3 и 1 2 3 4 5 6 7 8 9
#     res = 0
#     for n in params:
#         res += n
#     return res
#
#
# print(summa(1, 2, 3))  # 6
# print(summa(1, 2, 3, 4, 5, 6, 7, 8, 9))  # 45

# Задача

# Написать функцию, которая принимает произвольное число чисел, вычисляет их среднее арифметическое и возвращает
# только те числа, которые меньше полученного среднего арифметического.
# Тестовые примеры:
# 1, 2, 3, 4, 5, 6, 7, 8, 9
# 3, 6, 1, 9, 5

# 5.0
# [1, 2, 3, 4]
# 4.8
# [3, 1]

# def ch(*args):
#     avg = sum(args) / len(args)
#     print(avg)
#     res = []
#     for num in args:
#         if num < avg:
#             res.append(num)
#     return res
#
#
# print(ch(1, 2, 3, 4, 5, 6, 7, 8, 9))
# print(ch(3, 6, 1, 9, 5))


# def func(a, *args):
#     return a, args
#
#
# print(func(5))  # (5, ())
# print(func(1, 2, 3, 4, "abc"))  # (1, (2, 3, 4, 'abc')) 1 -> в a


# Дана функция, печатаем оценки

# def print_scores(student, *scores):
#     print("Student name", student, end=", Оценки: ")
#     for score in scores:
#         print(score, end=" ")
#     print()
#
#
# print_scores("Jonathan", 100, 95, 88, 92, 99, 84)  # оценок может быть любое количество
# print_scores("Rick", 96, 20, 33, 66)

# def func(*args, a): # порядок важен!!!
#     return a, args
#
#
# print(func(5))  # (5, ())
# print(func(1, 2, 3, 4, "abc") # SyntaxError: unexpected EOF while parsing

# def func(**kwargs):
#     return kwargs
#
#
# print(func(a=1, b=2, c=3))  # словарь: {'a': 1, 'b': 2, 'c': 3}
# print(func())  # пустой словарь: {}
# print(func(one="один"))  # {'one': 'один'}

# Пользователь заполняет данные, в форме присутствуют обязательные поля

# def intro(**data):
#     for k, v in data.items():
#         print(k, "is", v)
#     print()
#
#
# intro(name="Irina", surname="Sharma", age=22)
# intro(name="Igor", surname="Wood", email="igor@mail.ru", country="Russia", age=22, phone=9876543210)

# Создадим функцию с двумя принимаемыми аргументами
# def func(a, b, *args):  # принимаемый аргумент со звёздочкой в одной функции может быть только один
#     return a, b, args
#
#
# print(func(5, 1, 2, 3, 4, 5, 6, 7))  # (5, 1, (2, 3, 4, 5, 6, 7))

# def func(a, b, *args, y=0, **kwargs):
#     return a, b, args, kwargs, y
#
#
# # print(func(5, 1, 2, 3, 4, 5, 6, 7, n=9, m=10, x=5))  # (5, 1, (2, 3, 4, 5, 6, 7), {'n': 9, 'm': 10, 'x': 5})
# # (5, 1, (2, 3, 4, 5, 6, 7), {'n': 9, 'm': 10, 'x': 5}, 0) с добавлением y=0
#
# # y можно перезаписать
# print(func(5, 1, 2, 3, 4, 5, 6, 7, n=9, m=10, y=100, x=5))  # нельзя позиционные аргументы ставить
# # в перемешку с именнованными
# # (5, 1, (2, 3, 4, 5, 6, 7), {'n': 9, 'm': 10, 'x': 5}, 100)

# Создайте функцию, которая принимает неограниченное количество параметров "ключ: значение"
# и обновляет созданный словарь my_dict, состоящий всего из одного элемента "one" со значением "first".
# Словарь должен обновляться при каждом вызове функции:
# db(k1=22, k2=31, k3=11, k4=91)
# db(name='Bob', age=31, weight=61, eyes_color='grey')


# Вывод: my_dict = {'one': 'first', 'k1': 22, 'k2': 31, 'k3': 11, 'k4': 91, 'name': 'Bob', 'age': 31, 'weight': 61,
# 'eyes_color': 'grey'}

# my_dict = {'one': 'first'}
#
#
# def db(**kwargs):
#     my_dict.update(kwargs)
#
#
# print("my_dict =", my_dict)  # my_dict = {'one': 'first'}
# db(k1=22, k2=31, k3=11, k4=91)
# print("my_dict =", my_dict)  # my_dict = {'one': 'first', 'k1': 22, 'k2': 31, 'k3': 11, 'k4': 91}
# db(name='Bob', age=31, weight=61, eyes_color='grey')
# print("my_dict =", my_dict)  # my_dict = {'one': 'first', 'k1': 22, 'k2': 31, 'k3': 11,
# # 'k4': 91, 'name': 'Bob', 'age': 31, 'weight': 61, 'eyes_color': 'grey'} Вывод: можем влиять на переменную
# # из глобальной области видимости при работе с изменяемым типом данных

# Области видимости в Python (их 4), смотрим локальную и глобальную

# name = "Tom"  # глобальная переменная

# def hi():
#     surname = "Johnson"  # локальная переменная, существует только в пределах функции
#     print("Hello", name, surname)
# Объявим имя второй раз внутри функции


# def hi():
#     global name  # Hello Sam Johnson -> Good bye Sam -> Sam
#     name = "Sam"
#     surname = "Johnson"
#     print("Hello", name, surname)
#
#
# def bye():
#     print("Good bye", name)
#
#
# hi()  # Hello Tom
# bye()  # Good bye Tom
# print(name)  # Tom
# # print(surname)  # NameError: name 'surname' is not defined - объявлена внутри переменной, не видит
# # Самый большой приоритет у локальной переменной(!!!)

# встроенная область видимости на уровне языка Python

# sum = 5
#
# lst = [9, 8, 7, 6, 5]
# print(sum(lst))  # TypeError: 'int' object is not callable - объект не вызываемый!

# print = "Hello"
#
#
# print("Python") # TypeError: 'str' object is not callable. Нельзя print определять как переменную

# Занятие 12. 02.03.2024

# Пример области видимости Enclosed(E) = enclosing

# def add(a):
#     x = 2
#
#     def outer():  # функция не задействована
#         print("x =", x)
#         return a + x
#
#
# print(add(5))  # None
# # outer()  # name 'outer' is not defined если закомментировать  outer()
# print(x)  # name 'x' is not defined то х не объявлена, х находиться в локальной относительно вызова области видимости

# Перепишем код, чтобы функция outer() была видна

# def add(a):
#     x = 2
#
#     def outer():
#         print("x =", x)  # x = 2
#         return a + x
#
#     return outer()
#
#
# print(add(5))  # 7

# Можно перезаписать переменную x

# def add(a):
#     x = 2
#
#     def outer():
#         # x = 3
#         print("x =", x)  # x = 3
#         return a + x
#
#     return outer()
#
#
# print(add(5))  # 8

# Создадим в глобальной области видимости переменную x

# x = 25
# t = 0
#
#
# def fn():
#     global t
#     a = 30
#
#     def inner():
#         nonlocal a
#         a = 35
#         print('a =', a)  # a = 35
#
#     inner()
#     t = a
#
#
# fn()
# c = x + t  # без nonlocal 25 + 30 = 55; с nonlocal a: 25 + 35 = 60
# print(c)

# Рассмотрим ещё один пример на области видимости
# x = 5  # global
#
#
# def fn1():
#     x = 25  # отработал, 2
#
#     def fn2():  # здесь эта функция вызывается, 3.1
#         x = 33  # отрабатывает создание переменной x со значением 33, 4; с nonlocal x: 33 -> 55
#
#         def fn3():
#             nonlocal x  # Выводит переменную на уровень выше и она перестаёт быть локальной, не действует
#             на глобальную
#             x = 55  # создаётся переменная x, 6 и перестаёт существовать после того как функция вызвалась
#
#         fn3()  # снова отрабатывает вызов функции, 5; 6.1 вызывается
#         print("fn2.x", x)  # 7, x берётся 33, так как x = 55 создана в локальной области видимости и за её пределами
#         # не существует
#
#     fn2()  # сначала отрабатывает вызов функции, 3
#     print("fn1.x", x)  # 8, отрабатывает последней, выводит x их fn 1 = 25
#
#
# fn1()  # отработала, 1
# print(x)  # вывод global

# Необходимость nonlocal

# def outer(a1, b1, a2, b2):
#     a = 0
#     b = 0
#
#     def inner():
#         a = a1 + a2
#         b = b1 + b2
#         print(a, b)  # 1 7
#
#     inner()
#     return [a, b]
#
#
# print(outer(2, 3, -1, 4))  # [1, 7], по факту [0, 0], не учёл локальную область видимости, не видит

# Увидит с nonlocal
# def outer(a1, b1, a2, b2):
#     a = 0  # 1
#     b = 0  # 7
#
#     def inner():
#         nonlocal a, b
#         a = a1 + a2
#         b = b1 + b2
#         print(a, b)  # 1 7
#
#     inner()
#     return [a, b]
#
#
# print(outer(2, 3, -1, 4))  # Вывел [1, 7]

# Замыкание(основано на работе нескольких функций) - функция возвращает другую функцию, но не вызывает её

# def outer(n):
#     def inner(x):
#         return n + x
#
#     return inner  # Если из функции возвращаем другую функцию, то возвращаемую функцию можно сохранить в любую
#     # переменную, затем эту переменную вызвать как функцию и передать параметры
#
#
# item1 = outer(5)  # обращаемся к inner через имя item1
# # print(item1)  # <function outer.<locals>.inner at 0x00000208EA08ECA0>
# print(item1(10))  # 15
#
# item2 = outer(6)
# print(item2(10))  # 16
#
#
# # print(outer(7)(10))  # 17, такое обращение используется при работе с "лямбда" функциями
#
#
# # Вспомним и покажем обычную функцию
#
#
# def func(a):
#     return a * 2
#
#
# x = func(5)
# print(x)  # 10

# def func1():
#     a = 1
#     b = 'line'
#     c = [1, 2, 3]
#
#     def func2():
#         nonlocal a, b  # не перезаписывается без nonlocal, т. к. неизменяемый тип данных
#         c.append(4)  # изменилась без проблем, , т. к. изменяемый тип данных
#         a += 1
#         b = b + "_new"  # (2, 'line_new', [1, 2, 3, 4])
#         return a, b, c
#
#     return func2
#
#
# func = func1()
# print(func())  # (1, 'line', [1, 2, 3]); c c.append(4): (1, 'line', [1, 2, 3, 4]);
# c nonlocal (2, 'line', [1, 2, 3, 4])


# Задача. Напишите функцию, ведущую подсчёт количества посещений указанного города.
# Функция должна принимать в качестве аргумента название города и возвращать некоторую внутреннюю функцию,
# которая каждый раз при её вызове будет увеличивать счётчик посещений на 1.
# При решении задачи используйте нелокальную область видимости.

# Москва 1
# Москва 2
# Сочи 1
# Сочи 2
# Москва 3


# def func(city):
#     count = 0
#
#     def inner():
#         nonlocal count
#         count += 1
#         print(city, count)
#
#     return inner
#
#
# res1 = func("Москва")
# res1()
# res1()
#
# res2 = func("Сочи")
# res2()
# res2()
# res1()

# Функции могут создаваться через ключевое слово lambda, lambda - функции (выражения). У этих функций нет имени

# print((lambda x, y: x + y)(1, 2))  # 3
# # Чтобы снова обратится с лямбда-выражению, приходится дублировать тело функции(!)
# # print((lambda x, y: x + y)(10, 20))  # 30
#
#
# # func = lambda x, y: x + y  # некорректный синтаксис записи
# # print(func(1, 2))  # 3
#
# def func(x, y):
#     return x + y
#
#
# print(func(1, 2))  # 3, работает корректно

# Работа с лямбда-выражениями

# print((lambda a, b, c: a + b + c)(10, 20, 30))  # 60
# print((lambda a, b, c=3: a + b + c)(10, 20))  # 33
# print((lambda a, b=2, c=3: a + b + c)(10))  # 15
# print((lambda a=1, b=2, c=3: a + b + c)())  # 6
#
# print((lambda *args: args)(1, 2, 3, 4, 5, 6, 7, 8))  # (1, 2, 3, 4, 5, 6, 7, 8)
# print((lambda *args: args)(1, 2, 3))  # (1, 2, 3)

# def в кортеж не поместишь из-за требований к синтаксису записи(!!!)=отступы вокруг+запись в одну строку
# c = (
#     lambda x: x * 2,  # abc_abc_
#     lambda x: x * 3,  # abc_abc_abc_
#     lambda x: x * 4,  # abc_abc_abc_abc_
# )
# for t in c:
#     print(t("abc_"))

# Замыкания с лямбда-выражениями

# def inc1(n):
#     def inner(x):
#         return n + x
#
#     return inner
#
#
# func = inc1(10)
# print(func(5))  # 15
#
#
# # Сократим синтаксис записи до двух строк, используя lambda-выражение
# def inc2(n):
#     return lambda x: n + x
#
#
# func2 = inc2(10)
# print(func2(5))  # 15
# # Сократим ещё
#
# inc3 = (lambda n: (lambda x: n + x))
#
# func3 = inc3(10)
# print(func3(5))  # 15
#
# # Сократим ещё. Итог 9 строк стали одной
# print((lambda n: (lambda x: n + x))(10)(5))  # 15
#
# # Задача. Создать лямбда выражение для вычисления суммы трёх чисел, с использованием вложенных лямбда-выражений
#
# # sum3(2)(4)(6) = 12.
# print((lambda c: (lambda a: (lambda b: c + a + b)))(2)(4)(6))

# lambda-выражения более применимы для словарей, например -> отсортируем элементы по значению

# d = {'a': 15, 'c': 10, 'b': 5}
# # lst = sorted(d.items())  # [('a', 15), ('b', 5), ('c', 10)]
# # lst = list(d.items())  # [('a', 15), ('c', 10), ('b', 5)]
# # lst.sort()  # [('a', 15), ('b', 5), ('c', 10)] - это всё сортировки по ключам
# # lst.sort(reverse=True)  # [('c', 10), ('b', 5), ('a', 15)]
# # lst.sort(key=lambda i: i[1])  # [('c', 10), ('b', 5), ('a', 15)]
# # Если использовать sorted
# lst = sorted(d.items(), key=lambda i: i[1])  # [('b', 5), ('c', 10), ('a', 15)]
# print(lst)
# print(dict(lst))  # {'b': 5, 'c': 10, 'a': 15}

# Отсортируем с обычной функцией через def

# def func(i):
#     return i[1]
#
#
# d = {'a': 15, 'c': 10, 'b': 5}
# lst = list(d.items())
# lst.sort(key=func)
# print(lst)  # [('b', 5), ('c', 10), ('a', 15)]
# print(dict(lst))  # {'b': 5, 'c': 10, 'a': 15}

# Дан список игроков команды, причём для каждого игрока указаны его имя, фамилия и игровой рейтинг (по шкале от 1 до 10,
# где 10 - наивысший бал). Отсортируйте список игроков по фамилии, а затем по их рейтингу от лучшего к худшему
# и наоборот. Решите задачу с использованием lambda - функций.

# players = [
#     {'name': "Антон", "last_name": "Бирюков", "rating": 9},
#     {'name': "Алексей", "last_name": "Бодня", "rating": 10},
#     {'name': "Фёдор", "last_name": "Сидоров", "rating": 4},
#     {'name': "Михаил", "last_name": "Семёнов", "rating": 6},
# ]
#
# res = sorted(players, key=lambda item: item["last_name"])
# print(res)
#
# res1 = sorted(players, key=lambda item: item["rating"], reverse=True)
# print(res1)
#
# res2 = sorted(players, key=lambda item: item["rating"])
# print(res2)


# Создадим список lambda-выражений

# a = [lambda x, y: x + y, lambda x, y: x - y, lambda x, y: x * y, lambda x, y: x / y]
# print(a[1](8, 3))  # 8 - 3 = 5
# print(a[2](8, 3))  # 8 * 3 = 24
# print(a[3](8, 3))  # 8 / 3 = 2.6666666666666665
# print(a[0](8, 3))  # 8 + 3 = 11

# Создадим список, ключ - число, возвращаем дни недели, выведем сегодняшний день недели без print

# d = {
#     1: lambda: print("Понедельник"),
#     2: lambda: print("Вторник"),
#     3: lambda: print("Среда"),
#     4: lambda: print("Четверг"),
#     5: lambda: print("Пятница"),
#     6: lambda: print("Суббота"),
#     7: lambda: print("Воскресенье"),
# }
#
# d[6]()  # Суббота, lambda-выражение вызывается, а круглые пустые скобки - это вызов!!!

# Создать лямбда-выражение для нахождения площадей фигур

# Площадь окружности радиуса 2: 12ю566370614359172
# Площадь прямоугольника размером 10*13: 130
# Площадь трапеции для a = 7, b = 5, h = 3: 18.0
# ОГРАНИЧЕНИЕ: В ЛЯМБДА-ВЫРАЖЕНИИ МОЖЕТ БЫТЬ ТОЛЬКО ОДНА СТРОКА
# from math import pi
#
# area = {
#     "Circle": lambda radius: pi * radius * radius,
#     "Rectangle": lambda a, b: a * b,
#     "Trapezoid": lambda a, b, h: (a + b) * h / 2
# }
#
# print("Площадь окружности:", area["Circle"](2))
# print("Площадь прямоугольника:", area["Rectangle"](10, 13))
# print("Площадь трапеции:", area["Trapezoid"](7, 5, 3))

# else в lambda-выражениях, с помощью тернарных выражений в одну строку. Найдём максимальное из двух чисел

# print((lambda a, b: a if a > b else b)(5, 10))
# print((lambda a, b: a if a > b else b)(15, 10))

# print("Вносим изменения")

# print("Данные переносим на GitHub")

# Занятие 14. 16.03.2024

# Готовые функции, работают как циклы
# map(func, iterable), filter(func, iterable)

# # def mult(t):
# #     return t * 2
#
#
# lst = [2, 8, 12, -5, -10]
#
# # lst2 = list(map(mult, lst)) # [4, 16, 24, -10, -20]
# # lst2 = tuple(map(mult, lst))  # (4, 16, 24, -10, -20)
# lst2 = tuple(map(lambda t: t * 2, lst))  # (4, 16, 24, -10, -20)
# print(lst2)

# Ещё проще
# print(list(map(lambda t: t * 2, [2, 8, 12, -5, -10])))

# t = (2.88, -1.75, 100.55)
# t2 = tuple(map(int, t))
# print(t2)  # (2, -1, 100)


# st = ['a', 'b', 'c', 'd', 'e']
# num = [1, 2, 3, 4, 5]
#
# # res = dict(map(lambda x, y: (x, y), st, num))  # {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
# # res = list(map(lambda x, y: (x, y), st, num))  # [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], нужны круглые
# # скобки (x, y) если несколько
# res = dict(map(lambda x, y: (x, y), st, num))  # {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5} словарь
# print(res)

# Задача. Найти поэлементно сумму чисел двух списков

# l1 = [1, 2, 3]
# l2 = [4, 5, 6]
#
# res = list(map(lambda x, y: x + y, l1, l2))
# print(res)  # [5, 7, 9]

# Работа filter. Выбирает из исходного объекта элементы по определённому условию

# t = ('abcd', 'abc', 'asdfq', 'def', 'ert')

# t2 = tuple(filter(lambda s: len(s) == 3, t))
# print(t2)  # ('abc', 'def', 'ert') отфильтровал по длине  кортежа 3


# # Сделаем с функцией
# def func(s):
#     return len(s) == 3
#
#
# t = ('abcd', 'abc', 'asdfq', 'def', 'ert')
#
# t2 = tuple(filter(lambda s: len(s) == 3, t))
# print(t2)  # ('abc', 'def', 'ert')


# Пример с filter

# b = [60, 90, 68, 59, 76, 60, 88, 74, 81, 65]
# res = list(filter(lambda s: s > 75, b))
# print(res)  # [90, 76, 88, 81]


# Сгенерировать список из 10 элементов случайным образом. Из полученного списка выбрать те, что в диапазоне от 10 до 20
# включительно

# from random import randint
#
# lst = [randint(1, 40) for i in range(10)]
# print(lst)
#
# lst2 = list(filter(lambda t: 10 <= t <= 20, lst))
# print(lst2)

# Выведем квадраты нечётных от 1 до 10

# m = list(map(lambda x: x ** 2, filter(lambda x: x % 2, range(10))))
# print(m)  # [1, 9, 25, 49, 81] вывел все нечёт в квадрате
#
# # Упростим
#
# m1 = [x ** 2 for x in range(10) if x % 2]
# print(m1)  # [1, 9, 25, 49, 81] вывел все нечёт в квадрате


# Декораторы - функция, принимающая другую функцию, может добавить ей функционал

# def hello():
#     return "Hello, I am func 'hello'"
#
#
# def super_func(func):  # принимаемый аргумент функции может называться как угодно
#     print("Hello, I am func 'super_func'")
#     print(func())  # Hello, I am func 'hello'
#
#
# super_func(hello)

# Рассмотрим другие возможности функций-декораторов - сохранение функций в переменную без вызова
# def hello():
#     return "Hello, I am func 'hello'"
#
#
# test = hello
# # print(test)  # <function hello at 0x0000018E3486F1F0> - в переменной test лежит функция hello, расположенная
# # по адресу, они ссылаются на одну и ту же ячейку памяти, где хранится функция -> переменную test можно
# # вызвать как функцию, то есть под другим именем обратились к функции:
# print(test())  # Hello, I am func 'hello'

# ДЕКОРАТОРЫ
# Принцип работы декоратора. Создадим функцию с вложенной функцией внутри.
# def my_decorator(func):
#     def inner():
#         print("Code before")
#         func()
#         print("Code after")
#
#     return inner
#
#
# def func_test():
#     print("Hello, I am func 'func_test'")
#
#
# test = my_decorator(func_test)  # не можем напрямую получить доступ к inner -> сохраняем под именем test
# test()

# Вариант 2
# def my_decorator(func):
#     def inner():
#         print("Code before")
#         func()
#         print("Code after")
#
#     return inner
#
#
# @my_decorator  # декорирование функции, без него отработает в чистом виде: Hello, I am func 'func_test' - только
# def func_test():
#     print("Hello, I am func 'func_test'")
#
#
# func_test()
# # Вывод такой же:
# # Code before
# # Hello, I am func 'func_test'
# # Code after

# Декоратор позволяет сделать внешнее оформление к содержимому:
# def my_decorator(func):  # декорирующая функция - чем декорируем
#     def inner():
#         print("*" * 40)
#         func()
#         print("=" * 40)
#
#     return inner
#
#
# @my_decorator  # декоратор
# def func_test():  # декорируемая функция - что декорируем
#     print("Hello, I am func 'func_test'")  # декоратор
#
#
# @my_decorator
# def hello():
#     print("Hello, I am func 'hello'")
#
#
# func_test()
# hello()
# ****************************************
# Hello, I am func 'func_test'
# ========================================
# ****************************************
# Hello, I am func 'hello'
# ========================================

# Пример. Можно применять любое кол-во декораторов

# def bold(fn):
#     def wrap():
#         return "<b>" + fn() + "</b>"
#
#     return wrap
#
#
# def italic(fn):
#     def wrap():
#         return "<i>" + fn() + "</i>"
#
#     return wrap
#
#
# @italic
# @bold
# def hello():
#     return "text"
#
#
# print(hello())

# Задача. Создайте декоратор, который будет выводить количество вызовов декорирующей функции и её содержимое.
# Вывод:

# Hello
# Вызов функции: 1
# Hello
# Вызов функции: 2
# Hello
# Вызов функции: 3


# Декоратор, добавляющий дополнительный функционал, например счётчик
# def cnt(fn):
#     count = 0
#
#     def wrap():
#         nonlocal count
#         count += 1
#         fn()
#         print("Вызов функции:", count)
#
#     return wrap
#
#
# @cnt
# def hello():
#     print("Hello")
#
#
# hello()
# hello()
# hello()

# def args_decorator(fn):
#     def wrap(arg1, arg2):
#         print("Данные:", arg1, arg2)
#         fn(arg1, arg2)
#
#     return wrap
#
#
# @args_decorator
# def print_full_name(name, surname):
#     print("Меня зовут", name, surname)
#
#
# print_full_name("Ирина", "Ветрова")

# Функция может принимать любое количество аргументов

# def args_decorator(fn):
#     def wrap(*args, **kwargs):
#         print("args:", args)
#         print("kwargs:", kwargs)
#         fn(*args, **kwargs)
#
#     return wrap
#
#
# @args_decorator
# def print_full_name(a, b, c, study="Python"):
#     print(a, b, c, "изучают", study, "\n")
#
#
# print_full_name("Ирина", "Борис", "Светлана", study="JavaScript")
# print_full_name("Владимир", "Екатерина", "Виктор")

# Универсальный декоратор

# def decor(args1, args2):
#     def args_dec(fn):
#         def wrap(x, y):
#             print(args1, x, args2, y, "=", end=" ")
#             fn(x, y)
#
#         return wrap
#     return args_dec
#
#
# @decor("Сумма:", "+")
# def summa(a, b):
#     print(a + b)
#
#
# @decor("Разность:", "-")
# def sub(a, b):
#     print(a - b)
#
#
# @decor("Произведение:", "*")
# def mul(a, b):
#     print(a * b)
#
#
# n = 5
# m = 2
# summa(n, m)
# sub(n, m)
# mul(n, m)

# Создать декоратор, который будет принимать в виде аргумента число, которое будет умножаться на число
# принимаемое функцией
# Тест:
# @multiply(3)
# def return_num(num):
#     return num
# print(return_num(5))

# Результат: 15

# def multiply(arg):
#     def decor(fn):
#         def wrap(a):
#             return arg * fn(a)
#
#         return wrap
#     return decor
#
#
# @multiply(3)
# def return_num(num):
#     return num
#
#
# print(return_num(5))
# print("Данные переносим на gitHub")

# 17.03.2024

# Строки, префиксы

# print(0b10010)  # 18
# print(0o10)
# print(bin(18))  # 0b10010 => 0b(префикс, указывающий на двоичную систему) - двоичная система
# print(oct(18))  # 0o22 => 0o - восьмеричная
# print(hex(18))  # 0x12 => 0x - шестнадцатеричная
#
# print(0b10010 + 0o22)
# print(0o22)
# print(0x12 + 0o22)

# q = 'Pyt'
# w = 'hon'
# e = q + w
# print(e)  # Python => Python
# # print(e * 3)
# # print(e * -3) - нет результата
# # print("y" in e)
# # print("l" in e)
# # print(e[1])
# # print(e[-1])
# # print(e[1:4])
# # print(e[::-1])
# e = e[:3] + 't' + e[4:]
# print(e)

# Префиксы строк
# print(u"Привет")  # использовалось раньше для указания кодировки Unicode
# print("Привет")

# print("C:\\folder\\file.txt")  # C:\folder\file.txt
# print(r"C:\folder\file.txt")  # C:\folder\file.txt row - строка, сырая строка - позволяет не делать экранирование,
# # игнорирует, что "\" является спецсимволом
# print(r"C:\folder\\"[:-1])  # C:\folder\ - избегаем лишний "\"
# print(r"C:\folder" + "\\")  # C:\folder\
# print("C:\\folder\\")  # C:\folder

# Префикс f - новый

# name = "Дмитрий"
# age = 25
# print("Меня зовут " + name + ". Мне " + str(age) + " лет.")  # Меня зовут Дмитрий. Мне 25 лет.
# # print(f"Меня зовут {name}. Мне {age} лет.")  # Меня зовут Дмитрий. Мне 25 лет.
# # 2 способ
# a = f"Меня зовут {name}. Мне {age} лет."
# print(a)  # Меня зовут Дмитрий. Мне 25 лет.

# print(f"Число {round(12.2564, 2)}, {5 + 3}")
# print(f"Число: {12.2564:.2f}")  # Число: 12.26

# x = 10
# y = 5
# print(f"{x=}, {y = }")
# # print(x=, y=) # SyntaxError: invalid syntax
# print(f"{x} X {y} / 2 = {x * y / 2}")  # 10 X 5 / 2 = 25.0

# dir_name = "folder"
# file_name = "file.txt"
# print(fr"home\{dir_name}\{file_name}")  # home\folder\file.txt и переменные и бэк слэши
# print("home" + "\\" + dir_name + "\\" + file_name)  # home\folder\file.txt

# """Строка
# символов"""  # не выводится и не комментарий
#
# s = """Строка
# символов"""
# print(s)
# s1 = '''Строка
# символов'''
# print(s1)
# s2 = "Строка " \
#      "символов"
# print(s2)

# Комментарии для функций или документирование - всегда первая строка

# def square(n):
#     """Принимает число n, возвращает квадрат числа n"""
#     return n ** 2
#
#
# print(square(5))

# Пример большой документации

# from math import pi
#
#
# def cylinder(r, h):
#     """
#      Вычисляет площадь цилиндра.
#
#      Вычисляет площадь цилиндра на основании заданной высоты и радиуса основания
#
#      :param r: положительное число, радиус основания цилиндра
#      :param h: положительное число, высота цилиндра
#      :return: положительное число, площадь цилиндра
#      """
#     return 2 * pi * r * (r + h)
#
#
# print(cylinder(2, 4))
# print(cylinder.__doc__) # смотрим документацию
# print(sum.__doc__)
# print(len.__doc__)
# print(int.__doc__)
# print(type.__doc__)

# print(ord('a'))  # показывает код заданного символа = 97
# print(ord('й'))  # показывает код заданного символа = 1081

# Позволяет посмотреть кодировку любого символа в UNICODE
# while True:
#     n = input("-> ")
#     if n != "-1":
#         print(ord(n))
#     else:
#         break

# Задача. Дана строка: 'Test string for me', сформируйте список, содержащий ASCII коды символов этой строки. Вычислите
# среднее арифметическое (с точностью до целого) полученных кодов и допишите его в начало списка. Спросите
# у пользователей ещё три символа (если пользователь ввёл больше символов, используйте только первые 3). Получите их
# ASCII коды. Проверьте наличие каждого из этих кодов в списке, и если его нет - допишите в конец списка. Определите,
# есть ли в списке элементы, равные последнему, и если да, то определите сколько их. Отсортируйте список ао убыванию.

# st = "Test string for me"
# arr = [ord(x) for x in st]
# print("ASCII коды:", arr)
# arr = [sum(arr) // len(arr)] + arr
# # arr = int(sum(arr) / len(arr)) - другой способ избавиться от дробной части
# print("Среднее арифметическое", arr)
# arr += [ord(x) for x in input("-> ")[:3] if ord(x) not in arr]  # срезом отбрасываем лишние символы, от начала до 3-го
# print(arr)
# print(arr.count(arr[-1]) - 1)
# arr.sort(reverse=True)
# print(arr)


# 23.03.2024

# Получим символ по его коду
# print(chr(97))  # a
# print(chr(35))  # #
# print(chr(8364))  # €

# Задача. Даны два числа: a = 122, b = 97, где a и b - коды символов. Ваша задача - вывести все символы, ASCII-коды
# которых лежат между a и b включительно, в порядке возрастания их кодов.

# Вывод: a b c d e f g h i g k l m n o p q r s t u v w x y z

# a = 122
# b = 97
# for i in range(b, a + 1):
#     print(chr(i), end=" ")

# Пусть в переменные приходят значения из другого диапазона:

# a = 97
# b = 122
# if a > b:
#     for i in range(b, a + 1):
#         print(chr(i), end=" ")
# else:
#     """Дублирование кода"""
#     for i in range(a, b + 1):
#         print(chr(i), end=" ")
# Сделаем с одним for
# a = 97
# b = 122
# if b > a:
#     a, b = b, a  # если b > a, поменяем переменные местами, a = 122, b = 97
#
# for i in range(b, a + 1):
#     print(chr(i), end=" ")

# # Сравнение строк
# print("apple" == "Apple")  # False
# print("apple" > "Apple")  # 97 > 65 => True -> т. к. сравниваются коды первых(!) символов, если равны,
# # то следующих за первым и т. д.

# Задача. Есть функция random_password, генерирует случайный пароль

# from random import randint
#
# min_ascii = 33
# max_ascii = 126
#
#
# def random_password():
#     res = ""
#     for i in range(6):  # 6 символов, можно и больше
#         res += chr(randint(min_ascii, max_ascii))
#     return res
#
#
# print("Ваш случайный пароль:", random_password())

# Пусть длина пароля изменяется случайным образом:

# from random import randint
#
# min_ascii = 33
# max_ascii = 126
# shortest = 6
# longest = 16
#
#
# def random_password():
#     res = ""
#     # for i in range(shortest, longest):  # range (6, 16) 16 - 6 = 10, не вкл. посл. 10 - 1 = 9 итераций -> max
#     for i in range(randint(shortest, longest)):  # range (0, 6) = 16 итераций от (min)6 до 16 не вкл
#         res += chr(randint(min_ascii, max_ascii))
#     return res
#
#
# print("Ваш случайный пароль:", random_password())

# Методы строк

# s = "hello, WORLD! I am learning Python."
# print(s)
# a = s.capitalize()
# print(a)  # Hello, world! i am learning python. - переводит все буквы, кроме первой, в нижний регистр
# print(s.lower())  # hello, world! i am learning python. - все в нижний
# print(s.upper())  # HELLO, WORLD! I AM LEARNING PYTHON. - всё в верхний

# Методы списков
# s = "hello, WORLD! I am learning Python."
# print(s)
# print(s.count('h'))  # 2 - две буквы h
# print(s.count('l'))  # 3 - три буквы l - не посчитал верхний регистр
# print(s.lower().count('l'))  # 4 - посчитал все l(так как преобразовал L -> l)
# print(s.count('h', 1))  # 1 - начиная с первого индекса - буква "e"
# print(s.count('h', 1, -4))  # 0 - начиная с первого индекса и заканчивая -4: h - не попала
# Методы возвращающие позицию подстроки у строки s

# print(s.find("Python"))  # 28 - позиция буквы P, если не сущ. вернёт фикс. значение -1. Поиск подстроки в строке,
# # возвращает индекс совпадения, если совпадения нет, вернёт строго зарезервированное значение -1
#
# print(s.index("Python1"))  # 28 - тоже, что и find, но если совпадения нет, вернёт исключение
# # ValueError: substring not found

# print(s.find("h", 1, -4))  # -1 на таком диапазоне h нет -> индекс не выводит
# print(s.rfind("h"))  # 31 делает поиск справа-налево, с конца строки
# print(s.rindex("h"))  # 31 делает поиск справа-налево, с конца строки, работает как rfind, но возвращает исключение

# Задача. Дана строка, состоящая ровно из двух слов, разделённых пробелом. Переставьте эти слова местами.
# Результат запишите в строку и выведите получившуюся строку.

# Введите два слова через пробел: один два
# два один

# st = input("Введите два слова через пробел: ")  # "один два"
# # first = st.find(" ")
# # print(first)  # 4 - в данной задаче пробельный символ на четвёртой позиции
# # Возьмём срезом слово "один"
# first = st[:st.find(" ")]
# second = st[st.find(" ") + 1:]
# print(first)  # один - получили первое слово
# print(second)  # два - получили второе слово
# print(second + " " + first)  # два один, будет работать и с другими введёнными словами, так как мы привязываемся
# # методом find к поиску конкретного символа, а это символ - пробел

# # Методы, показывающие чем строка заканчивается и начинается
# s = "hello, WORLD! I am learning Python."
# print(s)
#
# print(s.endswith("on."))  # True - заканчивается ли строка на заданную подстроку? -> булево значение
# print(s.startswith("hello"))  # True - начинается ли с заданной подстроки
# print(s.find("I am"))  # на 14 позиции
# print(s.startswith("I am", 14))  # True
#
# # Применение. Загружаем документ с расширением *.csv? Того ли типа документ загружаем?

# Методы, позволяющие посмотреть, где что находиться. Например, пользователь ввёл число строкой - два = ValueError

# a = int(input("Введите число: "))
# try:
#     a = int(a)
#     print(a ** 2)
# except ValueError:
#     print("Нужно ввести число")

# Проверим находиться ли в строке числовое значение

# print('123'.isdigit())  # True состоит ли строка только из чисел?
# print('12a3'.isdigit())  # False
#
# a = input("Введите число: ")
# b = 2
# if a.isdigit():
#     a = int(a)
#     print(a + 2)
# else:
#     print(a + str(b))

# Проверка строки, состоит ли из букв и цифр одновременно:

# print("abc123".isalnum())  # True
# print("abc123!".isalnum())  # False
# print("ABCabc".isalpha())  # True
# print("ABCabc1*".isalpha())  # False

# print("abc".islower())  # True определяет в нижнем ли регистре буквы
# print("abC".islower())  # False
# print("ab123@".islower())  # True
# print("ab123@".isupper())  # False - не в верхнем регистре
# print("CD123@".isupper())  # True - в верхнем регистре

# # Метод для графического отображения - он один - центрирование
# print('py'.center(10))
# print('py'.center(10, "-"))  # с символом заполнителем
# print('py'.center(2))  # от начала строки


# print("       py       ".lstrip())  # убирает пробелы слева
# print("       py       ".rstrip())  # убирает пробелы слева
# print("       py       ".strip())  # убирает пробелы с обеих сторон
# print("       p       y       ".lstrip())  # убирает пробелы слева: p       y       - удаление останавливается при
# # встрече с несуществующим символом
#
# print("https://www.python.org".lstrip("/:pths"))  # www.python.org, натыкается на "w" и прекращает удаление
# print("https://www.python.org".strip("/:pths"))  # www.python.org, отработает как и выше
# print("https://www.python.orgw".strip("/:pthsw"))  # .python.org
# print("https://www.python.orgw".lstrip("/:pthsw"))  # .python.orgw
# print("https://www.python.orgw".lstrip("/:pths").rstrip("w"))  # www.python.org

# Поиск и замена в строке

# s = "hello, Python! I am learning Python. Python"
# print(s)
# print(s.replace("Python", "Java"))  # hello, Java! I am learning Java. Java
# print(s.replace("Python", "Java", 2))  # hello, Java! I am learning Java. Python

# Преобразование итерируемой последовательности в строку-разделитель
# s = "-"
# seq = ("a", "b", "c")
# print(s.join(seq))  # a-b-c
#
# # print("..".join([1, 2]))  # TypeError: sequence item 0: expected str instance, int found
# print("..".join(['1', '2']))  # 1..2 объединяет итерируемый объект в строку через символ разделитель
#
# print(":".join("Hello"))  # H:e:l:l:o

# Преобразование строки в итерируемый объект (обратное)

# print("a b c".split())  # ['a', 'b', 'c']
# print("www.python.org".split())  # www.python.org
# print("www.python.org".split("."))  # ['www', 'python', 'org'] - разделили по точке
# print("www.python.org".split(".", 1))  # ['www', 'python.org']
# print("www.python.org".rsplit(".", 1))  # ['www.python', 'org']


# Регулярные выражения - когда из строки можем найти по какому-либо шаблону есть ли совпадения или нет, ШАБЛОНЫ
# РЕГУЛЯРНЫХ ВЫРАЖЕНИЙ НЕ ПРИВЯЗЫВАЮТСЯ К ЯЗЫКУ ПРОГРАММИРОВАНИЯ, методы и синтаксис у каждого ЯП свои

# s = "Я ищу совпадения в 2024 году. И я их найду в 2 счёта."
# reg = "я"  # шаблон
# reg1 = "я1"  # шаблон
# reg2 = "совпадения"  # шаблон
# reg3 = "Я ищу"  # шаблон
# reg4 = "я"  # шаблон
# reg5 = "[яу]"  # шаблон
# reg6 = r"\."  # шаблон обязательно экранируем, иначе заменим все символы на "!", r - row - строка, игнорировать
# # экранирование
# reg7 = "."  # шаблон обязательно экранируем, иначе заменим все символы на "!"
# print(re.findall(reg, s))  # ['я', 'я'] - то, что нашёл, возвращает список, содержащий все совпадения с шаблоном
# print(re.findall(reg1, s))  # [] - ошибки нет, пустой список - совпадений нет
# # Метод search
# print(re.search(reg, s))  # <re.Match object; span=(15, 16), match='я'> - возвращает первое совпадение с шаблоном
# print(re.search(reg2, s))  # <re.Match object; span=(6, 16), match='совпадения'>
# # Данные методы выбрасывают исключения
# print(re.search(reg2, s).span())  # (6, 16) - вернёт диапазон начала и конца совпадений
# print(re.search(reg2, s).start())  # 6 - вернёт индекс, на котором появилось совпадение
# print(re.search(reg2, s).end())  # 16 - до какого индекса идёт совпадение
# print(re.search(reg2, s).group())  # совпадения
# print(re.match(reg, s))  # None - возвращает совпадения, если строка начинается с шаблона, т. е.
# print(re.match(reg3, s))  # <re.Match object; span=(0, 5), match='Я ищу'> - поиск по шаблону только в начале строки
# print(re.split(reg4, s))  # ['Я ищу совпадени', ' в 2024 году. И ', ' их найду в 2 счёта.']
# print(re.split(reg5, s))  # ['Я ищ', ' совпадени', ' в 2024 год', '. И ', ' их найд', ' в 2 счёта.'] - символы
# # разделители и буква "у" и буква "я"; split -> возвращает список, в котором строка разбита по шаблону.
# # Разобьём три раза и получим четыре элемента
# print(re.split(reg5, s, 3))  # ['Я ищ', ' совпадени', ' в 2024 год', '. И я их найду в 2 счёта.']
# print(re.sub(reg6, "!", s))  # Я ищу совпадения в 2024 году! И я их найду в 2 счёта!
# print(re.sub(reg7, "!", s))  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# # sub - поиск и замена
# print(re.sub(reg6, "!", s, 1))  # Я ищу совпадения в 2024 году! И я их найду в 2 счёта. - заменит только
# # одну точку

# s = "Я ищу совпадения в 2024 году. И я их найду в 2 счёта."
# reg = r"2024"
# reg2 = r"[204]"
# print(re.findall(reg, s))  # ['2024']
# print(re.findall(reg2, s))  # ['2', '0', '2', '4', '2'] - любой из заданных символов

# СМОТРЕТЬ ПАПКУ 17 - Комбинации.JPG


# s = "Я ищу совпадения в 2024 году. И я их найду в 2 счёта. 198765"
# reg = r"[0-9]"  # на вывод всё, что попадает в диапазон, нельзя от большего кода символа к меньшему
# reg1 = r"[а-я]"  # на вывод всё, что попадает в диапазон, нельзя от большего кода символа к меньшему
# reg2 = r"[А-Яа-я]"  # на вывод всё, что попадает в диапазон, нельзя от большего кода символа к меньшему
# reg3 = r"[А-Яа-яё]"  # на вывод всё, что попадает в диапазон, нельзя от большего кода символа к меньшему
# # Сократим запись
# reg4 = r"[А-яЁё]"
# print(re.findall(reg, s))  # ['2', '0', '2', '4', '2', '1', '9', '8', '7', '6', '5']
# print(re.findall(reg1, s))  # ['и', 'щ', 'у', 'с', 'о', 'в', 'п', 'а', 'д', 'е', 'н', 'и', 'я', 'в', 'г', 'о', 'д',
# # 'у', 'я', 'и', 'х', 'н', 'а', 'й', 'д', 'у', 'в', 'с', 'ч', 'т', 'а'] - только нижний регистр
# print(re.findall(reg2, s))  # ['Я', 'и', 'щ', 'у', 'с', 'о', 'в', 'п', 'а', 'д', 'е', 'н', 'и', 'я', 'в', 'г', 'о',
# #'д', 'у', 'И', 'я', 'и', 'х', 'н', 'а', 'й', 'д', 'у', 'в', 'с', 'ч', 'т', 'а'] - с верхним регистром, кроме ё
# print(re.findall(reg3, s))  # ['Я', 'и', 'щ', 'у', 'с', 'о', 'в', 'п', 'а', 'д', 'е', 'н', 'и', 'я', 'в', 'г', 'о',
# # 'д', 'у', 'И', 'я', 'и', 'х', 'н', 'а', 'й', 'д', 'у', 'в', 'с', 'ч', 'ё', 'т', 'а'] - с верхним регистром и "ё"
# print(re.findall(reg4, s))  # ['Я', 'и', 'щ', 'у', 'с', 'о', 'в', 'п', 'а', 'д', 'е', 'н', 'и', 'я', 'в', 'г', 'о',
# # 'д', 'у', 'И', 'я', 'и', 'х', 'н', 'а', 'й', 'д', 'у', 'в', 'с', 'ч', 'ё', 'т', 'а'] - с верхним регистром и "ё"
# # Посмотрим коды
# print(ord("А"))  # 1040 от
# print(ord("Я"))  # 1071 до
# print(ord("а"))  # 1072 от
# print(ord("я"))  # 1103 до
# print(ord("ё"))  # 1105 - за пределами "я" в нижнем регистре
# print(ord("Ё"))  # 1025 - до начала русского алфавита в верхнем регистре
# Работа с символами английского алфавита:

# s = "Я ищу совпадения в 2024 году. И я их найду в 2 счёта. 198765. Hello"
# reg = r"[a-z]"
# reg1 = r"[A-Za-z]"
# reg2 = r"[A-z]"  # Сократим
# print(re.findall(reg, s))  # ['e', 'l', 'l', 'o']
# print(re.findall(reg1, s))  # ['H', 'e', 'l', 'l', 'o']
# print(re.findall(reg2, s))  # ['H', 'e', 'l', 'l', 'o']
# Работа со спец. символами
# s = "Я ищу совпадения в 2024 году. И я их найду в 2 счё_та. 198765. Hello"
# reg = r"[A-z]"
# print(re.findall(reg, s))  # ['_', 'H', 'e', 'l', 'l', 'o'] -> сокращать запись нельзя, так как попадут спец. символы,
# # только r"[A-Za-z]"


# # Попробуем поставить точку:
# s = "Я ищу совпадения в 2024 году. И я их найду в 2 счё_та. 198765. Hello."
# reg = r"[A-Za-z]."  # точка - спецсимвол, экранируем его, чтобы искал символ после которого идёт точка:
# reg1 = r"[A-Za-z]\."
# reg3 = r"[A-Za-z.]"  # просто ищем точку, в квадратных скобках спецсимволы не экранируем
# print(re.findall(reg, s))  # ['He', 'll', 'o.']
# print(re.findall(reg1, s))  # ['o.']
# print(re.findall(reg3, s))  # ['.', '.', '.', 'H', 'e', 'l', 'l', 'o', '.']

# # Поиск символа "дефис" - ставить в начало или в конец, лучше в конец
# s = "Я ищу совпадения в 2024 году. И я их найду в 2 счё_та. 198765. Hel-lo."
# reg = r"[A-Za-z.-]"
# print(re.findall(reg, s))  # ['.', '.', '.', 'H', 'e', 'l', '-', 'l', 'o', '.']

# Поиск символа "[]"
# s = "Я ищу совпадения в 2024 году. И я их найду в 2 счё_та. [198765]. Hel-lo."
# reg = r"[A-Za-z9.[\]-]"  # экранируем закрывающую
# reg1 = r"[^0-9]"  # ставить только в начало
# reg3 = r"[0-9][0-9]"
# print(re.findall(reg, s))  # ['.', '.', '[', '9', ']', '.', 'H', 'e', 'l', '-', 'l', 'o', '.']
# print(re.findall(reg1, s))  # ['Я', ' ', 'и', 'щ', 'у', ' ', 'с', 'о', 'в', 'п', 'а', 'д', 'е', 'н', 'и', 'я', ' ',
# # 'в', ' ', ' ', 'г', 'о', 'д', 'у', '.', ' ', 'И', ' ', 'я', ' ', 'и', 'х', ' ', 'н', 'а', 'й', 'д', 'у', ' ', 'в',
# # ' ', ' ', 'с', 'ч', 'ё', '_', 'т', 'а', '.', ' ', '[', ']', '.', ' ', 'H', 'e', 'l', '-', 'l', 'o', '.'] - всё что
# # угодно, кроме цифр
# print(re.findall(reg3, s))  # ['20', '24', '19', '87', '65'] - набор цифр
# Вывести года с 20[00] 19 [00] - последние цифры варьируются

# s = r"Я ищу совпадения в 2024 году. И я их найду в 2 счё_та. [1398765]. Hel-lo."
# reg = r"[12][09][0-9][0-9]"
# print(re.findall(reg, s))  # ['2024']

# Задача. Найти время в формате [16:25]
# Тест:
# Час в 24-часовом формате от 00 до 23. 2021-06-15T21:45. Минуты, в диапазоне от 00 до 59. 2021-06-15T01:09.

# ['21:45', '01:09']

# st = "Час в 24-часовом формате от 00 до 23. 2021-06-15T21:45. Минуты, в диапазоне от 00 до 59. 2021-06-15T01:09."
# pattern = "[0-9][0-9]:[0-9][0-9]"
# print(re.findall(pattern, st))  # ['21:45', '01:09']
# # Если под такой шаблон будет не время 91:45
# st1 = "Час в 24-часовом формате от 00 до 23. 2021-06-15T91:45. Минуты, в диапазоне от 00 до 59. 2021-06-15T01:09."
# pattern1 = "[0-9][0-9]:[0-9][0-9]"
# print(re.findall(pattern1, st1))  # ['91:45', '01:09']
# # Уточним шаблон для работы со временем
# pattern2 = "[0-2][0-9]:[0-5][0-9]"
# print(re.findall(pattern2, st1))  # ['01:09']

# Специальные_пары_символов.JPG
# s = r"Я ищу совпадения в 2024 году. И я их найду в 2 счё_та."
# reg = r"\d"  # любая цифра от 0 до 9 -> [0-9]
# reg1 = r"\D"  # всё кроме цифр -> [^0-9]
# reg2 = r"\s"  # любой пробел -> [ ]
# reg3 = r"\S"  # всё кроме пробела -> [^ ]
# reg4 = r"\w"  # буквы, цифры и символ подчёркивания -> [0-9A-zА-я_]
# reg5 = r"\W"  # всё, кроме букв, цифр и символа подчёркивания -> [^0-9A-zА-я_]
# reg6 = r"\AЯ ищу"  # всё, что после "\A..."
# reg7 = r"счё_та.\Z"  # чем заканчивается строка
# reg8 = r"\bсов"  # чем заканчивается строка
# print(re.findall(reg, s))  # ['2', '0', '2', '4', '2']
# print(re.findall(reg1, s))  # ['Я', ' ', 'и', 'щ', 'у', ' ', 'с', 'о', 'в', 'п', 'а', 'д', 'е', 'н', 'и', 'я',
# # ' ', 'в', ' ', ' ', 'г', 'о', 'д', 'у', '.', ' ', 'И', ' ', 'я', ' ', 'и', 'х', ' ', 'н', 'а', 'й', 'д', 'у', ' ',
# # 'в', ' ', ' ', 'с', 'ч', 'ё', '_', 'т', 'а', '.']
# print(re.findall(reg2, s))  # [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
# print(re.findall(reg3, s))  # ['Я', 'и', 'щ', 'у', 'с', 'о', 'в', 'п', 'а', 'д', 'е', 'н', 'и', 'я', 'в', '2',
# # '0', '2', '4', 'г', 'о', 'д', 'у', '.', 'И', 'я', 'и', 'х', 'н', 'а', 'й', 'д', 'у', 'в', '2', 'с', 'ч', 'ё', '_',
# # 'т', 'а', '.']
# print(re.findall(reg4, s))  # ['Я', 'и', 'щ', 'у', 'с', 'о', 'в', 'п', 'а', 'д', 'е', 'н', 'и', 'я', 'в', '2', '0',
# # '2', '4', 'г', 'о', 'д', 'у', 'И', 'я', 'и', 'х', 'н', 'а', 'й', 'д', 'у', 'в', '2', 'с', 'ч', 'ё', '_', 'т', 'а']
# print(re.findall(reg5, s))  # [' ', ' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '.']
# print(re.findall(reg6, s))  # ['Я ищу']
# print(re.findall(reg7, s))  # ['счё_та.']
# print(re.findall(reg8, s))  # ['сов']


# Кол-во повторений элементов: Метасимволы.JPG, Квантификаторы.JPG
# кол-во повторений:
# "+" от 1 до бесконечности
# "*" от 0 до бесконечности
# "?" от 0 до одного повторения
# s = r"Я ищу совпадения в 2024 году. И я их найду в 2 счё_та. Hel-lo"
# reg = r"\w+"
# reg1 = r"\d+"
# reg2 = r"20*"
# print(re.findall(reg, s))  # ['Я', 'ищу', 'совпадения', 'в', '2024', 'году', 'И', 'я', 'их', 'найду', 'в', '2',
# # 'счё_та', 'Hel', 'lo']
# print(re.findall(reg1, s))  # ['2024', '2']
# print(re.findall(reg2, s))  # ['20', '2', '2']
#
# d = "Цифры: 7, +17, -42, 0013, 0.3"
# print(re.findall(r"[+-]?\d+\.?\d?", d))  # ['7', '+17', '-42', '0013', '0.3']
# # Упростим
# print(re.findall(r"[+-]?\d+[.\d]*", d))  # ['7', '+17', '-42', '0013', '0.3']

# # Удалим комментарий
# st = "05-06-1987 # Дата рождения"
# print("Дата рождения:", re.sub(r"\s#.*", "", st))
# # Получим из: Дата рождения: 05-06-1987 => Дата рождения: 05.06.1987
#
# print("Дата рождения:", re.sub(r"-", ".", re.sub(r"\s#.*", "", st)))
# # Дата рождения: 05.06.1987

# Напишите регулярное выражение для нахождения всех ключей и значений:
# author=Пушкин А.С.; title = Евгений Онегин; price =200; year= 1831

# ['author=Пушкин А.С.', 'title = Евгений Онегин', 'price =200', 'year= 1831']

# st = "author=Пушкин А.С.; title = Евгений Онегин; price =200; year= 1831"
# # pattern = r"\w+\s*=\s*[\w\s.]+"
# pattern = r"\w+\s*=\s*[^;]+"
# print(re.findall(pattern, st))

# s1 = "12 сентября 2024 года 456"
# # reg1 = r"\d{2,4}"  # пробелы не ставим
# reg1 = r"\d{2,}"  # от 2 до бесконечности
# print(re.findall(reg1, s1))  # ['12', '2024', '456']

# Метасимволы: строка начинается; заканчивается

# s = "Я ищу совпадения в 2024 году. И я их найду в 2 счё_та."
# # reg = r"^\w+\s\w+"
# reg = r"\w+\s\w+\.$"
# print(re.findall(reg, s))

# def valid_login(name):
#     return re.findall("^[A-Za-z0-9_-]{3,16}$", name)
#
#
# print(valid_login("Python_master"))
# print(valid_login("#@!Python"))

# Флаги -> Флаги.JPG

# print(re.findall(r"\w+", "12 + й"))  # ['12', 'й']
# print(re.findall(r"\w+", "12 + й", flags=re.ASCII))  # ['12'] для игнорирования русского текста

# text = "Hello Word"
# print(re.findall(r"\w+", text, re.DEBUG))  # Включает режим отладки при компиляции регулярного выражения
# print(re.findall(r"\w\+", text, re.DEBUG))  # Включает режим отладки при компиляции регулярного выражения

# s = "Я ищу совпадения в 2024 году. И я их найду в 2 счё_та."
# reg = r"я"
# print(re.findall(reg, s, re.IGNORECASE))  # ['Я', 'я', 'я']
# print(re.findall(reg, s, re.I))  # ['Я', 'я', 'я']

# text = """
# one
# two
# """
#
# text2 = """
# one # Комментарий
# two
# """
#
# print(re.findall(r"one.\w+", text))
# print(re.findall(r"one.\w+", text, re.DOTALL))  # ['one\ntwo']
# # Работа с многострочным текстом
# print(re.findall(r"one$", text, re.MULTILINE))  # ['one']
# print(re.findall(r"one$", text2, re.MULTILINE))  # []

# print(re.findall("""[a-z.-]+@[a-z.-]+""", "test@mail.ru"))
# print(re.findall("""
# [a-z.-]+ # part 1
# @        # @
# [a-z.-]+ # part 2
# """, "test@mail.ru", re.VERBOSE))  # ['test@mail.ru'] - Позволяет включить пробелы и комментарии

# Занятие 18. Python
# 30.03.2024

# Добавление флагов в шаблон регулярного выражения:

# text = """Python,
# python,
# PYTHON"""
# reg = "(?mi)^python"  # m - для re.MULTILINE, i -> re.IGNORECASE
# print(re.findall(reg, text))

# Жадное соответствие в регулярных выражениях

# text = "<body>Пример жадного соответствия в регулярных выражениях</body>"
# print(re.findall("<.*>", text))  # Хотим вернуть список из элементов совпадений [<body>, </body>]
# print(re.findall("<.*?>", text))  # Ленивые соответствия # ['<body>', '</body>'] - без содержимого -> по минимуму
#
# # *?, +?, ??
# # {m,n}?, {,n}?, {m,}?
#
# s1 = "12 сентября 2024 года 4567897"
# # reg1 = r"\d{2,4}" # ['12', '2024', '4567', '897']
# # reg1 = r"\d{2,4}?"  # ['12', '20', '24', '45', '67', '89'] - ленивое совпадение с шаблоном регулярного выражения
# reg1 = r"\d{2}"  # ['12', '20', '24', '45', '67', '89'] - то же, что и при ленивом совпадении->в нём нет смысла
# reg2 = r"\d{,4}?"  # ['', '1', '', '2', '', '', '', '', '', '', '', '', '', '', '', '2', '', '0', '', '2', '', '4',
# # '', '', '', '', '', '', '', '4', '', '5', '', '6', '', '7', '', '8', '', '9', '', '7', '']
# reg3 = r"\d{3,}"  # ['2024', '4567897'] - от трёх и больше
# reg4 = r"\d{3,}?"  # ['202', '456', '789'] берёт числа где есть три цифры, идущие подряд тоже что и reg1 = r"\d{3}"
# print(re.findall(reg1, s1))
# print(re.findall(reg2, s1))
# print(re.findall(reg3, s1))
# print(re.findall(reg4, s1))

# Перечисление

# s = "Пётр, Ольга и Виталий отлично учатся"
# reg = r"Ольга|Виталий"
# print(re.findall(reg, s))  # ['Ольга', 'Виталий'] - ищем или Ольгу, или Виталия

# # Получить список элементов в виде "атрибут-значение" в виде списка
# s = "int = 4, float = 4.0f, double = 8.0"
# # reg = r"\w+\s*=\s*[.\w+]*" # ['int = 4', 'float = 4.0f', 'double = 8.0']
# # Возьмём пары ключи-значения для int и float
# # reg = r"int\s*=\s*[.\w+]*|float\s*=\s*[.\w+]*"  # ['int = 4', 'float = 4.0f']. Сократим:
# # reg = r"(?:int|float)\s*=\s*[.\w+]*"  # ['int = 4', 'float = 4.0f']
# # reg = r"(int|float)\s*=\s*([.\w+]*)"  # [('int', '4'), ('float', '4.0f')] - список кортежей
# reg = r"((int|float)\s*=\s*([.\w+]*))"  # [('int = 4', 'int', '4'), ('float = 4.0f', 'float', '4.0f')]
# print(re.findall(reg, s))
# print(re.search(reg, s))  # <re.Match object; span=(0, 7), match='int = 4'> - search выводит только первое совпадение

# (?: ...) - обозначает, что эта группирующая скобка является не сохраняющей


# s = "5 +7*2 - 4"
# # reg = r"\s*[+*-]\s*"
# # print(re.split(reg, s))  # метод split из строки по символу разделителю разбивает текущий элемент
# ['5', '7', '2', '4']
# reg = r"\s*([+*-])\s*"  # ['5', '+', '7', '*', '2', '-', '4'] - круглые скобки отрабатывают как сохраняющие
# print(re.split(reg, s))

# Задача. Просите пользователя ввести текущую дату по заданному шаблону и проверьте данные на соответствие

# Введите дату в формате dd-mm-YYYY: 28-08-2021
# [('28', '08', '2021')]

# a = "31-08-2021"
# # pattern = r"\d\d-\d\d-\d\d\d\d"  # ['28-08-2021']
# pattern = r"(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(19\d\d|20[0-9][0-9])"  # [('31', '08', '2021')]
# # print(re.findall(pattern, a))
# print(re.search(pattern, a))  # <re.Match object; span=(0, 10), match='31-08-2021'>
# print(re.search(pattern, a).group())  # 31-08-2021
# print(re.search(pattern, a).group(1))  # 31
# print(re.search(pattern, a).group(2))  # 08
# print(re.search(pattern, a).group(3))  # 2021
# # print(re.search(pattern, a).group(4))  # IndexError: no such group
# print(re.search(pattern, a).group(0))  # 31-08-2021
# # m = re.search(pattern, a)
# # print(m[0])  # 31-08-2021 - общее совпадение
# # print(m[1])  # 31 - скобки нумеруются с единицы
# # print(m[2])  # 08
# # print(m[3])  # 2021
# # # print(m[4])  # IndexError: no such group

# # Создадим строку с текстом и датами в неудобном формате:
# s = "Самолёт прилетает 10/23/2024. Будем рады вас видеть после 10/24/2024."  # Получить дату: 23.10.2024
# reg = r"(\d{2})/(\d{2})/(\d{4})"
# print(re.sub(reg, r"\2.\1.\3", s))  # Самолёт прилетает 23.10.2024. Будем рады вас видеть после 24.10.2024.

# Сделаем строку и шаблон. Сделаем доменные имена ссылками, подставив http:

# s = "yandex.com and yandex.ru"
# reg = r"(([a-z0-9-]{2,}\.)+[a-z]{2,4})"
# print(re.sub(reg, r"http://\1", s))

# Функции. Рекурсия -> функция вызывает сама себя

# def elevator(n):  # 5 -> print; 5 - 1 = 4 -> print -> 3 -> 2 -> 1 -> 0 в if -> вы в подвале
#     if n == 0:  # базовый случай - условие выхода из рекурсии
#         print("Вы в подвале")
#         return
#     print("=>", n)
#     elevator(n - 1) # базовый случай
#     print(n, end=" ")  # 5 сохраняется в стек - область памяти в компьютере, которая имеет строго определённую
#     # последовательность сохранения, тот элемент, кот попал первым, к нему можно получить доступ самым последним
#     # стек 5 4 3 2 1
#
#
# n1 = int(input("На каком вы этаже: "))  # 5
# elevator(n1)
# # сохранение данных в стеке:
# # 1 - достаётся из стека первой, забирается, потом доступ к ->
# # -> 2
# # 3
# # 4
# # 5
# # Вывод:
# # На каком вы этаже: 5
# # => 5
# # => 4
# # => 3
# # => 2
# # => 1
# # Вы в подвале
# # 1 2 3 4 5

# Есть список элементов с числовыми значениями. Найдём его сумму: с рекурсией и без

# 1 Обычный цикл
# def sum_list(lst):
#     res = 0
#     for i in lst:
#         res += i
#     return res
#
#
# print(sum_list([1, 3, 5, 7, 9]))  # 25

# 2 Рекурсия

# def sum_list(lst):  # [1, 3, 5, 7, 9] | 2-й вызов [3, 5, 7, 9] | 3-й вызов [5, 7, 9] ...
#     if len(lst) == 1:
#         print(lst, "=> lst[0]:", lst[0])
#         return lst[0]
#     else:
#         print(lst, "=> lst[0]:", lst[0])
#         return lst[0] + sum_list(lst[1:])  # 1 + 3 + 5 + ... - базовый случай
#
#
# print(sum_list([1, 3, 5, 7, 9]))  # 25

# Вывод:
# [1, 3, 5, 7, 9] => lst[0]: 1
# [3, 5, 7, 9] => lst[0]: 3
# [5, 7, 9] => lst[0]: 5
# [7, 9] => lst[0]: 7
# [9] => lst[0]: 9
# 25


# Пример

# def to_str(n, base):  # n = 354, base -> 10
#     convert = "0123456789ABCDEF"
#     if n < base:
#         return convert[n]  # convert[3] => '3'
#     else:
#         return to_str(n // base, base) + convert[n % base]  # convert[354 % 10] -> convert[4] => '3' + '5' + '4'
#
#
# print(to_str(18, 2))  # 10010
# print(to_str(18, 8))  # 22
# print(to_str(18, 10))  # 18
# print(to_str(18, 16))  # 12
# print(to_str(354, 10))  # 354

# # Пример с другими значениями
# def to_str(n, base):  # 254 -> 15 (ост)
#     convert = "0123456789ABCDEF"
#     if n < base:
#         return convert[n]  # convert[n] => '' -> convert[15] => 'F'
#     else:
#         return to_str(n // base, base) + convert[n % base]  # convert[254 % 16] => '' -> convert[14] => 'E'
#
#
# print(to_str(254, 16))  # FE

# Пример рекурсии. Нужно посчитать сколько всего элементов = 10


# def count_items(item_list):  # ['Bob', ['Chat', 'Cat'], 'Bard', 'Bert']
#     count = 0  # 1 # 0 -> Bob не list # 0 -> # 1 - переход на следующую итерацию цикла -> ['Chat', 'Cat'] -> count = 0
#     # - Chat не list -> count = 1 - Cat не list -> count = 2 -> 3 ('Bard', 'Bert') "+2" = 5
#     for item in item_list:
#         if isinstance(item, list):
#             count += count_items(item)  # 2 + 1 = 3 + 2 = 5
#         else:
#             count += 1
#     return count
#
#
# # names = ['Adam', ['Bob', ['Chat', 'Cat'], 'Bard', 'Bert'], 'Alex', ['Bea', 'Bill'], "Ann"] пров.универсальности-10эл
# names = ['Adam', ['Bob', ['Chat', 'Cat', ['a', 'b']], 'Bard', 'Bert'], 'Alex', ['Bea', 'Bill'], "Ann"]  # 12эл
# print(names)
# print(len(names))  # 5 - длина списка
# # Проверка типа данных
# # print(isinstance(names, list))  # True -> names - тип данных list
# # print(isinstance(names[0], list))  # False -> Adam - не тип данных list, это строка
# # print(isinstance(names[1], list))  # True - список
# # print(isinstance(names[1][0], list))  # False -> Bob - str
# # print(isinstance(names[1][1][0], list))  # False -> Chat - str, не список
# print(count_items(names))

# Пример. С использованием рекурсии удалим пробелы и переносы на др. строку

# def remove(text):  # text = " Hello\nWorld "; функция 2: text = " ello\nWorld "
#     # return text
#     if not text:  # text = "" - попадание в условие - базовый случай
#         return ""
#     if text[0] == "\n" or text[0] == " " or text[0] == "l":  # HeoWord
#         return remove(text[1:])
#     else:
#         return text[0] + remove(text[1:])  # "H" + "" -> вызов функции 2
#
#
# print(remove(" Hello\nWorld "))  # HelloWorld
#
# print(bool(" Hello\nWorld "))  # True
# print(bool(""))  # False

# Занятие 19. 31.03.2024

# Метод open для открытия файла. Открывает файл для чтения или записи файлового потока

# f = open("test.txt", "r")  # для режима чтения, "r" можно не передавать - относительный путь
# f = open(r"C:\Users\Forz1kGG\Desktop\python\1. 14.01\Lessons\test.txt", "r")  # открытие по абсолютному пути
# print(f)  # <_io.TextIOWrapper name='test.txt' mode='r' encoding='cp1251'> cp1251 - кодировка windows
# print(*f)  # Hello! - содержимое text.txt
# print(f.mode)  # режим r
# print(f.name)  # C:\Users\Forz1kGG\Desktop\python\1. 14.01\Lessons\test.txt
# print(f.encoding)  # режим r
# print(f.closed)  # False - так как файл ещё открыт
# f.close()  # закрывает и сохраняет данные
# print(f.closed)  # True - файл закрыт

# # f = open("test1.txt", "r")  # FileNotFoundError: [Errno 2] No such file or directory: 'test1.txt'
# f = open("test.txt", "r")
# print(f.read(3))  # Hel три буквы, три данных считали, если повторно ниже вызвать read дочитается до конца
# # print(f.read())  # считывает содержимое: Hello!
# f.close()
# # print(f.read())  # I/O operation on closed file. НЕЛЬЗЯ СЧИТАТЬ ИЗ ЗАКРЫТОГО ФАЙЛА

# f = open("test1.txt", "r")
# # print(f.read())  # - считал все данные
# # This is line 1.
# # This is line 2.
# # This is line 3.
# print(f.readline())-> This is line 1.- только одна строка - абзац до переноса, где стоит курсор. При повторном вызове:
# print(f.readline())  # This is line 2.
# print(f.readline(8))  # This is # считали 8 символов
# print(f.readline())  # line 3. # дочитал
# f.close()

# f = open("test1.txt", "r")
# # print(f.readlines())  # ['This is line 1.\n', 'This is line 2.\n', 'This is line 3.']
# print(f.readlines(16))  # если затронули строчку, то дочитает до конца ['This is line 1.\n', 'This is line 2.\n']
# print(f.readlines())  # ['This is line 3.']
# f.close()

# f = open("test1.txt", "r")
# for line in f:
#     print(line)
# f.close()
# # Вывод:
# # This is line 1.
# #
# # This is line 2.
# #
# # This is line 3.

# # Задача. Определите количество строк в файле:
# f = open("test1.txt", "r")
# count = 0
# for line in f:
#     print(line)
#     count += 1
# f.close()
# print("count: =", count)

# 2-й способ

# f = open("test1.txt", "r")
# print("count =", len(f.readlines()))
# f.close()

# # Создание несуществующего файла, режим "w" также очищает файл - перезапись
#
# f = open("xyz.txt", "w") # режим "w" затирает старое содержимое файла и перезаписывает
# f.write("Hello\nWorld!")
# f.close()

# f = open("xyz1.txt", "a")  # режим "a" дозаписывает строки текста после перезапуска кода
# f.write("\nNew text")
# f.close()

# f = open("xyz.txt", "w")
# f.writelines(['This is line 1\n', 'This is line 2\n'])
# f.close()

# 2 способ

# line = ['This is line 1\n', 'This is line 2\n']  # записывает содержимое в текстовый док.
# f = open("xyz.txt", "w")
# f.writelines(line)
# f.close()

# lst = [str(i) for i in range(1, 20)]
# print(lst)
#
# f = open("xyz.txt", "w")
# for index in lst:
#     # f.write(index + "\t")
#     f.write(str(index))
# f.close()
#
# f = open("xyz.txt", "r")
# d = f.read()
# print(d)  # 12345678910111213141516171819
# print(type(d))  # <class 'str'>
# f.close()

# Изменим код. Соберём список числовых значений в одну строку

# lst = [i for i in range(1, 20)]
# print(lst)
#
# f = open("xyz.txt", "w")
# for index in lst:
#     f.write("\t".join(str(index)))
# f.close()

# Другой способ

# lst = [i for i in range(1, 20)]
# print(lst)  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
#
# f = open("xyz.txt", "w")
# f.write("\t".join(map(str, lst)))
# f.close()
#
# f = open("xyz.txt", "r")
# d = f.read()
# # print(d.split("\t"))  # ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16',
# # '17', '18', '19']
# # st = d.split("\t")
# st = list(map(int, d.split("\t")))  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
# print(st)  # ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']
# print(d)  # 1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19
# print(type(d))  # <class 'str'>
# print(type(st))  # <class 'list'>
# print(type(st[0]))  # <class 'int'>
# f.close()

# Задача. Заменить строку в текстовом файле:
# Текст:
# Замена строки в текстовом файле;
# изменить строку в списке;
# записать список в файл;

# Замена строки в текстовом файле;
# Hello world!
# записать список в файл;

# Создадим файл и положим в переменную для дальнейшего пользования:

# file = "text2.txt"
#
# f = open(file, "w")
# f.write("Замена строки в текстовом файле;\nизменить строку в списке;\nзаписать список в файл;")
# f.close()  # Сохраняет записанные данные
#
# f = open(file, "r")
# read_line = f.readlines()
# f.close()
#
# print(read_line)
# read_line[1] = "Hello world!\n"
# print(read_line)
#
#
# f = open(file, "w")
# f.writelines(read_line)
# f.close()

# # Удаление строки из файла по её индексу
# file = "text2.txt"
#
# f = open(file, "w")
# f.write("Замена строки в текстовом файле;\nизменить строку в списке;\nзаписать список в файл;")
# f.close()
#
# f = open(file, "r")
# s = f.readlines()
# f.close()
# print(s)
#
# pos = int(input("Какую строку удалять? pos = "))
# if 0 <= pos < len(s):
#     del s[pos]
# else:
#     print("Индекс введён неверно")
# print(s)
#
# f = open(file, "w")
# f.writelines(s)
# f.close()

# f = open("test.txt")
# print(f.read(3))
# print(f.tell())  # позиция условного курсора. Переместим условный курсор на заданную позицию: 3
# print(f.seek(1))  # перемещение условного курсора в заданную позицию: 1
# # Дочитаем данные
# print(f.read())  # ello! - дочитали с первой позиции, куда переместили курсор
# print(f.tell())  # 6
# f.close()

# Сделать чтобы данные не вытирались
# f = open("test.txt", "r+")
# f.write("I am learning Python")  # I am learning Python -> # I a-new string-ython - перезатёр
# print(f.seek(3))
# f.write("-new string-")
# f.close()

# # f = open("test45.txt", "r+")  # FileNotFoundError: [Errno 2] No such file or directory: 'test45.txt'
# НЕ СОЗДАЁТ ФАЙЛЫ
# f = open("test.txt", "r+")
# f.write("I am learning Python")  # I am learning Python -> # I a-new string-ython - перезатёр
# print(f.seek(3))
# f.write("-new string-")  # I a-new string-ython
# print(f.tell())  # позиция условного курсора после перезаписи - 15
# print(f.read())
# f.close()

# f = open("test.txt", "a+")  # не очищает файл
# f.write("I am learning Python")
# print(f.seek(3))
# f.write("-new string-")
# print(f.read())  # метод read не считывает данные с a+, w+
# f.close()

# Контекстный менеджер для работы, в т. ч. и с файлами - сам закрывает файлы

# with open('test.txt', "w") as f:
#     print(f.write('0123456789'))  # 10 - кол-во символов
#     print(f.closed)  # False файл ещё открыт
# print(f.closed)  # True файл закрыт

# with open('test.txt', "w") as f:
#     print(f.write('012\n34567\n89'))
# print(f.closed)

# with open('test.txt', "r") as f:
#     for line in f:
#         print(line)     # 012
#
#                         # 34567
#
#                         # 89
#         print(line[:2])
# # 01
# # 34
# # 89 - делает через срез перенос на др. строку

# Задача. Написать функцию, которая выводит слово из файла, имеющее максимальную длину
# (или список слов, если таковых несколько).

# ['методами', 'символов', 'попыткой']

# def longest_words(file):
#     with open(file, "r") as text:  # , encoding="utf-8" - если в консоль выводится битая кодировка из файла
#         w = text.read().split()
#         print(w)
#         # max_length = max(w, key=len)  # сортировка по возрастанию
#         max_length = len(max(w, key=len))  # 14 символов - слово с максимальной длиной
#         res = [word for word in w if len(word) == max_length]
#         # return max_length
#         print(max_length)
#         if len(res) == 1:
#             return res[0]
#         return res
#
#
# print(longest_words('test.txt'))

# Параллельная работа с файлами. Берём строку с one.txt, изменяем, записываем в two.txt

# one = "one.txt"
# two = "two.txt"
#
# # text = ("Строка № 1\nСтрока № 2\nСтрока № 3\nСтрока № 4\nСтрока № 5\nСтрока № 6\nСтрока № 7\nСтрока № 8
# \nСтрока № 9\nСтрока № 10\n")
# #
# # with open(one, 'w') as f:
# #     f.write(text)
#
# with open(one, "r") as fr, open(two, "w") as fw:
#     for line in fr:
#         line = line.replace("Строка", "Линия -")
#         fw.write(line)

# Сделать объединение двух файлов. Третий файл = Первый файл.Второй файл

# one = "one.txt"
# two = "two.txt"
# three = "three.txt"
#
# with open(one, 'r') as f1:
#     a = f1.read()
#     print(a)
#
# with open(two, 'r') as f2:
#     b = f2.read()
#     print(b)
#
# c = a + b
# print(c)
#
# with open(three, 'w') as f3:
#     f3.write(c)

# Параллельная запись

# one = "one.txt"
# two = "two.txt"
# three = "three.txt"
#
# with open(one, "r") as f1, open(two, "r") as f2, open(three, "w") as f3:
#     a = f1.readlines()
#     b = f2.readlines()
#     # c = a + b Чередование элементов списка: строка-линия
#     c = []
#     for i in range(len(a)):
#         c.append(a[i])
#         c.append(b[i])
#     print(a)
#     print(b)
#     print(c)
#     f3.writelines(c)


# 6.04.2024

# Задача.
# В текстовом редакторе посчитать кол-во строк, а также для каждой отдельной строки определить
# количество символов в ней и слов.

# Пример
# первая строка
# 14 симв. 2 сл.
# строка номер два
# 17 симв. 3 сл.
# третья строка
# 14 симв. 2 сл.
# 4 строка 8 симв. 2 сл.
# 4 стр.

# file = "text2.txt"
#
# f = open(file)
# line = 0
# for i in f:
#     line += 1
#     # print(i). Подсчёт слов:
#     word = 0  # 1 # 5 -> выход
#     flag = 0  # 1 # 1 -> выход
#     for j in i:
#         if j != " " and flag == 0:
#             word += 1
#             flag = 1
#         elif j == " ":
#             flag = 0  # помогает учесть пробел, отделить слова для подсчёта слов
#
#     print(i, len(i), "символов", word, "слов")
#
# print(line, "строки в документе")
# f.close()
#
# # Вывод:
# # Замена строки в текстовом файле;
# #  33 символов 5 слов
# # изменить строку в списке;
# #  26 символов 4 слов
# # записать список в файл;
# #  24 символов 4 слов
# # 3 строки в документе

# Новая тема. Модуль OS (для работы с операционной системой) и OS.PATH (пути в операционной системе)


# import os.path - дочерний os с os итак всё отрабатывает, универсальный import os

# print(os.path.split(r"C:\Users\Forz1kGG\Desktop\python\1. 14.01\Lessons\nested1\nested2\nested3\text.txt"))
# Вывод: ('C:\\Users\\Forz1kGG\\Desktop\\python\\1. 14.01\\Lessons\\nested1\\nested2\\nested3', 'text.txt')

# print(os.getcwd())  # C:\Users\Forz1kGG\Desktop\python\1. 14.01\Lessons - путь к рабочей директории
# print(os.listdir())  # ['.git', '.idea', '.venv', 'dz', 'main.py', 'main2.py', 'one.txt', 'readme.md', 'test.txt',
# # 'test1.txt', 'text2.txt', 'three.txt', 'two.txt', 'xyz.txt', 'xyz1.txt'] - всё что есть в рабочей папки, список
# # директорий и файлов
# print(os.listdir("C:\\"))  # все папки диска С
# print(os.listdir(".."))  # ['LessonOld', 'Lessons'] - на уровень выше

# os.mkdir("folder1")  # создать папку
# os.makedirs("nested1/nested2/nested3") # создать папку и промежуточные пути в рабочей директории
# os.rmdir("folder1")  # удалить папку, если пустая, если нет, напр. есть 1.txt
# os.remove("folder1/1.txt")  # удалить файл, даже с содержимым
# os.rmdir("folder1")  # удалить пустую папку

# Переименовать и переместить

# os.rename("xyz1.txt", "test2.txt")
# os.mkdir("folder") # создал
# os.rename("folder", "test")  # переименовал, переименовывает файлы и папки, также переносит

# os.rename("xyz.txt", "test/xy.txt")  # файл переименовал и перенёс, содержимое не трогал, если папка есть
# os.rename("two.txt", "text/t.txt")  # файл переименовал и перенёс, содержимое не трогал # FileNotFoundError:
# [WinError 3] Системе не удается найти указанный путь: 'two.txt' -> 'text/t.txt'

# os.renames("two.txt", "text/t.txt")  # переименовывает файлы и перемещает их по несуществующему пути,
# путём его создания

# Посмотреть папку на всю её глубину, не только на первом уровне вложенности, но и содержимое всех её папок

# for root, dirs, files in os.walk("nested1", topdown=False):
#     print("Root:", root)
#     print("\tSubdirs:", dirs)
#     print("\tFiles:", files)
# Root: nested1
# 	Subdirs: ['nested2']
# 	Files: ['one.txt', 'test.txt', 'test1.txt']
# Root: nested1\nested2
# 	Subdirs: ['nested3']
# 	Files: ['test2.txt']
# Root: nested1\nested2\nested3
# 	Subdirs: []
# 	Files: ['text.txt', 'text2.txt', 'three.txt']

# topdown=False - перевернул
# Root: nested1\nested2\nested3
# 	Subdirs: []
# 	Files: ['text.txt', 'text2.txt', 'three.txt']
# Root: nested1\nested2
# 	Subdirs: ['nested3']
# 	Files: ['test2.txt']
# Root: nested1
# 	Subdirs: ['nested2']
# 	Files: ['one.txt', 'test.txt', 'test1.txt']
# Путь к пустой папки
# print(os.listdir(r"nested1\folder1"))  # []
# print(bool(os.listdir(r"nested1\folder1")))  # False
# print(bool(os.listdir()))  # True
# print(os.listdir())  # ['.git', '.idea', '.venv', 'dz', 'main.py', 'main2.py', 'nested1', 'readme.md', 'test', 'text']


# Задача. Удаление пустых директорий в ветви nested1
# ------------------------------------------------------
# Директория nested1\folder1 удалена
# Директория nested1\nested2\folder2 удалена
# Директория nested1\nested2\folder3 удалена
# Директория nested1\nested2\nested3\folder3 удалена
# ------------------------------------------------------

# def remove_empty_dirs(root_tree):
#     print(f"Удаление пустых директорий в ветви {root_tree}")
#     print("-" * 50)
#     for root, dirs, files in os.walk(root_tree):
#         if not os.listdir(root):
#             os.rmdir(root)
#             print(f"Директория {root} удалена")
#     print("-" * 50)
#
#
# remove_empty_dirs("nested1")

# print(os.path.split(r"C:\Users\Forz1kGG\Desktop\python\1. 14.01\Lessons\nested1\nested2\nested3\text.txt"))
# # ('C:\\Users\\Forz1kGG\\Desktop\\python\\1. 14.01\\Lessons\\nested1\\nested2\\nested3', 'text.txt') - кортеж,
# # содержащий путь и название документа
# # Из частей собрать путь, даже не существующий
# print(os.path.join(r"C:\Users\Forz1kGG\Desktop\python", "1. 14.01", "nested2", "text.txt"))
# # C:\Users\Forz1kGG\Desktop\python\1. 14.01\nested2\text.txt
# print(os.path.join(r"C:\Users\Forz1kGG\Desktop\python", "1. 14.01", "test.txt", "nested2", "text.txt"))
# # C:\Users\Forz1kGG\Desktop\python\1. 14.01\test.txt\nested2\text.txt - может собрать и невозможный путь

# Задача. Написать программу, которая создаст приведённое на рисунке дерево директорий и файлов.
# Work:
# - w.txt
# - F1:
#     - f11.txt
#     - f12.txt
#     - f13.txt
# - F2:
#     - F21:
#         f211.txt
#         f212.txt
# Заполните файлы w.txt, f12.txt, f211.txt, f212.txt некоторым текстом.
# Выполните обход созданного дерева снизу вверх, а затем сверху вниз и выведите результаты на экран.

# dirs = [r'Work\F1', r'Work\F2\F21']
# for d in dirs:
#     os.makedirs(d)

# files = {
#     'Work': ['w.txt'],
#     r'Work\F1': ['f11.txt', 'f12.txt', 'f13.txt'],
#     r'Work\F2\F21': ['f211.txt', 'f212.txt']
# }
# for d, f in files.items():
#     for file in f:
#         file_path = os.path.join(d, file)
#         open(file_path, "w").close()
#
# files_with_text = [r'Work\w.txt', r'Work\F1\f12.txt', r'Work\F2\F21\f211.txt', r'Work\F2\F21\f212.txt']
#
# for file in files_with_text:
#     with open(file, 'w') as f:
#         f.write(f"Текст для файла {file}")


# file_path:
# Work\w.txt
# Work\F1\f11.txt
# Work\F1\f12.txt
# Work\F1\f13.txt
# Work\F2\F21\f211.txt
# Work\F2\F21\f212.txt

# Обход Work снизу вверх и сверху вниз, обходит все пути, ищет папки и файлы

# def print_tree(root, topdown):
#     print(f"Обход {root} {'сверху вниз' if topdown else 'снизу вверх'}")
#     for root, dirs, files1 in os.walk(root, topdown):
#         print(root)
#         print(dirs)
#         print(files1)
#     print("-" * 50)
#
#
# print_tree("Work", False)
# print_tree("Work", True)

# Проверить существует ли путь
# print(os.path.exists(r"C:\Users\Forz1kGG\Desktop\python\1. 14.01\Lessons\nested1\nested2\nested3\text.txt"))  # True
# print(os.path.exists(r"C:\Users\Forz1kGG\Desktop\python\Lessons\nested1\nested2\nested3\text.txt"))  # False

# Размер файла
# import time
#
# path = "main2.py"
# print(os.path.getsize(path) // 1024)  # размер файла 235859 байт // 230 Кбайт
# print(os.path.getsize(path) / 1024)  # размер файла 230.4921875 Кбайт
#
# # Время создания файла, время последнего доступа и изменения, с
#
# print(os.path.getctime(path))  # время создания файла
# print(os.path.getatime(path))  # время последнего доступа к файлу
# print(os.path.getmtime(path))  # время последнего изменения файла (в секундах)
#
# print(time.strftime("%d.%m.%Y, %H:%M:%S"))  # текущая дата и время
# print(time.strftime("%d.%m.%Y, %H:%M:%S", time.localtime(os.path.getctime(path))))  # 20.03.2024, 05:38:34
# print(time.strftime("%d.%m.%Y, %H:%M:%S", time.localtime(os.path.getmtime(path))))  # 11.04.2024, 06:36:25
#
# print(os.path.isdir(r"C:\Users\Forz1kGG\Desktop\python\1. 14.01\Lessons\nested1\nested2\nested3\text.txt"))
# # False, так как это не папка
# print(os.path.isfile(r"C:\Users\Forz1kGG\Desktop\python\1. 14.01\Lessons\nested1\nested2\nested3\text.txt"))
# # True - это файл
# print(os.path.isfile(r"C:\Users\Forz1kGG\Desktop\python\1. 14.01\Lessons\nested1\nested2\nested\text.txt"))
# # False - т. к. проверяет, существует ли путь к этому файлу с файлом вместе, а путь был изменён на несуществующий

# ООП. Создание класса

# class Point:
#     """Класс для представления координат точек на плоскости"""
#     x = 1
#     y = 1
#
#
# p1 = Point()  # экземпляр класса
# # print(x)  # NameError: name 'x' is not defined - это свойство и напрямую к нему мы обратиться не можем,
# # только через экземпляр класса
# p1.x = 5
# p1.y = 10
# p1.z = 30  # {'x': 5, 'y': 10, 'z': 30} - можем задать новую координату за пределом класса, не появиться у
# # второго экз.
# print(p1.x)  # 1 # установили 5
# print(p1.y)  # 1 # установили 10
# print(p1.__dict__)  # {'x': 5, 'y': 10}
#
# p2 = Point()
# print(p2.x)  # 1
# print(p2.y)  # 1
# # print(p2.z)  # AttributeError: Point' object has no attribute 'z'
# print(p2.__dict__)  # {} - свои значения не установленны, берёт записанные значения с класса
#
# print(id(Point))  # 2220166108720
# print(id(p1))  # 2220164526032
# print(id(p2))  # 2220164525936
#
# print(Point.__dict__)  # {'__module__': '__main__', '__doc__': 'Класс для представления координат точек на плоскости',
# # 'x': 1, 'y': 1, '__dict__': <attribute '__dict__' of 'Point' objects>, '__weakref__': <attribute '__weakref__' of
# # 'Point' objects>} - '__dict__' - уже есть у самого класса, его не пишут, так как любой класс наследуется
# # от класса Object
# print(Point.__doc__)  # Класс для представления координат точек на плоскости

# Занятие 21. 07.04.2024

# class Point:
#     x = 1  # свойства = исходные данные со значениями, хранящие информацию
#     y = 1
#
#     def set_coord(self, x, y):  # в методах - действия над этими данными, первый параметр метода называется self -
#         # аналог this в JavaScript
#         # print("Hello Wold")
#         # x = x
#         # y = y
#         self.x = x
#         self.y = y  # универсальная запись, позволяет не дублировать код
#         print(self.__dict__)  # {'x': 5, 'y': 10}
#
#
# p1 = Point()  # создание первого экземпляра класса
# # p1.x = 5
# # p1.y = 10
# p1.set_coord(5, 10)
# # Point.set_coord(p1)  # {'x': 5, 'y': 10} другой способ вызова метода
# Point.set_coord(p1, 2, 4)  # {'x': 2, 'y': 4}
#
# p2 = Point()  # создание второго экземпляра класса
# # p2.x = 3
# # p2.y = 7
# p2.set_coord(3, 7)  # {} Нужно переопределить параметры
# # p2.set_coord()  # {'x': 3, 'y': 7}

# Задача. Реализуйте класс "Человек". Необходимо хранить в полях класса: имя, дату рождения, контактный телефон,
# страну, город, домашний адрес. Реализуйте методы класса для ввода данных, вывода данных, реализуйте доступ
# к отдельным полям через методы класса.

# ********* Персональные данные *********
# Имя: Юля
# Дата рождения: 23.05.1986
# Номер телефона: 45-46-98
# Страна: Россия
# Город: Москва
# Домашний адрес: Чистопрудный бульвар 1А
# =======================================


# class Human:
#     name = "name"  # полям нужно присвоить первоначальное значение
#     birthday = "00.00.0000"
#     phone = "00-00-00"
#     country = "country"
#     city = "city"
#     address = "street, house"  # поля
#
#     def print_info(self):  # методы
#         print(" Персональные данные ".center(40, "*"))
#         print(f"Имя: {self.name}\nДата рождения: {self.birthday}\nНомер телефона: {self.phone}\n"
#               f"Страна: {self.country}\nГород: {self.city}\nДомашний адрес: {self.address}")
#         print("=" * 40)
#
#     def input_info(self, first_name, birthday, phone, country, city, address):  # важна последовательность
#         self.name = first_name
#         self.birthday = birthday
#         self.phone = phone
#         self.country = country
#         self.city = city
#         self.address = address
#
#     # возможность присвоить новые значения
#     def set_name(self, name):  # устанавливаем новое имя
#         self.name = name
#
#     def get_name(self):  # получаем имя
#         return self.name
#
#     def set_birthday(self, value):
#         self.birthday = value
#
#     def get_birthday(self):
#         return self.birthday
#
#
# h1 = Human()
# h1.print_info()  # с исходными данными
# h1.input_info("Юля", "23.05.1986", "45-46-48", "Россия", "Москва",
#               "Чистопрудный бульвар, 1А")  # изменяем данные
# h1.print_info()  # передаём
# h1.set_name("Юлия")
# print(h1.get_name())  # Юлия
# h1.set_birthday("25.05.1986")
# print(h1.get_birthday())  # 25.05.1986

# Задача 2
# Создать класс Person с данными о сотруднике (имя, фамилия) и двумя методами. Первый должен выводить данные о
# сотруднике, второй должен увеличивать уровень квалификации сотрудника на передаваемое количество единиц.

# Данные сотрудника: Viktor Reznik
# Квалификация сотрудника: 13

# Данные сотрудника: Anna Dolgih
# Квалификация сотрудника: 12

# class Person:
#     skill = 10
#     name = ""
#     surname = ""
#
#     def print_info(self, name, surname):
#         self.name = name
#         self.surname = surname
#         print("Данные сотрудника: ", self.name, self.surname)
#
#     def add_skill(self, k):
#         self.skill += k
#         print("Квалификация сотрудника: ", self.skill, end="\n\n")
#
#
# p1 = Person()  # экземпляр класса 1
# p1.print_info("Виктор", "Резник")
# p1.add_skill(3)
#
# p2 = Person()  # экземпляр класса 2
# p1.print_info("Анна", "Долгих")
# p2.add_skill(2)

# 2-й способ
# class Person:
#     skill = 10  # статическое свойство с первоначальным значением
#
#     # def print_info(self, name, surname):
#     #     self.name = name  # Instance attribute name defined outside __init__
#     #     self.surname = surname
#     #     print("Данные сотрудника: ", self.name, self.surname)
#
#     def __init__(self, name, surname):  # служебные методы, Инициализатор = конструктор, но один для одного класса
#         self.name = name  # динамические свойства или свойства класса = Магические методы (dunder-методы)
#         self.surname = surname
#         print("Инициализатор класса Person")  # запускается 2 заза - процесс присвоения первоначального значения св-ам
#
#     def __del__(self):  # деструктор, отрабатывает в случае удаления ссылки на экз-ляр класса
#         print("Удаление экземпляра класса")  # Вызовется когда закончится программа(зак-ся ссылки на экз. класса)
#
#     def print_info(self):
#         print("Данные сотрудника: ", self.name, self.surname)
#
#     def add_skill(self, k):
#         self.skill += k
#         print("Квалификация сотрудника: ", self.skill, end="\n\n")
#
#
# p1 = Person("Виктор", "Резник")  # экземпляр класса 1
# p1.print_info()
# p1.add_skill(3)
#
# # del p1 - разрыв ссы лки на экз класса
# p1 = 5
#
# p2 = Person("Анна", "Долгих")  # экземпляр класса 2
# p2.print_info()
# p2.add_skill(2)
#
# # a = 10
# # print(a)
# # a = "Hello"  # Удаление экземпляра класса -> в самом низу. После завершения программы
# # print(a)

# Работа статический свойств - посчитаем сколько экз класса было создано
# class Point:
#     count = 0  # 3
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#         # self.count += 1
#         Point.count += 1
#
#     def get_coord(self):
#         print(self.__dict__)
#
#
# p1 = Point(5, 10)
# p1.get_coord()
# print(p1.count)  # 1
#
# p2 = Point(3, 7)
# p2.get_coord()
# print(p2.count)  # 1 у каждого экземпляра класса только один раз отрабатывает инициализатор
#
# p3 = Point(8, 16)
# p3.get_coord()
# print(p3.count)  # 1
#
# print(Point.count)  # 0
#
# # {'x': 5, 'y': 10}
# # {'x': 3, 'y': 7}
# # {'x': 8, 'y': 16}

# Необходимо создать класс Robot. Каждый экземпляр робота нужно инициализировать. Робот должен поздороваться
# и представиться. При этом должен вестись подсчёт роботов. По завершению работы роботов нужно выключить

# class Robot:  # Все методы видны в пределах класса вне зависимости от порядка их описания, но код нужно упорядочить
#     k = 0
#
#     def __init__(self, name):
#         self.name = name
#         print("Инициализация робота:", self.name)
#         Robot.k += 1
#
#     def __del__(self):
#         print(self.name, "выключается!")
#         Robot.k -= 1
#
#         if Robot.k == 0:
#             print(self.name, "был последним")
#         else:
#             print("Работающих роботов осталось:", Robot.k)
#
#     def say_hi(self):
#         print(f"Приветствую! Меня зовут:", self.name)
#
#
# droid1 = Robot("R2-D2")
# droid1.say_hi()
# print("Численность роботов:", Robot.k)
#
# droid2 = Robot("C-3PO")
# droid2.say_hi()
# print("Численность роботов:", Robot.k)
#
# droid3 = Robot("TO-P3O")
# droid3.say_hi()
# print("Численность роботов:", Robot.k)
#
# print("\nЗдесь роботы могут проделать какую-то работу.\n")
#
# print("Роботы закончили свою работу. Давайте их выключим.")
#
# # del droid1
# # del droid2
# # del droid3
# del droid3
# del droid2
# del droid1
#
# print("Численность роботов:", Robot.k)


# 13.04.2024

# Инкапсуляция - создаёт возможность защиты данных; сокрытие данных от несанкционированного доступа из вне


# class Point:
#     def __init__(self, x, y):
#         self.__x = self.__y = 0  # **
#         if Point.__check_value(x) and Point.__check_value(y):
#             self.__x = x  # закрыли доступ(private) - НОВОЕ ИМЯ СВОЙСТВА '_Point__x'
#             self.__y = y  # закрыли доступ(private) - НОВОЕ ИМЯ СВОЙСТВА '_Point__y'
#
#     # Закрытые методы
#
#     def __check_value(s):
#         if isinstance(s, int) or isinstance(s, float):
#             return True
#         return False
#
#     def set_coord(self, x, y):  # получили доступ -> установить новые значения
#         # if (isinstance(x, int) or isinstance(x, float)) and (isinstance(y, int) or isinstance(y, float)):
#         if Point.__check_value(x) and Point.__check_value(y):  # проверка упростилась (*)
#             self.__x = x
#             self.__y = y
#         else:
#             print("Координаты должны быть числами")  # Получить доступ к закрытым данным(пишем ниже):
#
#     def get_coord(self):  # получаем новые значения
#         return self.__x, self.__y
#
#     # Проверка на одну координату (***)
#     def set_x(self, x):
#         if Point.__check_value(x):
#             self.__x = x
#         else:
#             print("Координата x должна быть числом")
#
#     def set_y(self, y):
#         if Point.__check_value(y):
#             self.__y = y
#         else:
#             print("координата y должна быть числом")
#
#
# # p1 = Point(5, 10)
# # # print(p1.x, p1.y)  # 5 10
# # # print(p1.__x, p1.__y)  # AttributeError: 'Point' object has no attribute '__x' СМ ВЫШЕ, СВ-ВА ПОМЕНЯЛИ ИМЯ
# # print(p1.__dict__)  # {'_Point__x': 5, '_Point__y': 10}
# # # p1.set_coord(100, 200)
# # # p1.set_coord(100, "abc")  # {'_Point__x': 100, '_Point__y': 'abc'} - всё равно смогли записать строку
# # # print(p1.__dict__)  # {'_Point__x': 100, '_Point__y': 200}
# # # Новые значения:
# # # p1.x = 100
# # # p1.y = "abc"  # нельзя просто так запретить другой тип данных, даже если он некорректный (строка не координата)
# # # print(p1.x, p1.y)
# # # Напрямую получить доступ к закрытым свойствам нельзя, так как у них другое название
# #
# # # Вывод, если некорректная: p1.set_coord(100, "abc")
# # # {'_Point__x': 5, '_Point__y': 10}
# # # Координаты должны быть числами
# # # {'_Point__x': 5, '_Point__y': 10}
# #
# # # print(p1.__x, p1.__y)  # не можем получить свойства
# # p1.set_coord(100, "abc")  # Координаты должны быть числами -> (5, 10)
# # p1.set_coord(100, 500)  # (100, 500)
# # print(p1.get_coord())
#
# # Проверим работоспособность (*)
# # p1 = Point(5, 10)
# p1 = Point(5, "abc")  # {'_Point__x': 5, '_Point__y': 'abc'} - попадает в момент инициализации в init нет проверки
# print(p1.__dict__)
# # p1.set_coord(100, "abc")
# # print(p1.get_coord())
# # # {'_Point__x': 5, '_Point__y': 10}
# # # Координаты должны быть числами
# # # (5, 10)
# # # print(Point.__check_value())  # type object 'Point' has no attribute '__check_value'
# # print(Point.__dict__)  # '_Point__check_value'
# print(p1.get_coord())  # (0, 0) ** c проверкой в init -> строка не запишется
# # Установим новое значение (***)
# p1.set_x("abc")  # Координата x должна быть числом
# print(p1.__dict__)


# Задача. Создать класс Rectangle, описывающий прямоугольник. В классе должны быть все необходимые методы, а так же
# методы вычисления площади, периметра и диагонали, и метод, который рисует прямоугольник. Должны инициализироваться
# свойства и сделать защиту на некорректный ввод данных (строки, ... не числ.).

# Длина прямоугольника: 3
# Ширина прямоугольника: 9
# Площадь прямоугольника: 27
# Периметр прямоугольника: 24
# Гипотенуза прямоугольника: 9.49
# *********
# *********
# *********
# import math
#
#
# class Rectangle:
#     def __init__(self, length, width):
#         self.__length = length
#         self.__width = width
#
#     def __check_value(s):  # _Rectangle__check_value
#         if isinstance(s, int) or isinstance(s, float):
#             return True
#         return False
#
#     def set_width(self, value):
#         if Rectangle.__check_value(value):
#             self.__width = value
#
#     def set_length(self, value):
#         if Rectangle.__check_value(value):
#             self.__length = value
#
#     def get_width(self):
#         return self.__width
#
#     def get_length(self):
#         return self.__length
#
#     def get_area(self):
#         return self.__length * self.__width
#
#     def get_perimeter(self):
#         return 2 * (self.__length + self.__width)
#
#     def get_hypotenuse(self):
#         return round(math.sqrt(self.__length ** 2 + self.__width ** 2), 2)
#
#     def draw(self):
#         print(("*" * self.__width + "\n") * self.__length)
#
#
# a = Rectangle(4, 12)  # Один экземпляр класса - один прямоугольник, другой - другой
# a.set_length(3)
# a.set_width(9)
# print("Длина прямоугольника:", a.get_length())
# print("Ширина прямоугольника:", a.get_width())
# print("Площадь прямоугольника:", a.get_area())
# print("Периметр прямоугольника:", a.get_perimeter())
# print("Гипотенуза прямоугольника:", a.get_hypotenuse())
# a.draw()

# class Point:
#     # Запретить создание новых координат
#     __slots__ = ["__x", "__y", "z"]  # список разрешённых
#
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#
# p1 = Point(5, 10)
# p1.z = 15  # AttributeError: 'Point' object has no attribute 'z'
# # print(p1.__dict__)  # {'_Point__x': 5, '_Point__y': 10, 'z': 15}, где 'z': 15 - новая координата
# print(p1.z)  # 15 в dict z не посмотреть

# Закроем методы в классе Point

# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     @property
#     def x(self):
#         return self.__x
#
#     @x.setter
#     def x(self, x):
#         if Point.__check_value(x):
#             self.__x = x
#         else:
#             print("Координата X должны быть числом")
#
#     def __check_value(s):
#         if isinstance(s, int) or isinstance(s, float):
#             return True
#         return False
#
#     # x = property(__get_x, __set_x)
#
#
# p1 = Point(5, 10)
# p1.x = "aaa"
# # print(p1.x)
# print(p1.__dict__)

# Создать класс для преобразования килограмм в фунты.

# class KgToPounds:
#     def __init__(self, kg):
#         self.__kg = kg
#
#     @property
#     def kg(self):
#         return self.__kg
#
#     @kg.setter
#     def kg(self, new_kg):
#         if isinstance(new_kg, (int, float)):
#             self.__kg = new_kg
#         else:
#             print("Килограммы задаются только числами")
#
#     def to_pounds(self):
#         return self.__kg * 2.205
#
#
# weight = KgToPounds(12)
# print(weight.kg, "кг =>", end=" ")
# print(weight.to_pounds(), "фунтов")
# weight.kg = 41
# print(weight.kg, "кг =>", end=" ")
# print(weight.to_pounds(), "фунтов")
# weight.kg = 'десять'  # Килограммы задаются только числами

# Удаление свойства декоратором @__.deleter

# class KgToPounds:
#     def __init__(self, kg):
#         self.__kg = kg
#
#     @property
#     def kg(self):
#         return self.__kg
#
#     @kg.setter
#     def kg(self, new_kg):
#         if isinstance(new_kg, (int, float)):
#             self.__kg = new_kg
#         else:
#             print("Килограммы задаются только числами")
#
#     @kg.deleter
#     def kg(self):
#         print("Удаление свойства")
#         del self.__kg
#
#     def to_pounds(self):
#         return self.__kg * 2.205
#
#
# weight = KgToPounds(12)
# print(weight.kg, "кг =>", end=" ")
# print(weight.to_pounds(), "фунтов")
# weight.kg = 41
# print(weight.kg, "кг =>", end=" ")
# print(weight.to_pounds(), "фунтов")
# weight.kg = 'десять'  # Килограммы задаются только числами
# del weight.kg

# Закроем вспомогательные свойства - статическое

# class Point:
#     __count = 0  # _Point__count
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#         Point.__count += 1
#
#     # @staticmethod - первый способ через декоратор (новый)
#     def get_count():
#         return Point.__count
#
#     get_count = staticmethod(get_count)  # второй способ объявления
#
#
# p1 = Point(5, 10)
# p2 = Point(5, 10)
# p3 = Point(5, 10)
#
# # print(Point.__count) # AttributeError: type object 'Point' has no attribute '__count'
# # print(p1.__count)  # AttributeError: 'Point' object has no attribute '__count'
#
# print(Point.get_count())  # 3
# print(p1.get_count())  # TypeError: get_count() takes 0 positional arguments but 1 was given без @staticmethod # 3

# Для статических методов необязательно создавать экземпляр класса.
# import math
# import random


# class Change:
#     @staticmethod
#     def inc(x):
#         return x + 1
#
#     @staticmethod
#     def dec(x):
#         return x - 1
#
#
# print(Change.inc(10), Change.dec(10))  # 11 9
#
#
# # В ООП статические методы работают как отдельные функции без экземпляра класса:
# def inc(x):
#     return x + 1
#
#
# def dec(x):
#     return x - 1
#
#
# print(inc(10), dec(10))  # 11 9

# 14.04.2024

# Задача. Создайте класс для подсчёта максимума из четырёх аргументов (4, 5, 7, 9), минимума из четырёх аргументов,
# среднеарифметического из четырёх аргументов, факториала аргумента (5). Функциональность необходимо реализовать в виде
# статических методов.

# Минимальное число: 9
# Максимальное число: 3
# Среднее арифметическое: 6.0
# Факториал числа: 120

# Внутри класса все методы будут статическими
# class Numbers:
#     @staticmethod
#     def max(a, b, c, d):
#         mx = a  # 3
#         if b > mx:  # 5 > 3
#             mx = b  # 5
#         if c > mx:  # 7 > 5
#             mx = c  # 7
#         if d > mx:  # 9 > 7
#             mx = d  # 9
#         return mx
#
#     @staticmethod
#     def min(*args):
#         mn = args[0]
#         for i in args:
#             if i < mn:
#                 mn = i
#         return mn
#
#     @staticmethod
#     def average(*args):
#         return sum(args) / len(args)
#
#     @staticmethod
#     def factorial(n):
#         fact = 1
#         for i in range(1, n + 1):
#             fact *= i
#         return fact
#
#
# print("Максимальное число:", Numbers.max(3, 5, 7, 9))
# print("Минимальное число:", Numbers.min(3, 5, 7, 9))
# print("Среднее арифметическое:", Numbers.average(3, 5, 7, 9))
# print("Факториал числа:", Numbers.factorial(5))

# Программа для поиска и решения проблем с помощью методов классов

# class Date:
#     def __init__(self, day=0, month=0, year=0):
#         self.day = day
#         self.month = month
#         self.year = year
#
#     def string_to_db(self):
#         return f"{self.year}-{self.month}-{self.day}"
#
#
# string_date = "23.10.2024"
# day, month, year = map(int, string_date.split('.'))  # ['23', '10', '2024'] -> (map int) -> [23, 10, 2024] (*)
# print(day, month, year)  # day = 23 month = 10 year = 2024
# date = Date(day, month, year)  # Date(23, 10, 2024) (*)
# print(date.string_to_db())  # 2024-10-23

# Изменим код, чтобы не делать каждый раз разбиение элементов. Занесём (*) в метод.

# class Date:
#     def __init__(self, day=0, month=0, year=0):
#         self.day = day
#         self.month = month
#         self.year = year
#
#     def string_to_db(self):
#         return f"{self.year}-{self.month}-{self.day}"
#
#     @classmethod
#     def from_string(cls, date_as_string):
#         day, month, year = map(int, date_as_string.split('.'))  # [23, 10, 2024]
#         date = cls(day, month, year)  # data = Date(23, 10, 2024)
#         return date
#
#     @staticmethod  # (**)
#     def is_date_valid(date_as_string):
#         if date_as_string.count(".") == 2:
#             day, month, year = map(int, date_as_string.split('.'))
#             return day <= 31 and month <= 12 and year <= 3999
#
#
# dates = [
#     "23.10.2024",
#     "21/12/2023",
#     "01.01.2022",
#     "12.31.2021"
# ]
#
# for i in dates:
#     if Date.is_date_valid(i):
#         date = Date.from_string(i)
#         print(date.string_to_db())
#     else:
#         print(f"Неправильная дата или формат строки с датой")

# date1 = Date.from_string("23.10.2024")
# print(date1.string_to_db())
# # date2 = Date.from_string("21.12.2023")
# # print(date2.string_to_db())
# # Если дата приходит в другом формате:
# date2 = Date.from_string("21/12/2023")  # - ValueError: invalid literal for int() with base 10: '21/12/2023' -> (**)
# print(date2.string_to_db())

# Вспомним, создание экземпляра класса за пределами класса:
# data = Date(23, 10, 2024) - в задаче выше этого нет (не можем вызвать метод не у экземпляра класса) -> date1 и date2
# становятся экземплярами класса

# Решим задачу, совмещающую все изученные свойства и методы см ООП-теория.txt. Создать класс "Account",
# представляющий собой банковский счёт. Класс должен содержать:
# динамические свойства: фамилия владельца, номер счёта, процент начисления, сумма в рублях;
# статические свойства: курс рубля по отношению к доллару, курс рубля по отношению к евро;
# классовые методы: редактировать курс рубля по отношению к доллару, редактировать курс рубля по отношению к евро;
# статические методы: перевод суммы в доллары и евро;
# инициализатор: определяет динамические свойства класса и выводит информацию об открытом счёте;
# деструктор: выводит сообщение о том, что банковский счёт закрыт;
# методы: смена владельца счёта, снятие заданной суммы, начисление заданной суммы, начисление процентов, перевод в
# доллары и евро (в отличие от аналогичных статических методов, данные методы не принимают параметров),
# вывод информации о счёте; КАРТИНКА 1_2.JPG -> ВЫВОД

# class Account:
#     rate_usd = 0.013
#     rate_eur = 0.011
#     suffix = 'RUB'
#     suffix_usd = 'USD'
#     suffix_eur = 'EUR'
#
#     def __init__(self, surname, num, percent, value):
#         self.surname = surname
#         self.num = num
#         self.percent = percent
#         self.value = value
#         print(f"Счёт #{self.num} принадлежащий {self.surname} был открыт.")
#         print("*" * 50)
#
#     def __del__(self):  # магические методы пишутся вместе, хоть и данный метод отрабатывает в конце
#         print(f"Остаток средств с текущего счёта {self.value} был переведён на правопреемника")
#         self.value = 0
#         self.print_balance()
#         print("*" * 50)
#         print(f"Счёт #{self.num} принадлежащий {self.surname} был закрыт.")
#
#     @classmethod
#     def set_usd_rate(cls, rate):
#         cls.rate_usd = rate
#
#     @classmethod
#     def set_eur_rate(cls, rate):
#         cls.rate_eur = rate
#
#     @staticmethod
#     def convert(value, rate):
#         return value * rate
#
#     def convert_to_usd(self):
#         usd_val = Account.convert(self.value, Account.rate_usd)
#         print(f"Состояние счёта: {usd_val} {Account.suffix_usd}")
#
#     def convert_to_eur(self):
#         eur_val = Account.convert(self.value, Account.rate_eur)
#         print(f"Состояние счёта: {eur_val} {Account.suffix_eur}")
#
#     def print_balance(self):  # лучше написать ниже
#         print(f"Текущий баланс {self.value} {Account.suffix}")
#
#     def print_info(self):  # лучше написать ниже
#         print("Информация о счёте:")
#         print("-" * 20)
#         print(f"#{self.num}")
#         print(f"Владелец: {self.surname}")
#         self.print_balance()
#         print(f"Проценты: {self.percent:.0%}")  # 3% - 0 cимволов после точки
#         print("-" * 20)
#
#     def edit_owner(self, surname):
#         self.surname = surname
#
#     def add_percents(self):
#         self.value += self.value * self.percent
#         print("Проценты были успешно начислены")
#         self.print_balance()
#
#     def withdraw_money(self, val):
#         if val > self.value:
#             print(f"К сожалению, у вас нет {val} {Account.suffix}.")
#         else:
#             self.value -= val
#             print(f"{val} {Account.suffix} было успешно снято!")
#         self.print_balance()
#
#     def add_money(self, val):
#         self.value += val
#         print(f"{val} {Account.suffix} было успешно добавлено!")
#         self.print_balance()
#
#
# acc = Account("Долгих", "12345", 0.03, 1000)
# acc.print_info()
# acc.convert_to_usd()
# acc.convert_to_eur()
# print()
#
# Account.set_usd_rate(2)  # курс доллара изменился с 0.013 до 2 (13 до 2000)
# acc.convert_to_usd()
# Account.set_eur_rate(3)
# acc.convert_to_eur()
# print()
#
# acc.edit_owner("Дюма")
# acc.print_info()
# print()
#
# acc.add_percents()
# print()
#
# acc.withdraw_money(100)
# print()
#
# acc.withdraw_money(3000)
# print()
#
# acc.add_money(5000)
# print()
#
# acc.withdraw_money(3000)
# print()
#
# # acc.convert_to_usd()
# # acc.convert_to_eur()
# # print()  # перевести в доллары и евро

# import re
#
#
# class UserData:
#     def __init__(self, fio, old, ps, weight):
#         self.fio = fio
#         self.old = old
#         self.password = ps
#         self.weight = weight
#
#     @staticmethod
#     def verify_fio(fio):
#         if not isinstance(fio, str):
#             raise TypeError("ФИО должно быть строкой")  # выбросить исключение самостоятельно
#         f = fio.split()  # ['Волков-Смирнов', 'Игорь', 'Николаевич']
#         # print(f)
#         if len(f) != 3:
#             raise TypeError("Неверный формат ФИО")
#         letters = "".join(re.findall("[a-zа-яё-]", fio, re.IGNORECASE))
#         # print(letters)  # Волков-СмирновИгорьНиколаевич
#         # for s in f:
#         #     print(s.strip(letters))  # удаляем все символы шаблона в строке
#         for s in f:
#             if len(s.strip(letters)) != 0:
#                 raise TypeError("В ФИО можно использовать только буквы и дефис")
#
#     # Проверка на возраст
#     @staticmethod
#     def verify_old(old):
#         if not isinstance(old, int) or old < 14 or old > 120:
#             raise TypeError("Возраст должен быть числом в диапазоне от 14 до 120 лет")
#
#     # Проверка на вес -> вещественное число
#     @staticmethod
#     def verify_weight(w):
#         if not isinstance(w, float) or w < 20:
#             raise TypeError("Вес должен быть вещественным числом от 20 кг и выше")
#
#     @staticmethod
#     def verify_ps(ps):
#         if not isinstance(ps, str):
#             raise TypeError("Паспорт должен быть строкой")
#         s = ps.split()  # ['1234', '567890']
#         if len(s) != 2 or len(s[0]) != 4 or len(s[1]) != 6:
#             raise TypeError("Неверный формат паспорта")
#         for p in s:
#             if not p.isdigit():
#                 raise TypeError("Серия и номер паспорта должны быть числами")
#
#                 # изменять данные
#
#     @property
#     def fio(self):
#         return self.__fio
#
#     @fio.setter
#     def fio(self, fio):
#         self.verify_fio(fio)
#         self.__fio = fio
#
#     @property
#     def old(self):
#         return self.__old
#
#     @old.setter
#     def old(self, year):
#         self.verify_old(year)
#         self.__old = year
#
#     @property
#     def password(self):
#         return self.__password
#
#     @password.setter
#     def password(self, ps):
#         self.verify_ps(ps)
#         self.__password = ps
#
#     @property
#     def weight(self):
#         return self.__weight
#
#     @weight.setter
#     def weight(self, w):
#         self.verify_weight(w)
#         self.__weight = w
#
#
# p1 = UserData("Волков Игорь Николаевич", 26, "1234 567890", 80.8)
# p1.fio = "Соболев Игорь Николаевич"
# print(p1.fio)
# p1.old = 30
# p1.password = "0987 654321"
# p1.weight = 50.5
# print(p1.__dict__)  # '_UserData__fio'

# Занятие 24. 20.04.2024
# Наследование

# class Point(object):  # имя родителя, можно не указывать
# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#
# print(issubclass(Point, object))  # True Point наследуется от класса object
# print(issubclass(Point, list))  # False Point не наследуется от класса list

# Назначение наследования

# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self):
#         return f"({self.__x}, {self.__y})"  # маг. метод
#
#
# class Line:
#     def __init__(self, sp: Point, ep: Point, color: str = "red", width: int = 1):  # рекомендованные типы данных
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self._width = width
#
#     def draw_line(self) -> None:  # указываем тип возвращаемого значения (return)
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color} {self._width}")
#
#
# # Рисуем прямоугольник
# class Rect:
#     def __init__(self, sp: Point, ep: Point, color: str = "red", width: int = 1):
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self._width = width
#
#     def draw_rect(self) -> None:
#         print(f"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color} {self._width}")
#
#
# line = Line(Point(1, 2), Point(10, 20), "yellow", 5)
# # line.draw_line()  # Рисование линии: <__main__.Point object at 0x00000231FC3D6A90>, <__main__.Point object at
# # 0x00000231FC3D69A0>, red 1
# line.draw_line()  # Рисование линии: (1, 2), (10, 20), red 1 -> маг. метод, возвр. строковое представл. объекта
# # print(line)  # <__main__.Line object at 0x000001DD6F9F68B0> - не может показать как будет выглядеть экз класса
# rect = Rect(Point(30, 40), Point(70, 80))
# rect.draw_rect()  # Рисование прямоугольника: (30, 40), (70, 80), red 1

# Перепишем код с учётом DRY, избавившись от дублирования инициализаторов

# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self):
#         return f"({self.__x}, {self.__y})"
#
#
# class Prop:
#     def __init__(self, sp: Point, ep: Point, color: str = "red", width: int = 1):
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self.__width = width
#
#     # закрытое свойство нужно получить
#     def get_width(self):
#         return self.__width
#
#
# class Line(Prop):  # сделали, что Line наследуется от Prop
#     def draw_line(self) -> None:
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color} {self.get_width()}")  # обратиться к закрытому
# # свойству
#
#
# class Rect(Prop):
#     def draw_rect(self) -> None:
#         print(f"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color} {self.get_width()}")
#
#
# line = Line(Point(1, 2), Point(10, 20), "yellow", 5)
# # line.draw_line()
# line.draw_line()
# # print(line)
# rect = Rect(Point(30, 40), Point(70, 80))
# rect.draw_rect()
#
# print(Line.__dict__)  # {'__module__': '__main__', 'draw_line': <function Line.draw_line at 0x000002AE7AC1D9D0>,
# # '__doc__': None}
# print(
#     Prop.__dict__)  # {'__module__': '__main__', '__init__': <function Prop.__init__ at 0x000001E8A632D940>,
#     '__dict__' : <attribute '__dict__' of 'Prop' objects>, '__weakref__': <attribute '__weakref__' of 'Prop' objects>,
# # '__doc__': None}
# print(line._sp)  # (1, 2) - корректно выводит координату, но нежелательно использовать за пределами класса,
# # предназначены для использования внутри класса

# Напишем свой инициализатор для line

# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self):
#         return f"({self.__x}, {self.__y})"
#
#
# class Prop:
#     def __init__(self, sp: Point, ep: Point, color: str = "red", width: int = 1):
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self.__width = width
#
#     def get_width(self):
#         return self.__width
#
#
# class Line(Prop):
#     def __init__(self, *args):
#         print("Переопределённый инициализатор Line")  # свой инициализатор
#         # Prop.__init__(self, *args) другой способ доступа ->
#         super().__init__(*args)
#
#     def draw_line(self) -> None:
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color} {self.get_width()}")
#
#
# class Rect(Prop):
#     def draw_rect(self) -> None:
#         print(f"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color} {self.get_width()}")
#
#
# line = Line(Point(1, 2), Point(10, 20), "yellow", 5)
# line.draw_line()
# rect = Rect(Point(30, 40), Point(70, 80))
# rect.draw_rect()
#
# print(Line.__dict__)
# print(Prop.__dict__)
# print(line._sp)

# Пусть родительский класс - это фигура, а от него наследуются дочерние. Будем находить площадь фигуры.

# class Figure:
#     def __init__(self, color):
#         self.__color = color
#
#     @property
#     def color(self):
#         return self.__color
#
#     @color.setter
#     def color(self, c):
#         self.__color = c
#
#
# class Rectangle(Figure):
#     def __init__(self, width, height, color):
#         super().__init__(color)
#         self.__width = width
#         self.__height = height
#
#     def area(self):
#         print(f"Прямоугольник {self.color}. Площадь: ", end="")
#         return self.__width * self.__height
#
#
# rect = Rectangle(10, -20, "green")
# print(rect.area())


# 21.04.2024
# Наследование от встроенных типов данных

# class Vector(list):  # [1, 2, 3] => "1 2 3"
#     def __str__(self):
#         return " ".join(map(str, self))  # 1 2 3
#
#
# v = Vector([1, 2, 3])
# v.append(4)  # 1 2 3 4 <- пользуемся свойствами и методами родительского класса
# print(v)
# print(type(v))  # <class '__main__.Vector'>

# Перегрузка методов (для того, чтобы один и тот же метод работал по разному с разными значениями)

# class Point:
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#     def __str__(self):
#         return f"x = {self.x}, y = {self.y}"
#
#     def set_coord(self, x=None, y=None):  # Перегрузка -> один метод создаёт три варианта принимаемых аргументов
#         if y is None:  # NoneType
#             self.x = x
#         elif x is None:
#             self.y = y
#         else:
#             self.x = x
#             self.y = y
#
#
# p1 = Point(10, 20)
# print(p1)  # x = 10, y = 20
# p1.set_coord(1, 3)
# print(p1)  # x = 1, y = 3
# p1.set_coord(5)  # x = 5, y = 3
# print(p1)
# p1.set_coord(y=30)  # x = 5, y = 30
# print(p1)

# Абстрактные методы. Заставим делать реализацию draw во всех классах, наследуемых от Prop

# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self):
#         return f"({self.__x}, {self.__y})"
#
#
# class Prop:
#     def __init__(self, sp: Point, ep: Point, color: str = "red", width: int = 1) -> None:
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self._width = width
#
#     def draw(self):  # абстрактный метод
#         raise NotImplemented("В дочернем классе должен быть определён метод draw()")  # ошибка не реализованного
#         метода
#
#
# class Line(Prop):
#     def draw(self):
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color} {self._width}")
#
#
# class Rect(Prop):
#     def draw(self):
#         print(f"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color} {self._width}")
#
#
# class Ellipse(Prop):
#     # def draw(self):
#     #     print(f"Рисование эллипса: {self._sp}, {self._ep}, {self._color} {self._width}")
#     ...
#
#
# figs = list()
# figs.append(Line(Point(0, 0), Point(10, 10)))
# figs.append(Line(Point(10, 10), Point(20, 10)))
# figs.append(Rect(Point(50, 50), Point(100, 100)))
# figs.append(Ellipse(Point(-10, -10), Point(10, 10)))
#
# for f in figs:
#     f.draw()

# Пример (абстрактные + перегрузка)

# Создайте базовый класс "Стол" и дочерние: "Прямоугольные столы" и "Круглые столы". Через инициализатор базового класса
# передайте размер поверхности стола: для прямоугольного - ширина и длина, для круглого - радиус.
# В дочерних классах реализуйте метод вычисления площади поверхности стола.

# {'_width': 20, '_length': 10}
# 200
# {'_width': 20, '_length': 20}
# 400
# {'_radius': 20}
# 1256.64

# from math import pi
#
#
# class Table:
#     def __init__(self, width=None, length=None, radius=None):  # перегрузка метода
#         if radius is None:
#             if length is None:
#                 self.width = self.length = width
#             else:
#                 self.width = width
#                 self.length = length
#         else:
#             self.radius = radius
#
#     def calc_area(self):  # абстрактный метод - вспомогательный (не реал. метод с каким-то функционалом, выбр. искл.)
#         raise NotImplementedError("В дочернем классе должен быть реализован метод calc_area()")
#
#
# class SqTable(Table):
#     def calc_area(self):
#         return self.width * self.length
#
#
# class RoundTable(Table):
#     def calc_area(self):
#         return round(pi * self.radius ** 2, 2)
#
#
# t = SqTable(20, 10)
# print(t.__dict__)
# print(t.calc_area())
#
# t1 = SqTable(20)
# print(t1.__dict__)
# print(t1.calc_area())
#
# t2 = RoundTable(radius=20)
# print(t2.__dict__)
# print(t2.calc_area())

# Абстрактный класс - класс, который содержит хотя бы один абстрактный метод

# from abc import ABC, abstractmethod
#
#
# class Chess(ABC):  # абстрактный класс
#     def draw(self):  # метод
#         print("Нарисовал шахматную фигуру")
#
#     @abstractmethod  # абстрактный метод
#     def move(self):
#         print("Метод move() в базовом классе")
#
#
# class Queen(Chess):
#     def move(self):
#         super().move()  # получить доступ к move()
#         print("Ферзь перемещён на е2е4")
#
#
# q = Queen()
# q.draw()
# q.move()
#
# # q = Chess()  # экземпляр абстрактного класса создать нельзя

# Создайте базовый абстрактный класс "Валюта" для работы с денежными суммами.
# Определите методы перевода значения в рубли и вывода на экран

# Реализуйте производные классы "Доллар" и "Евро" с собственными методами перевода в рубли и вывода на экран.

# * решите самостоятельно, какими свойствами будет обладать каждый из классов, и какие методы необходимо сделать
# абстрактными

# **************************************************
# 5 USD = 370.80 RUB
# 10 USD = 741.60 RUB
# 50 USD = 3708.00 RUB
# 100 USD = 7616.00 RUB
# **************************************************
# 5 EUR = 450.70 RUB
# 10 EUR = 901.40 RUB
# 50 EUR = 4507.00 RUB
# 100 EUR = 9014.00 RUB

# from abc import ABC, abstractmethod
#
#
# class Currency(ABC):
#     suffix = "RUB"
#
#     def __init__(self, value):
#         self.value = value
#
#     @abstractmethod
#     def convert_to_rub(self):
#         pass
#
#     def print_value(self):
#         print(self.value, end=" ")
#
#     def draw(self):
#         print(f"= {self.convert_to_rub():.2f} {Currency.suffix}")  # не округление - 2 символа после точки
#
#
# class Dollar(Currency):
#     rate_to_rub = 74.16
#     suffix = 'USD'
#
#     def convert_to_rub(self):
#         return self.value * Dollar.rate_to_rub
#
#     def print_value(self):
#         super().print_value()
#         print(Dollar.suffix, end=" ")
#
#
# class Euro(Currency):
#     rate_to_rub = 90.14
#     suffix = 'EUR'
#
#     def convert_to_rub(self):
#         return self.value * Euro.rate_to_rub
#
#     def print_value(self):
#         super().print_value()
#         print(Euro.suffix, end=" ")
#
#
# d = [Dollar(5), Dollar(10), Dollar(50), Dollar(100)]
# e = [Euro(5), Euro(10), Euro(50), Euro(100)]
#
# print('*' * 50)
# for elem in d:
#     elem.print_value()
#     elem.draw()
#
# print('*' * 50)
# for elem in e:
#     elem.print_value()
#     elem.draw()

# Интерфейс - набор абстрактных классов

# from abc import ABC, abstractmethod
#
#
# class Father(ABC):
#     @abstractmethod
#     def display1(self):
#         pass
#
#     @abstractmethod
#     def display2(self):
#         pass
#
#
# class Child(Father):
#     def display1(self):
#         print("Display_1")
#
#
# class GrandChild(Child):
#     def display2(self):
#         print("Display_2")


# gc = GrandChild()
# gc.display2()
# gc.display1()

# Вложенные классы

# def outer():
#     x = 5
#
#     def inner():
#         y = 10
#         print(x)
#
#     inner()
#     print(y)  # не видна (изнутри наружу -> функция)
#
#
# outer()

# class MyOuter:
#     age = 18
#
#     def __init__(self, name):
#         self.name = name
#
#     @staticmethod
#     def outer_method():
#         print("outer_method")
#
#     def instance_method(self):  # метод экземпляра класса
#         print("instance_method")
#
#     class MyInner:
#         def __init__(self, inner_name, obj):
#             self.inner_name = inner_name
#             self.obj = obj
#
#         def inner_method(self):
#             print("Метод во вложенном классе", MyOuter.age, self.obj.name)  # к статич. св-вам обращаемся через
#             # имя класса во вложенном
#             MyOuter.outer_method()
#             self.obj.instance_method()
#
#
# out = MyOuter("внешний")
# inner = out.MyInner("внутренний", out)  # -> другой способ
# # inner = MyOuter.MyInner("внутренний", out)
# print(inner.inner_name)
# inner.inner_method()

# Обратная ситуация

# class Color:
#
#     def __init__(self):
#         self.name = "Green"
#         self.lg = self.LightGreen()
#
#     def show(self):  # доступ ко вложенному классу -> внутрь
#         print("Name:", self.name)
#
#     class LightGreen:
#         def __init__(self):
#             self.name = "Light Green"
#
#         def display(self):
#             print("Name:", self.name)
#
#
# outer = Color()
# outer.show()
# g = outer.lg
# g.display()

# 27.04.2024

# Создадим класс, содержащий два вложенных класса, один из них сделаем независимым

# class Intern:  # независимый класс
#     def __init__(self):
#         self.name = "Smith"
#         self.id = "657"
#
#     def show(self):
#         print("Name:", self.name)
#         print("Id:", self.id)
#         print("*" * 20)
#
#
# class Employee:
#     def __init__(self):
#         self.name = "Employee"
#         self.intern = Intern()  # 2-й способ -> комментируем
#         self.head = self.Head()
#
#     def show(self):
#         print("Name:", self.name, self.intern.id)
#         print("*" * 20)
#
#     class Head:
#         def __init__(self):
#             self.name = "Boss"
#             self.id = "789"
#
#         def show(self):
#             print("Name:", self.name)
#             print("Id:", self.id)
#             print("*" * 20)
#
#
# outer = Employee()
# outer.show()
#
# d1 = outer.intern
# d2 = outer.head
# # d1 = Employee.Intern()  # 2-й способ
# # d2 = Employee.Head()
#
# d1.show()
# d2.show()

# Назначение вложенных классов

# class Computer:
#     def __init__(self):
#         self.name = "PC001"
#         self.os = self.OS()
#         self.cpu = self.CPU()
#
#     class OS:
#         def system(self):
#             return "Window"
#
#     class CPU:
#         def make(self):
#             return "Intel"
#
#         def model(self):
#             return "Core-i7"
#
#
# comp = Computer()
# my_os = comp.os
# my_cpu = comp.cpu
# print(comp.name)
# print(my_os.system())
# print(my_cpu.make())
# print(my_cpu.model())

# class Cat:
#     def __init__(self, name):
#         self.name = name
#
#     def __repr__(self):
#         return f"{self.__class__}: {self.name}"  # <class '__main__.Cat'>: Пушок
#
#     def __str__(self):
#         return f"{self.name}"  # Пушок - отработает первым
#
#
# # cat = Cat("Пушок")
# cat = [Cat("Пушок")]  # [<class '__main__.Cat'>: Пушок] -> больше чем один(коллекция), консоль -> repr
# print(cat)

# class Point:
#     def __init__(self, *args):
#         self.__coord = args
#
#     def __len__(self):
#         return len(self.__coord)
#
#
# p = Point(5, 7)
# print(len(p))  # 2 - точка в двумерном
# p1 = Point(4, 6, 8)
# print(len(p1))  # 3 - точка в трёхмерном

# class Point:
#     __slots__ = ('x', 'y')
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#
# p1 = Point(10, 20)
# print(p1.x, p1.y)
# p1.z = 30 # AttributeError: 'Point' object has no attribute 'z' -> нет в slots
# print(p1.z)

# Рассмотрим
# class Point:
#     __slots__ = ('x', 'y')
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#
# class Point2D:
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#
# p1 = Point(10, 20)
# p2 = Point2D(10, 20)
# # print(p1.__dict__)  # AttributeError: 'Point' object has no attribute '__dict__' dict там где нет slots
# print("p1 =", p1.__sizeof__())  # с коллекцией slots -> p1 = 32
# print("p2 =", p2.__sizeof__())  # без коллекции slots -> p2 = 32
# print("p2 =", p2.__sizeof__() + p2.__dict__.__sizeof__())  # p2 = 120 - меньше быстродействия
# # print(p2.__dict__)  # {'x': 10, 'y': 20}


# При наследовании

# class Point:
#     __slots__ = ('x', 'y')
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#
# class Point3D(Point):  # slots не наследуется  # pt3.z = 30 - можно создать и вывести
#     __slots__ = ('z',)
#
#
# pt = Point(1, 2)
# pt3 = Point3D(10, 20)
# pt3.z = 30
# print(pt3.z)  # 30
# print(pt3.x, pt3.y, pt3.z)  # 10 20 30

# Множественное наследование (несколько родительских элементов)

# class Creature:
#     def __init__(self, name):
#         self.name = name
#
#
# class Animal(Creature):
#     def sleep(self):
#         print(self.name + " is sleeping")
#
#
# class Pet(Creature):
#     def play(self):
#         print(self.name + " is playing")
#
#
# class Dog(Animal, Pet):
#     def bark(self):
#         print(self.name + " is barking")
#
#
# dog = Dog("Buddy")
# dog.bark()  # Buddy is barking
# dog.sleep()  # Buddy is sleeping
# dog.play()  # Buddy is playing

# Пример 1
# class A:
#     def __init__(self):
#         print("Инициализатор класса A")
#
#
# class B(A):
#     def __init__(self):
#         print("Инициализатор класса B")
#
#
# class C(A):
#     def __init__(self):
#         print("Инициализатор класса C")
#
#
# class D(B, C):
#     # def __init__(self):
#     #     print("Инициализатор класса D")
#     pass  # Инициализатор класса B
#
#
# d = D()  # Инициализатор класса D
# print(D.mro())  # [<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>,
# # <class '__main__.A'>, <class 'object'>]
# print(D.__mro__)  # (<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>,
# # <class '__main__.A'>, <class 'object'>) - последовательность вызова

# Пример 2
# class A:
#     def __init__(self):
#         print("Инициализатор класса A")
#
#
# class AA:
#     def __init__(self):
#         print("Инициализатор класса AA")
#
#
# class B(A):
#     def __init__(self):
#         print("Инициализатор класса B")
#
#
# class C(AA):
#     def __init__(self):
#         print("Инициализатор класса C")
#
#
# class D(B, C):
#     # def __init__(self):
#     #     print("Инициализатор класса D")
#     pass
#
#
# d = D()  # Инициализатор класса B
# print(D.mro()) # [<class '__main__.D'>, <class '__main__.B'>, <class '__main__.A'>, <class '__main__.C'>,
# # <class '__main__.AA'>, <class 'object'>]
# # print(D.__mro__)

# Вернёмся к примеру 1, когда был один и тот же родитель и у B и у C

# class A:
#     def __init__(self):
#         print("Инициализатор класса A")
#
#
# class B(A):
#     def __init__(self):
#         # C.__init__(self)
#         super().__init__()  # Инициализатор класса C -> на уровень выше
#         print("Инициализатор класса B")
#
#
# class C(A):
#     def __init__(self):
#         print("Инициализатор класса C")
#
#
# class D(B, C):
#     # def __init__(self):
#         # # super().__init__()
#         # # super().__init__() -> Доступ к C
#         # C.__init__(self)
#         # B.__init__(self)
#         # print("Инициализатор класса D")
#         pass
#
#
# d = D()
# # Инициализатор класса B
# # Инициализатор класса B
# # Инициализатор класса D - не получаем доступ к С
# print(D.mro())
# #  -> Доступ к C
# # Инициализатор класса C
# # Инициализатор класса B
# # Инициализатор класса D
# # [<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>]

# Реализация множественного наследования с решением проблем при его применении

# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self):
#         return f"({self.__x}, {self.__y})"
#
#
# class Styles:
#     def __init__(self, color="red", width=1):
#         print("Инициализатор Styles")
#         self._color = color
#         self._width = width
#
#
# class Pos:
#     def __init__(self, sp: Point, ep: Point, *args):
#         self._sp = sp
#         self._ep = ep
#         # Styles.__init__(self, *args) -> корректный синтаксис ->
#         super().__init__(*args)
#
#
# class Line(Pos, Styles):
#     def draw(self):
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# l1 = Line(Point(10, 10), Point(100, 100), "green", 5)
# l1.draw()

# Сложности множественного наследования - не вызывается инициализатор

# Миксины(могут избавить от дублирования кода, например добавление id)

# class Goods:
#     def __init__(self, name, weight, price):
#         super().__init__()
#         self.name = name
#         self.weight = weight
#         self.price = price
#
#     def print_info(self):
#         print(f"{self.name}, {self.weight}, {self.price}")
#
#
# class MixinLog:
#     ID = 0
#
#     def __init__(self):
#         MixinLog.ID += 1
#         self.id = self.ID
#
#     def save_sell_log(self):
#         print(f"{self.id}: товар был продан в 00:00 часов")
#
#
# class Notebook(Goods, MixinLog):
#     pass
#
#
# n = Notebook("HP", 1.5, 35000)
# n.print_info()
# n.save_sell_log()

# 28.04.2024

# Перегрузка операторов

# + - * / // % - операторы
# "==" ">" "<" ">=" "<="
# поведение квадратных скобок []

# Имеем класс, который по кол-ву секунд возвращает в отформатированном формате время. Будем работать с его экземплярами
# Число секунд в одном дне: 24 * 60 * 60 = 86400 с

# class Clock:
#     __DAY = 86400
#
#     def __init__(self, sec: int):
#         if not isinstance(sec, int):
#             raise ValueError("Секунды должны быть целым числом")
#         self.sec = sec % self.__DAY
#
#     def get_format_time(self):
#         s = self.sec % 60
#         m = (self.sec // 60) % 60
#         h = (self.sec // 3600) % 24
#         return f"{Clock.__get_form(h)}:{Clock.__get_form(m)}:{Clock.__get_form(s)}"
#
#     @staticmethod
#     def __get_form(
#             x):  # не можем обратиться за пределами класса (два подчёркивания), он и не нужен (добавлять "0" к числу)
#         return str(x) if x > 9 else "0" + str(x)
#
#     def __add__(self, other):  # для сложения -> перегрузка оператора для "+"
#         if not isinstance(other, Clock):
#             raise ArithmeticError("Правый операнд должен быть типом Clock")
#         return Clock(self.sec + other.sec)
#
#     def __sub__(self, other):  # для вычитания -> перегрузка оператора для "-"
#         if not isinstance(other, Clock):
#             raise ArithmeticError("Правый операнд должен быть типом Clock")
#         return Clock(self.sec - other.sec)
#
#     def __eq__(self, other):
#         if not isinstance(other, Clock):
#             raise ArithmeticError("Правый операнд должен быть типом Clock")
#         return self.sec == other.sec
#
#     def __ne__(self, other):
#         return not self.__eq__(other)
#     # if not isinstance(other, Clock):
#     #     raise ArithmeticError("Правый операнд должен быть типом Clock")
#     # return self.sec != other.sec
#
#
# c1 = Clock(100)
# c2 = Clock(200)
# print(c1.get_format_time())  # 0:1:40; c __get_form(x) 00:01:40
# print(c2.get_format_time())  # 00:03:20
# # c3 = c1 + c2  # только тип данных Clock
# # print(c3.get_format_time())  # 00:05:00 Проверим работу "+=" - перезапись c1:
# # # c1 += c2
# # c4 = c1 + c2 + c3  # работает за счёт __add__
# # print(c4.get_format_time())  # 00:10:00
# # c5 = c4 - c2
# # print(c5.get_format_time())  # 00:06:40
# # if c1 == c2:
# #     print("Время равно")
# # else:
# #     print("Время разное")
# if c1 != c2:
#     print("Время разное")
# else:
#     print("Время равно")

# Смотрим назначение перегрузки операторов. Задача. Написать программу разведение котов и кошек,
# с предполагаемым количеством котят

# Tom is good boy!!!
# Elsa is good girl!!!
# [Cat(name='No name', age=0, pol='M'), Cat(name='No name', age=0, pol='F']

# from random import choice, randint
#
#
# class Cat:
#     def __init__(self, name, age, pol):
#         self.name = name
#         self.age = age
#         self.pol = pol
#
#     def __str__(self):
#         if self.pol == "M":
#             return f"{self.name} is good boy!!!"
#         elif self.pol == "F":
#             return f"{self.name} is good girl!!!"
#         else:
#             return f"{self.name} is good Kitty"
#
#     def __repr__(self):
#         return f"Cat(name= '{self.name}', age={self.age}, pol='{self.pol}')"
#
#     def __add__(self, other):
#         if self.pol != other.pol:
#             return [Cat("No name", 0, choice(['M', 'F'])) for _ in range(randint(1, 5))]  # от 1 до 5
#         else:
#             raise TypeError("Types are not supported!")  # если не разнополые
#
#
# cat1 = Cat("Tom", 4, "M")
# cat2 = Cat("Else", 5, "F")
# cat3 = Cat("Murzic", 3, "M")
# print(cat1)
# print(cat2)
# # print(cat3)
# print(cat1 + cat2)
# # print(cat1 + cat3)

# Перегрузка оператора []

# class Student:
#     def __init__(self, name, *args):
#         self.name = name
#         self.marks = list(args)
#
#     def __getitem__(self, item):  # (*)
#         if 0 <= item < len(self.marks):
#             return self.marks[item]
#         else:
#             raise IndexError("Неверный индекс")
#
#     def __setitem__(self, key, value):
#         if not isinstance(key, int) or key < 0:
#             raise TypeError("Индекс должен быть целым положительным числом")
#         # (**)
#         if key >= len(self.marks):
#             off = key + 1 - len(self.marks)  # 10 + 1 - 5 => 6
#             self.marks.extend([None] * off)  # None -> чем-то в промежутке заполняет данные
#         self.marks[key] = value
#
#     def __delitem__(self, key):
#         if not isinstance(key, int):
#             raise TypeError("Индекс должен быть целым числом")
#         del self.marks[key]  # удалить оценку
#         # self.marks[key] = None  # перезаписать оценку на None
#
#
# s1 = Student("Сергей", 5, 5, 3, 4, 5)
# # print(s1.marks[2])  # 3
# # print(s1[2])  # 3  # (*)
# print(s1[2])  # IndexError: tuple index out of range от 0 до 4-го
# # s1[2] = 4 # [5, 5, 4, 4, 5]
# s1[10] = 4  # IndexError: list assignment index out of range (**) -> [5, 5, 3, 4, 5, None, None, None, None, None, 4]
# del s1[2]  # удаление [5, 5, 4, 5, None, None, None, None, None, 4]
# print(s1.marks)
#
# a = [5, 5, 3, 4, 5]
# # ch = [None] * 5
# # print(ch)
# a.extend([None] * 5)
# print(a)

# Получим по отдельности часы, минуты и секунды и при необходимости установить в них новые значения
# class Clock:
#     __DAY = 86400
#
#     def __init__(self, sec: int):
#         if not isinstance(sec, int):
#             raise ValueError("Секунды должны быть целым числом")
#         self.sec = sec % self.__DAY
#
#     def get_format_time(self):
#         s = self.sec % 60
#         m = (self.sec // 60) % 60
#         h = (self.sec // 3600) % 24
#         return f"{Clock.__get_form(h)}:{Clock.__get_form(m)}:{Clock.__get_form(s)}"
#
#     @staticmethod
#     def __get_form(x):
#         return str(x) if x > 9 else "0" + str(x)
#
#     def __getitem__(self, item):
#         if not isinstance(item, str):
#             raise ValueError("Ключ должен быть строкой")
#
#         if item == "hour":
#             return self.sec // 3600 % 24
#         if item == "min":
#             return self.sec // 60 % 60
#         if item == "sec":
#             return self.sec % 60
#
#     def __setitem__(self, key, value):
#         if not isinstance(key, str):
#             raise ValueError("Ключ должен быть строкой")
#
#         if not isinstance(value, int):
#             raise ValueError("Значение должно быть числом")
#
#         s = self.sec % 60
#         m = (self.sec // 60) % 60
#         h = (self.sec // 3600) % 24
#
#         if key == "hour":
#             self.sec = s + 60 * m + value * 3600
#         if key == "min":
#             self.sec = s + 60 * value + h * 3600
#         if key == "sec":
#             self.sec = value + 60 * m + h * 3600
#
#
# c1 = Clock(80000)
# print(c1.get_format_time())
#
# c1["hour"] = 15
# c1["min"] = 65
# c1["sec"] = 42
# print(c1["hour"], c1["min"], c1["sec"])  # оператор [] будем перегружать
# print(c1.get_format_time())  # 16:05:20 при 15 часах и 65 минутах -> пересчиталось

# 04.05.2024

# Пример полиморфизма -> создаём 3 класса

# class Rectangle:
#     def __init__(self, w, h):
#         self.w = w
#         self.h = h
#
#     def get_perimeter(self):
#         return 2 * (self.w + self.h)
#
#
# class Square:
#     def __init__(self, a):
#         self.a = a
#
#     def get_perimeter(self):
#         return 4 * self.a
#
#
# class Triangle:
#     def __init__(self, a, b, c):
#         self.a = a
#         self.b = b
#         self.c = c
#
#     def get_perimeter(self):
#         return self.a + self.b + self.c
#
#
# r1 = Rectangle(1, 2)
# r2 = Rectangle(3, 4)
#
# s1 = Square(10)
# s2 = Square(20)
#
# t1 = Triangle(1, 2, 3)
# t2 = Triangle(4, 5, 6)
#
# shape = [r1, r2, s1, s2, t1, t2]  # Оптимизируем вызов функции get_perimeter -> чтобы не писать её вызов шесть раз:
#
# for g in shape:
#     print(g.get_perimeter())  # полиморфизм - работает по разному с разными экземплярами класса
# # 6 <- 2 * (1 + 2)
# # 14 <- 2 * (3 + 4)
# # 40 <- 4 * 10
# # 80 <- 4 * 20
# # 6 <- 1 + 2 + 3
# # 15 <- 4 + 5 + 6

# Пример 2. Полиморфизм. Создайте два класса: Cat и Dog. Реализуйте методы: info (информация о питомце) и make_sound
# (какой звук издаёт данный питомец). В цикле введите методы классов.

# Я кот. Меня зовут Пушок. Мой возраст 2.5.
# Пушок мяукает
# Я собака. Меня зовут Мухтар. Мой возраст 4.
# Мухтар гавкает

# class Cat:
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#
#     def info(self):
#         print(f"Я кот. Меня зовут {self.name}. Мой возраст {self.age}.")
#
#     def make_sound(self):
#         print(f"{self.name} мяукает.")
#
#
# class Dog:
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#
#     def info(self):
#         print(f"Я собака. Меня зовут {self.name}. Мой возраст {self.age}.")
#
#     def make_sound(self):
#         print(f"{self.name} гавкает.")
#
#
# cat = Cat("Пушок", 2.5)
# dog = Dog("Мухтар", 4)
#
# for animal in (cat, dog):
#     animal.info()
#     animal.make_sound()

# Оптимизируем код, написанный выше

# from abc import ABC, abstractmethod
#
#
# class Animal(ABC):
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#
#     @abstractmethod
#     def info(self):
#         print(f"Меня зовут {self.name}. Мой возраст {self.age}.")
#
#     @abstractmethod
#     def make_sound(self):
#         ...
#
#
# class Cat(Animal):  # наследование
#     def info(self):
#         print(f"Я кот.", end=" ")
#         super().info()
#
#     def make_sound(self):
#         print(f"{self.name} мяукает.")
#
#
# class Dog(Animal):  # наследование
#     def info(self):
#         print(f"Я собака.", end=" ")
#         super().info()
#
#     def make_sound(self):
#         print(f"{self.name} гавкает.")
#
#
# cat = Cat("Пушок", 2.5)
# dog = Dog("Мухтар", 4)
#
# for animal in (cat, dog):  # полиморфизм
#     animal.info()
#     animal.make_sound()

# Пример. Создать иерархию классов: Human (Человек), Student (Студент), Teacher (Преподаватель) и Graduate (Дипломник).
# Создать список группы представителей данной иерархии, вывести информацию о каждом участнике.

# Батодалаев Даши 16 ГК Web_011 5
# Загидуллин Линар 32 ЗПО PD_011 5
# Шугани Сергей 15 РПО PD_011 5 Защита персональных данных
# Даньшин Андрей 38 Астрофизика 110
# Маркин Даниил 17 ГК Python_011 5
# Башкиров Алексей 45 Разработка приложений 20

# class Human:
#     def __init__(self, surname, name, age):
#         self.surname = surname
#         self.name = name
#         self.age = age
#
#     def info(self):
#         print(f"\n{self.surname} {self.name} {self.age}", end=" ")
#
#
# class Student(Human):
#     def __init__(self, surname, name, age, speciality, group, rating):
#         super().__init__(surname, name, age)
#         self.speciality = speciality
#         self.group = group
#         self.rating = rating
#
#     def info(self):
#         super().info()
#         print(f"{self.speciality} {self.group} {self.rating}", end=" ")
#
#
# class Teacher(Human):
#     def __init__(self, surname, name, age, speciality, skill):
#         super().__init__(surname, name, age)
#         self.speciality = speciality
#         self.skill = skill
#
#     def info(self):
#         super().info()
#         print(f"{self.speciality} {self.skill}", end="")
#
#
# class Graduate(Student):
#     def __init__(self, surname, name, age, speciality, group, rating, topic):
#         super().__init__(surname, name, age, speciality, group, rating)
#         self.topic = topic
#
#     def info(self):
#         super().info()
#         print(f"{self.topic}", end="")
#
#
# group = [
#     Student("Батодалаев", "Даши", 16, "ГК", "Web_011", 5),
#     Student("Загидуллин", "Линар", 32, "РПО", "PD_011", 5),
#     Graduate("Шугани", "Сергей", 15, "РПО", "PD_011", 5, "Защита персональных данных"),
#     Teacher("Даньшин", "Андрей", 38, "Астрофизика", 110),
#     Student("Маркин", "Даниил", 17, "ГК", "Python_011", 5),
#     Teacher("Башкиров", "Алексей", 45, "Разработка приложений", 20)
# ]
# for i in group:
#     i.info()

# Функторы - объекты класса, которые можно выполнять как функции (перегрузка круглых скобок). Посчитаем,
# сколько раз вызвали экземпляры класса как функцию

# class Counter:
#     def __init__(self):
#         self.__count = 0
#
#     def __call__(self, *args, **kwargs):  # сделать Counter вызываемым объектом
#         self.__count += 1
#         print(self.__count)
#
#
# c1 = Counter()
# c1()  # перегрузка круглых скобок # 1 -> позволяет создавать декораторы на основе функций
# c1()  # 2
# c1()  # 3
# c1()  # 4
# c1()  # 5

# Замыкание на функциях. Имеем предложение, откуда будем удалять слава и справа перечень каких-либо символов.

# def string_strip(chars):
#     def call(string):
#         if not isinstance(string, str):
#             raise ValueError("Аргумент должен быть строкой")
#         return string.strip(chars)  # удалил пробелы слева и справа
#
#     return call  # замыкание - возвращает вложенную функцию, но не вызывает
#
#
# s1 = string_strip("?:!.; ")  # удалил знаки
# print(s1(" Hello World!  "))
#
#
# # Работа strip
# # print(" ? Hello World!  ".strip("?:!.; "))
#
# # Та же задача, замыкание на классах
#
# class StringStrip:
#     def __init__(self, chars):
#         self.__chars = chars
#
#     def __call__(self, string):  # *args, **kwargs
#         if not isinstance(string, str):
#             raise ValueError("Аргумент должен быть строкой")
#         return string.strip(self.__chars)
#
#
# s2 = StringStrip("?:!.; ")
# print(s2(" Hello World! ; "))
#
#
# # С *args, **kwargs
#
# class StringStrip1:
#     def __init__(self, chars):
#         self.__chars = chars
#
#     def __call__(self, *args, **kwargs):
#         if not isinstance(args[0], str):  # нулевой индекс = т. к. приходит один аргумент
#             raise ValueError("Аргумент должен быть строкой")
#         return args[0].strip(self.__chars)
#
#
# s3 = StringStrip("?:!.; ")
# print(s3(" Hello World! ; "))

# Функция как декоратор

# def my_decorator(fn):
#     def wrap():
#         print("Перед вызовом функции")
#         fn()
#         print("После вызова функции")
#
#     return wrap
#
#
# @my_decorator  # выводит текст перед и после func
# def func():
#     print("func")
#
#
# func()


# Класс как декоратор (принцип как замыкание):

# class MyDecorator:
#     def __init__(self, fn):
#         self.fn = fn
#
#     def __call__(self):
#         print("Перед вызовом функции")
#         self.fn()
#         print("После вызова функции")
#
#
# @MyDecorator
# def func1():
#     print("func")
#
#
# func1()

# Пусть функция принимает и возвращает значение

# class MyDecorator:
#     def __init__(self, fn):
#         self.fn = fn
#
#     def __call__(self, a, b):
#         # print("Перед вызовом функции")
#         res = self.fn(a, b)
#         # print("После вызова функции")
#         return "Перед вызовом функции\n" + str(res) + "\nПосле вызова функции"
#
#
# @MyDecorator
# def func1(a, b):
#     return a * b
#
#
# print(func1(2, 5))

# Если нужно использовать результат

# class MyDecorator:
#     def __init__(self, fn):
#         self.fn = fn
#
#     def __call__(self, a, b):
#         res = self.fn(a, b)
#         print("Перед вызовом функции\n" + str(res) + "\nПосле вызова функции")
#         return res
#
#
# @MyDecorator
# def func1(a, b):
#     return a * b
#
#
# print(func1(2, 5) * 2)  # 20

# Задача. Создать класс Power, который будет декорировать функцию. Функция возвращает результат умножения
# двух чисел (a = 2, b = 3), а класс возводит их в квадрат.

# Результат: 36

# class Power:
#     def __init__(self, func):
#         self.func = func
#
#     def __call__(self, a, b):
#         return self.func(a, b) ** 2
#
#
# @Power
# def mult(a, b):
#     return a * b
#
#
# print(mult(2, 3))

# декораторы универсальные
# class Power:
#     def __init__(self, func):
#         self.func = func
#
#     def __call__(self, *args, **kwargs):  # декоратору не важно сколько принимаемых аргументов
#         print("-" * 40)
#         print("*args", args)
#         print("**kwargs", kwargs)
#         return self.func(*args, **kwargs)
#
#
# @Power
# def mult(a, b):
#     return a * b
#
#
# @Power
# def mult1(a, b, c):
#     return a * b * c
#
#
# print(mult(2, 3))
# print(mult1(2, 3, 4))
# print(mult1(2, c=3, b=4))  # c и b в kwargs
#
# # ----------------------------------------
# # *args (2, 3)
# # **kwargs {}
# # 6
# # ----------------------------------------
# # *args (2, 3, 4)
# # **kwargs {}
# # 24
# # ----------------------------------------
# # *args (2,)
# # **kwargs {'c': 3, 'b': 4}
# # 24

# Декоратор принимает аргументы -> Декоратор на основе функции

# def outer(arg):
#     def my_decorator(fn):
#         def wrap():
#             print(f"Перед вызовом функции, выведем {arg}")
#             fn()
#             print("После вызова функции")
#         return wrap
#     return my_decorator
#
#
# @outer("test")
# def func():
#     print("func")
#
#
# func()

# Декоратор с классом

# class MyDecorator:
#     def __init__(self, arg):
#         self.arg = arg
#
#     def __call__(self, fn):
#         def wrap(a, b):
#             print(f"Перед вызовом функции {self.arg}")
#             fn(a, b)
#             print("После вызова функции")
#         return wrap
#
#
# @MyDecorator("test")
# def func1(a, b):
#     print(a, b)
#
#
# func1(2, 5)

# Задача. Создать класс Power, который будет декорировать функцию. Функция возвращает результат умножения
# двух чисел (a = 2, b = 2), а класс возводит их в степень, которую принимает декоратор.

# Результат: 64

# class Power:
#     def __init__(self, arg):
#         self.arg = arg
#
#     def __call__(self, fn):
#         def wrap(a, b):
#             return fn(a, b) ** self.arg
#         return wrap
#
#
# @Power(3)
# def mult(a, b):
#     return a * b
#
#
# print("Результат: ", end="")
# print(mult(2, 2))

# Декорирование методов

# def dec(fn):
#     def wrap(*args, **kwargs):
#         print("*" * 20)
#         fn(*args, **kwargs)
#         print("*" * 20)
#     return wrap
#
#
# class Person:
#     def __init__(self, name, surname):
#         self.name = name
#         self.surname = surname
#
#     @dec
#     def info(self):
#         print(f"{self.name} {self.surname}")
#
#
# p1 = Person("Виталий", "Карасёв")
# p1.info()

# 05.05.2024 -> ВЫХОДНОЙ

# Занятие 29. 11.05.2024

# Декорирование методов внутри класса. Декорирование класса.

# def decorator(cls):
#     class Wrapper(cls):
#         def doubler(self, value):
#             return value * 2
#
#     return Wrapper
#
#
# @decorator  # модифицирует поведение и содержание класса без его изменения
# class ActualClass:
#     def __init__(self):
#         print("Init ActualClass()")
#
#     def quad(self, value):
#         return value * 4
#
#
# obj = ActualClass()
# print(obj.quad(4))
# print(obj.doubler(4))

# Дескриптор - избавляет от дублирования кода, часто не используется

# Пример

# class Person:
#     def __init__(self, name, surname):
#         self.name = name
#         self.surname = surname
#
#     @property
#     def name(self):
#         return self.__name
#
#     @name.setter
#     def name(self, value):
#         if not isinstance(value, str):
#             raise TypeError(f"{value} должно быть строкой")
#         self.__name = value
#
#     @property
#     def surname(self):
#         return self.__surname
#
#     @surname.setter
#     def surname(self, value):
#         if not isinstance(value, str):
#             raise TypeError(f"{value} должно быть строкой")
#         self.__surname = value
#
#
# # p = Person(12, "Ivan") # TypeError: 12 должно быть строкой
# # p = Person("Ivan", 12)  # TypeError: 12 должно быть строкой
# p = Person("Ivan", "Petrov")  # +
#
#
# # Вывод: один класс потребовал 4 свойства, с отчеством -> 6 свойств -> много однотипных элементов нарушают "DRY"

# Другой способ:

# class String:
#     def __init__(self, value):
#         if value:
#             self.set(value)
#
#     def set(self, value):
#         if not isinstance(value, str):
#             raise TypeError(f"{value} должно быть строкой")
#         self.__value = value
#
#     def get(self):
#         return self.__value
#
#
# class Person:  # класс однотипных свойств
#     def __init__(self, name, surname):
#         self.name = String(name)
#         self.surname = String(surname)
#
#     # @property
#     # def name(self):
#     #     return self.__name
#     #
#     # @name.setter
#     # def name(self, value):
#     #     if not isinstance(value, str):
#     #         raise TypeError(f"{value} должно быть строкой")
#     #     self.__name = value
#     #
#     # @property
#     # def surname(self):
#     #     return self.__surname
#     #
#     # @surname.setter
#     # def surname(self, value):
#     #     if not isinstance(value, str):
#     #         raise TypeError(f"{value} должно быть строкой")
#     #     self.__surname = value
#
#
# # p = Person(12, "Petrov")  # TypeError: 12 должно быть строкой.
# p = Person("Ivan", "Petrov")  # Недостаток способа -> нужно явно обращаться через название метода
# # -> устанавливаем новое значение
# # p.name.set("Petr")
# p.name.set(47)
# # -> получить данные
# print(p.name.get)  # TypeError: 47 должно быть строкой


# Дескриптор (свойства)
# __get__() - магический метод
# __set()
# __delete__()
# __set_name__()

# Синтаксис Дескриптора

# class ValidString:
#     def __set_name__(self, owner, name):
#         # print(owner)  # <class '__main__.Person'> | <class '__main__.Person'>
#         self.__name = name
#
#     def __get__(self, instance, owner):
#         # print(instance)  # <__main__.Person object at 0x000001BF2C507D60>
#         return instance.__dict__[self.__name]
#
#     def __set__(self, instance, value):
#         if not isinstance(value, str):
#             raise ValueError(f"{self.__name} должно быть строкой")
#         instance.__dict__[self.__name] = value
#
#
# class Person:
#     first_name = ValidString()
#     surname = ValidString()
#
#     def __init__(self, first_name, surname):
#         self.first_name = first_name
#         self.surname = surname
#
#
# p = Person("Ivan", "Petrov")  # +
# # p = Person(45, "Petrov")  # ValueError: first_name должно быть строкой
# # p = Person("Ivan", 76)  # ValueError: surname должно быть строкой
# # Присвоить новое значение
# # p.first_name = 13
# p.first_name = "Petr"  # + Получить значение свойства ->
# print(p.first_name)  # Petr
# print(p.surname)  # Petrov

# Задача. Создать дескриптор для класса Point3D (создание точки в трёхмерном пространстве) с проверкой на ввод
# координат точки только целочисленных значений

# {'_x' : 1, '_y': 2, '_z' : 3}

# class Integer:
#     @staticmethod
#     def verify_coord(coord):
#         if not isinstance(coord, int):
#             raise ValueError(f"Координата {coord} должна быть целым числом")
#
#     def __set_name__(self, owner, name):
#         # self.__name = "_" + name
#         self.__name = "a" + name  # {'ax': 1, 'ay': 2, 'az': 3}
#
#     def __get__(self, instance, owner):
#         # return instance.__dict__[self.__name] Другой вариант записи ->
#         return getattr(instance, self.__name)  # нужно self.__name = "_" + name
#
#     def __set__(self, instance, value):
#         self.verify_coord(value)
#         # instance.__dict__[self.__name] = value  Другой вариант записи ->
#         setattr(instance, self.__name, value)  # нужно self.__name = "_" + name
#
#
# class Point3D:
#     x = Integer()
#     y = Integer()
#     z = Integer()
#
#     def __init__(self, x, y, z):
#         self.x = x
#         self.y = y
#         self.z = z
#
#
# p1 = Point3D(1, 2, 3)
# # p2 = Point3D("abc", 2, 3)
# print(p1.__dict__)  # {'x': 1, 'y': 2, 'z': 3}
# # print(p2.__dict__)  # {'x': 'abc', 'y': 2, 'z': 3} -> не должна быть строка
# print(p1.x)  # 1

# Метаклассы - специальный класс, который создаёт другие классы. Его экземпляры являются классами
# <- используется разработчиками языка; type - это метакласс на основе которого можно создавать другие классы

# a = 5
# print(type(a))  # <class 'int'>
# print(type(int))  # <class 'type'> -> встроенный метакласс Python

# class MyList(list):
#     def get_length(self):
#         return len(self) -> другой синтаксис записи класса через метакласс type

# MyList = type(
#     'MyList',
#     (list,),
#     dict(get_length=lambda self: len(self))
# )
#
#
# lst = MyList()
# lst.append(5)
# lst.append(7)
# lst.append(9)
# print(lst, lst.get_length())  # [5, 7, 9] 3

# Создание модулей

# import math
# import random

# Создадим модуль на примере задачи

# import geometry.rect
# import geometry.sq
# import geometry.trian
#
# r1 = geometry.rect.Rectangle(1, 2)
# r2 = geometry.rect.Rectangle(3, 4)
#
# s1 = geometry.sq.Square(10)
# s2 = geometry.sq.Square(20)
#
# t1 = geometry.trian.Triangle(1, 2, 3)
# t2 = geometry.trian.Triangle(4, 5, 6)
#
# shape = [r1, r2, s1, s2, t1, t2]
#
# for g in shape:
#     print(g.get_perimeter())

# Другой вариант import

# from geometry import rect, sq, trian
#
#
# # geometry.rect
#
# # from geometry import *
#
# def run():  # если код понадобиться в некотором документе
#     r1 = rect.Rectangle(1, 2)
#     r2 = rect.Rectangle(3, 4)
#
#     s1 = sq.Square(10)
#     s2 = sq.Square(20)
#
#     t1 = trian.Triangle(1, 2, 3)
#     t2 = trian.Triangle(4, 5, 6)
#
#     shape = [r1, r2, s1, s2, t1, t2]
#
#     for g in shape:
#         print(g.get_perimeter())
#
#
# if __name__ == '__main__':
#     run()

# Занятие 30. 12.05.2024

# Задача. Создадим класс Автомобиль со свойствами бренд, модель, год выпуска и пробег.
# Он будет иметь метод вывода данных на экран. От него будет унаследован класс Электро автомобиль с мощностью
# батареи 100 %. Работа с классами должна быть организована через пакет и модули.

# Tesla, T, 2018 год, 99000 км
# Этот автомобиль имеет мощность 100 %

# from car import electrocar # 1 способ
# from lesson_1.car.electrocar import ElectroCar
#
# # e_car = electrocar.ElectroCar("Tesla", "T", 2018, 99000) # 1 способ
# e_car = ElectroCar("Tesla", "T", 2018, 99000)
# e_car.show_car()
# e_car.description_battery()

# Упаковка данных (сериализация -> сохранение данных в файлах)
# Распаковка данных (десериализация)

# Модули из стандартной библиотеки Python
# marshal - для чтения и записи bytecode модулей Python; поддерживал старое расширение (.pyc)
# pickle - формат Python, только все типы данных Python
# json - на любом ЯП

# Работа модуля pickle

# import pickle
#
# file_name = "basket.txt"
#
# shop_list = {
#     "фрукты": ["яблоки", "груши"],
#     "овощи": ("морковь",),
#     "бюджет": 1000
# }
#
# with open(file_name, "wb") as f:  # wb - байтовая строка
#     pickle.dump(shop_list, f)
#
# with open(file_name, "rb") as f:  # rb - считываем в байтовом формате
#     shop_list_2 = pickle.load(f)
#
# print(shop_list_2)  # {'фрукты': ['яблоки', 'груши'], 'овощи': ('морковь',), 'бюджет': 1000}

# class Test:
#     num = 35
#     string = "Привет"
#     lst = [1, 2, 3]
#     tpl = (25, 98)
#
#     def __str__(self):
#         return f"Число: {Test.num}\nСтрока: {Test.string}\nСписок: {Test.lst}\nКортеж: {Test.tpl}"
#
#
# obj = Test()
# # print(obj)
# my_obj = pickle.dumps(obj)
# print(my_obj)  # b'\x80\x04\x95\x18\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04Test\x94\x93\x94)\x81\x94.'
#
# new_obj = pickle.loads(my_obj)
# print(new_obj)
#                 # Число: 35
#                 # Строка: Привет
#                 # Список: [1, 2, 3]
#                 # Кортеж: (25, 98)

# pickle -> работа с типами данных:

# import pickle


# class Test2:
#     def __init__(self):
#         self.a = 35
#         self.b = "test"
#         self.c = lambda x: x + x
#
#     def __str__(self):
#         # return f"{self.a} {self.b} {self.c}"  # 35 test <function Test2.__init__.<locals>.<lambda> at 0x000002506692F1F0>
#         return f"{self.a} {self.b} {self.c(2)}"  # 35 test 4
#
#     def __getstate__(self):  # получить и сохранить данные
#         attr = self.__dict__.copy()
#         del attr['c']
#         return attr
#
#     def __setstate__(self, state):  # считать и установить данные заново в новую переменную
#         self.__dict__ = state
#         self.c = lambda x: x + x
#
#
# item1 = Test2()
# # print(item1)
# item2 = pickle.dumps(item1)
# print(item2)
# item3 = pickle.loads(item2)
# print(item3)

# Работа формата json

# import json

# data = {
#     'name': 'Olga',
#     'age': 20,
#     20: None,
#     1: True,
#     False: 0,
#     'hobbies': ('running', 'singing'),
#     'children': {
#         'first_name': ['Alice', 'Bob'],
#         'age': [6, 12]
#     }
# }
#
# with open("data_file.json", "w") as f:
#     json.dump(data, f, indent=4)  # 4 отступа для каждого уровня вложенности вправо
#
# # Из JSON в Python
#
# with open("data_file.json", "r") as f:
#     data2 = json.load(f)
#
# print(data2)

# Сохраним в строку

# json_string = json.dumps(data)
# print(json_string)
# print(type(json_string))  # <class 'str'>
#
# data3 = json.loads(json_string)
# print(data3)
# print(type(data3))  # <class 'dict'> - после считывания

# Работа с русскими символами

# x = {"name": "Виктор"}
# a = json.dumps(x)
# print(a)  # {"name": "\u0412\u0438\u043a\u0442\u043e\u0440"} - битый с русским
# b = json.dumps(x, ensure_ascii=False)  # {"name": "Виктор"}
# print(b)
# print(json.loads(a))  # {'name': 'Виктор'}
#
# data = {
#     'name': 'Ольга',
#     'age': 20,
#     20: None,
#     1: True,
#     False: 0,
#     'hobbies': ('running', 'singing'),
#     'children': {
#         'first_name': ['Алиса', 'Боб'],
#         'age': [6, 12]
#     }
# }
#
# with open("data_file.json", "w") as f:
#     json.dump(data, f, indent=4)
#
# # Из JSON в Python
#
# with open("data_file.json", "r") as f:
#     data2 = json.load(f)
#
# print(data2)

# Особенности модуля json. Написать программу, которая будет генерировать случайный набор символов для имени
# и случайный набор символов для номера телефона

# import json
# from random import choice
#
#
# def gen_person():
#     name = ''
#     tel = ''
#
#     letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
#     nums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
#
#     while len(name) != 7:
#         name += choice(letters)
#     # print(name) # cadgcdc
#
#     while len(tel) != 10:
#         tel += choice(nums)
#     # print(tel)  # 8830343478
#
#     person = {
#         'name': name,
#         "tel": tel
#     }
#     return person
#
#
# # Для того чтобы данные "дозаписывались" - конструкция список
# def write_json(person_dict):
#     try:
#         data = json.load(open('persons.json'))
#     except FileNotFoundError:
#         data = []
#
#     data.append(person_dict)
#     with open('persons.json', 'w') as f:
#         json.dump(data, f, indent=2)
#
#
# for i in range(5):
#     write_json(gen_person())
#     # print(gen_person())  # {'name': 'aeegdhf', 'tel': '1639099692'} - пять словарей
#     # persons.append(gen_person())
# # print(persons)
# # [{'name': 'hbcchfb', 'tel': '3481497127'}, {'name': 'bceadga', 'tel': '1737442257'}, {'name': 'bedheae',
# # 'tel': '3949002217'}, {'name': 'ehdcgae', 'tel': '1581487187'}, {'name': 'ghhfeda', 'tel': '3516570973'}]
# # сохраним в файл

# Занятие 31. 18.05.2024

# Задача.

# import json
#
#
# class Student:
#     def __init__(self, name, marks):
#         self.name = name
#         self.marks = marks
#
#     def __str__(self):
#         # st = '' # 1 способ
#         # for i in self.marks:
#         #     st += str(i) + ', '
#         # return f"{self.name}: {st[:-2]}"
#         st = ", ".join(map(str, self.marks))
#         return f"{self.name}: {st}"
#
#     def add_mark(self, new_mark):
#         self.marks.append(new_mark)
#
#     def delete_mark(self, index):
#         self.marks.pop(index)
#
#     def edit_mark(self, index, new_mark):
#         self.marks[index] = new_mark
#
#     def average_mark(self):
#         return sum(self.marks) / len(self.marks)
#
#     def dump_to_json(self, file_name):
#         data = {"name": self.name, "marks": self.marks}
#         with open(file_name, "w") as f:
#             json.dump(data, f, indent=2)
#
#     def load_from_file(self, file_name):
#         with open(file_name, 'r') as f:
#             print(json.load(f))
#
#
# class Group:
#     def __init__(self, students, group):
#         self.students = students
#         self.group = group
#
#     def __str__(self):
#         # st = ''  # 1 способ
#         # for i in self.students:
#         #     st += str(i) + '\n'
#         # return f"{st}"
#         st = "\n".join(map(str, self.students))
#         return f"Группа: {self.group}\n{st}"
#
#     @staticmethod
#     def change_group(gr1, gr2, index):
#         return gr2.add_student(gr1.remove_student(index))
#
#     def add_student(self, student):
#         self.students.append(student)
#
#     def remove_student(self, index):
#         return self.students.pop(index)
#
#     def dump_group(self, file_name):
#         with open(file_name, 'w') as f:
#             stud_list = []
#             for i in self.students:
#                 stud_list.append([i.name, i.marks])
#             json.dump(stud_list, f, indent=2)
#
#     def jornal_groups(self, file_name):
#         try:
#             data = json.load(open(file_name))
#         except FileNotFoundError:
#             data = []
#
#         with open(file_name, 'w') as f:
#             stud_list = []
#             for i in self.students:
#                 stud_list.append([i.name, i.marks])
#             data.append(stud_list)
#             json.dump(data, f, indent=2)
#
#     @staticmethod
#     def upload_group(file_name):
#         with open(file_name, "r") as f:
#             print(json.load(f))
#
#
# st1 = Student('Bodnya', [5, 4, 3, 4, 5, 3])
# # print(st1)  # <__main__.Student object at 0x0000025C3E3AC640>
# st1.add_mark(4)
# # print(st1)
# # st1.delete_mark(2)
# # print(st1)
# # st1.edit_mark(4, 5)
# # print(st1)
# # print(st1.average_mark())
# # file = "student.json"
# # st1.dump_to_json(file)
# # st1.load_from_file(file)
# st2 = Student('Nikolaenko', [2, 3, 5, 4, 4, 2])
# st3 = Student('Birukov', [3, 5, 3, 2, 5, 4])
# sts1 = [st1, st2]
# group1 = Group(sts1, "ГК Python")
# group1.add_student(st3)
# # print(group1)
# # print()
# group1.remove_student(1)
# # print(group1)
# # print()
# sts2 = [st2]
# group2 = Group(sts2, "ГК Веб")
# # print(group2)
# # print("." * 20)
# Group.change_group(group1, group2, 0)
# # print(group1)
# # print()
# # print(group2)
#
# # file = "group.1.json"
# # group1.dump_group(file)
# # group1.upload_group(file)
# #
# # file2 = "group2.json"
# # group2.dump_group(file2)
# # group2.upload_group(file2)
#
# files_group = "journal.json"
# # group1.jornal_groups(files_group)
# group2.jornal_groups(files_group)

# Задача. Есть некоторый словарь, который хранит название стран и столиц.
# Название стран используется в качестве ключа, название столицы в качестве значения.
# Необходимо реализовать: добавление, удаление, поиск, редактирование и просмотр данных
# (используя упаковку и распаковку данных)

# import json
#
# data = {}
#
#
# class CountryCapital:
#     def __init__(self, country, capital):
#         self.country = country
#         self.capital = capital
#         data[self.country] = self.capital
#
#     def __str__(self):
#         return f"{self.country}: {self.capital}"
#
#     @staticmethod
#     def add_country(filename):
#         country_name = input("Введите название страны: ")
#         capital_name = input("Введите название столицы: ")
#
#         try:
#             date = json.load(open(filename))
#         except FileNotFoundError:
#             date = {}
#
#         date[country_name] = capital_name
#
#         with open(filename, "w") as f:
#             json.dump(date, f, indent=2)
#
#     @staticmethod
#     def load_from_file(filename):
#         with open(filename, "r") as f:
#             print(json.load(f))
#
#
# file = 'list_capital.json'
# index = ''
# while index != '6':
#     index = input("Выбор действия:\n1 - добавление данных\n2 - удаление данных\n5 - просмотр данных"
#                   "\n6 - завершение работы\nВвод: ")
#     if index == "1":
#         CountryCapital.add_country(file)
#     if index == "5":
#         CountryCapital.load_from_file(file)

#  Доделано в dz/dz31 18.05.2024.py

# Занятие 32. 19.05.2024

# import requests
# import json

# response = requests.get("https://jsonplaceholder.typicode.com/todos")  # todos - задачи
# # print(response)  # <Response [200]> - успешное сообщение клиента и сервера
# # print(response.text)  # получили доступ к json-объекту
# # print(type(response.text))  # <class 'str'> -> неудобно работать с типом данных
# todos = json.loads(response.text)
# # print(todos)
# # print(type(todos))  # <class 'list'>
# # print(type(todos[0]))  # <class 'dict'>

# # Найдём и выведем пользователей, сделавших максимальное количество задач(только 5-го выводит):
#
# todos_by_user = {}  # {1: 3, 2: 1}
#
# for todo in todos:
#     if todo["completed"]:
#         try:
#             todos_by_user[todo["userId"]] += 1  # todos_by_user[1] += 1 => todos_by_user[1]
#         except KeyError:
#             todos_by_user[todo["userId"]] = 1  # todos_by_user[1] = 1
#
# print(todos_by_user)  # {1: 11, 2: 8, 3: 7, 4: 6, 5: 12, 6: 6, 7: 9, 8: 11, 9: 8, 10: 12} - данные могут обновиться
#
# # top_user = sorted(todos_by_user.items())
# # print(top_user)  # [(1, 11), (2, 8), (3, 7), (4, 6), (5, 12), (6, 6), (7, 9), (8, 11), (9, 8), (10, 12)]
#
# top_user = sorted(todos_by_user.items(), key=lambda x: x[1], reverse=True)
# print(top_user)  # [(5, 12), (10, 12), (1, 11), (8, 11), (7, 9), (2, 8), (9, 8), (3, 7), (4, 6), (6, 6)]
#
# max_complete = top_user[0][1]
# print(max_complete)  # 12
#
# users = []
# for user, num_complete in top_user:
#     if num_complete < max_complete:
#         break
#     users.append(str(user))
#
# print(users)  # [5, 10] -> id
# users = ["5"]
# max_users = " and ".join(users)  # читабельный вид
# s = "s" if len(users) > 1 else ""
# # print(f"User {users} completed {max_complete} TODOs")  # User [5, 10] completed 12 TODOs -> читабельный вид ->
# print(f"User{s} {max_users} completed {max_complete} TODOs")
#
#
# def keep(tod):
#     is_completed = tod["completed"]
#     has_max_count = str(tod["userId"]) in users
#     return is_completed and has_max_count
#
#
# with open("filtered_data.json", "w") as f:
#     filtered = list(filter(keep, todos))
#
#     json.dump(filtered, f, indent=2)

# Код и с "5" и с "10" -> Правильный код

# response = requests.get("https://jsonplaceholder.typicode.com/todos")
# # print(response.text)
# # print(type(response.text))
# todos = json.loads(response.text)
# # print(todos)
# # print(type(todos[0]))
#
# todos_by_user = {}  # {1: 3, 2: 1}
#
# for todo in todos:
#     if todo["completed"]:
#         try:
#             todos_by_user[todo["userId"]] += 1  # todos_by_user[1] += 1 => todos_by_user[1] = todos_by_user[1] + 1
#         except KeyError:
#             todos_by_user[todo["userId"]] = 1  # todos_by_user[1] = 1
#
# print(todos_by_user)  # {1: 11, 2: 8, 3: 7, 4: 6, 5: 12, 6: 6, 7: 9, 8: 11, 9: 8, 10: 12}
#
# top_user = sorted(todos_by_user.items(), key=lambda x: x[1], reverse=True)
# print(top_user)  # [(5, 12), (10, 12), (1, 11), (8, 11), (7, 9), (2, 8), (9, 8), (3, 7), (4, 6), (6, 6)]
#
# max_complete = top_user[0][1]
# print(max_complete)  # 12
#
# users = []
# for user, num_complete in top_user:
#     if num_complete < max_complete:  # 11 < 12
#         break
#     users.append(str(user))
#
# print(users)  # [5, 10]
# # users = ["5"]
# max_users = " and ".join(users)
# s = "s" if len(users) > 1 else ""
# print(f"User{s} {max_users} completed {max_complete} TODOs")
#
#
# def keep(tod):
#     is_completed = tod["completed"]
#     has_max_count = str(tod["userId"]) in users
#     return is_completed and has_max_count
#
#
# with open("filtered_data.json", "w") as f:
#     filtered = list(filter(keep, todos))
#
#     json.dump(filtered, f, indent=2)

# Считаем данные из data.csv, кодировка ANSI

# import csv

# метод reader

# with open("data.csv") as f:
#     file_reader = csv.reader(f, delimiter=";") # если в ОС формат .csv делит по ",", то delimiter=";" НЕ НУЖЕН!
#     count = 0
#     for row in file_reader:
#         # print(row)
#         if count == 0:
#             print(f"Файл содержит столбцы: {', '.join(row)}") # Файл содержит столбцы: Имя, Профессия, Год рождения
#         else:
#             print(f"\t{row[0]} - {row[1]}. Родился в {row[2]}")
#         count += 1

# Вывод:
# Файл содержит столбцы: Имя, Профессия, Год рождения
# 	Виктор - Веб дизайнер. Родился в 1995
# 	Игорь - Программист. Родился в 1983

# метод DictReader

# with open("data.csv") as f:
#     field_names = ['Имя', 'Профессия', 'Год рождения']  # без заголовочной строки
#     file_reader = csv.DictReader(f, delimiter=";", fieldnames=field_names)
#     count = 0
#     for row in file_reader:
#         if count == 0:
#             print(f"Файл содержит столбцы: {', '.join(row)}")  # Файл содержит столбцы: Имя, Профессия, Год рождения
#         # print(f"\t{row[0]} - {row[1]}. Год рождения {row[2]}") # KeyError: 0 - нет ключа по индексу 0
#         print(f"\t{row['Имя']} - {row['Профессия']}. Год рождения {row['Год рождения']}")  # ++
#         count += 1

# Записать в файл student.csv

# with open("student.csv", "w") as f:
#     writer = csv.writer(f, delimiter=";", lineterminator="\r")  # lineterminator="\r" - убирает пустые строки
#     writer.writerow(["Имя", "Класс", "Возраст"])
#     writer.writerow(["Женя", "9", "15"])
#     writer.writerow(["Саша", 5, 12])
#     writer.writerow(["Маша", 11, 18])

# Записать в файл data_new.csv, метод writer

# data = [['hostname', 'vendor', 'model', 'location'],
#         ['sw1', 'Cisco', '3750', 'London, Best str'],
#         ['sw2', 'Cisco', '3850', 'Liverpool, Better str'],
#         ['sw3', 'Cisco', '3650', 'Liverpool, Better str'],
#         ['sw4', 'Cisco', '3650', 'London, Best str']]
#
# with open("data_new.csv", "w") as f:
#     writer = csv.writer(f, delimiter=";", lineterminator="\r")
#     # for row in data: -> 1-й способ
#     #     writer.writerow(row)
#     writer.writerows(data)  # 2-й способ

# Записать в файл student1.csv, метод DictWriter

# with open("student1.csv", "w") as f:
#     names = ["Имя", "Возраст"]
#     writer = csv.DictWriter(f, delimiter=";", lineterminator="\r", fieldnames=names)
#     writer.writeheader()  # записать заголовочную строку, 1-ю
#     writer.writerow({"Имя": "Саша", "Возраст": 6})
#     writer.writerow({"Имя": "Маша", "Возраст": 15})
#     writer.writerow({"Имя": "Вова", "Возраст": 14})

# Записать в структуру JSON в файл, структура есть ниже:

# data = [{
#     'hostname': 'sw1',
#     'location': 'London',
#     'model': '3750',
#     'vendor': 'Cisco'
# }, {
#     'hostname': 'sw2',
#     'location': 'Liverpool',
#     'model': '3850',
#     'vendor': 'Cisco'
# }, {
#     'hostname': 'sw3',
#     'location': 'Liverpool',
#     'model': '3650',
#     'vendor': 'Cisco'
# }, {
#     'hostname': 'sw4',
#     'location': 'London',
#     'model': '3650',
#     'vendor': 'Cisco'
# }]
#
# # dict(data[0].keys()) -> взять из словаря только ключи -> преобразовать их в список list(data[0].keys())
#
# with open("dict_writer.csv", "w") as f:
#     writer = csv.DictWriter(f, delimiter=";", lineterminator="\r", fieldnames=list(data[0].keys()))
#     writer.writeheader()
#     for d in data:
#         writer.writerow(d)  # ++

# Преобразовать 200 todos json в csv

# Занятие 33. 25.05.2024. Парсинг

# from bs4 import BeautifulSoup
#
# f = open('index.html').read()
# # print(f)
# soup = BeautifulSoup(f, "html.parser")
# row = soup.find("div", class_="row")
# row = soup.find_all("div", class_="row")[1].find("div", class_="name")  # <div class="name">Alena</div>
# row = soup.find_all("div", class_="row")[1].find("div", class_="name").text  # Alena
# row = soup.find_all("div", {"data-set": "salary"})[0].text # salary: 2700 usd per month
# row = soup.find_all("div", string="Alena")  # [<div class="name">Alena</div>]
# row = soup.find("div", string="Alena").parent  # <div class="name1">\n <div class="name">Alena</div>\n </div>
# row = soup.find("div", string="Alena").find_parent(class_="row")  # Выводит класс, где написано Алёна
# row = soup.find("div", id="whois3")  # <div class="whois" id="whois3">Designer</div>
# row = soup.find("div", id="whois3")  # <div class="whois" id="whois3">Designer</div>
# row = soup.find("div", id="whois3").find_next_sibling()  # <div data-set="salary">2300 usd</div> - след. эл-нт
# row = soup.find("div", id="whois3").find_previous_sibling()  # <div class="name">Ksenia</div> - пред. эл-нт
# print(row)

# from bs4 import BeautifulSoup


# Ищем copywriter

# def get_copywriter(tag):
#     whois = tag.find('div', class_="whois").text
#     # print(whois)
#     if "Copywriter" in whois:
#         return tag
#     return None
#
#
# f = open('index.html').read()
# soup = BeautifulSoup(f, "html.parser")
#
# copywriter = []
# row = soup.find_all("div", class_="row")
# for i in row:
#     cw = get_copywriter(i)
#     if cw:
#         copywriter.append(cw)
#
# print(copywriter)

# Ищем зар. платы сотрудников
# from bs4 import BeautifulSoup
# import re
#
#
# def get_salary(s):
#     pattern = r"\d+"  # ищем цифры
#     # res = re.findall(pattern, s)[0] # 1 способ
#     res = re.search(pattern, s).group()  # 2 способ
#     print(res)
#
#
# f = open('index.html').read()
# soup = BeautifulSoup(f, "html.parser")
# salary = soup.find_all("div", {"data-set": "salary"})
# # print(salary)
# for i in salary:
#     get_salary(i.text)

# import requests
#
# r = requests.get("https://ru.wordpress.org/")  # сайт из интернета
# # print(r)
# # print(r.status_code)
# # print(r.headers)
# # print(
# # r.content)  # b'<!DOCTYPE html>\n<html lang="ru-RU">\n\t<head>\n\t\t<meta charset="UTF-8" />\n\t\t<meta name=
# # "viewport" content="width=device-width, initial-scale=1" ... - байтовая строка
# print(r.text)

# Функциональный подход(пишем внутри функций)
# import requests
# from bs4 import BeautifulSoup
#
#
# def get_html(url):
#     r = requests.get(url)
#     return r.text
#
#
# def get_data(html):
#     # soup = BeautifulSoup(html, "html.parser")
#     soup = BeautifulSoup(html, 'lxml')  # 2 способ
#     p1 = soup.find("header", id="masthead").find("p", class_="site-title").text  # Встречайте WordPress
#     return p1
#
#
# def main():
#     url = "https://ru.wordpress.org/"
#     print(get_data(get_html(url)))
#
#
# if __name__ == '__main__':
#     main()

import requests
from bs4 import BeautifulSoup
import re
import csv


def get_html(url):
    r = requests.get(url)
    return r.text


def refined(s):
    res = re.sub(r"\D+", "", s)
    return res


def write_csv(data):
    with open("plugins.csv", "a") as f:
        writer = csv.writer(f, lineterminator="\r", delimiter=";")
        writer.writerow((data['name'], data['url'], data['rating']))


def get_data(html):
    soup = BeautifulSoup(html, 'lxml')
    # p1 = soup.find("header", id="masthead").find("p", class_="site-title").text
    p1 = soup.find_all("section", class_="plugin-section")[1]
    plugins = p1.find_all("div", class_="entry")

    for plugin in plugins:
        name = plugin.find("h3").text
        url = plugin.find("h3").find("a").get("href")  # 4 ссылки -> значения атрибутов
        rating = plugin.find("span", class_="rating-count").text
        r = refined(rating)
        # print(name)
        # print(url)
        # print(rating)
        data = {'name': name, 'url': url, 'rating': r}
        # print(r)
        # print(data)
        write_csv(data)


def main():
    # url = "https://ru.wordpress.org/"
    url = "https://ru.wordpress.org/plugins/"
    get_data(get_html(url))


if __name__ == '__main__':
    main()
