Класс
class НазваниеКласса:
	свойства (поля, переменные)
		- статические -> за пределами init
		- динамические (свойства класса) -> внутри init
	методы (функции)
		- статические (@staticmethod -> def method()) -> это функция внутри класса
		- экземпляра класса (def method(self))
		- методы классов (@classmethod -> def method(cls))
	атрибуты = свойства + методы

Магические методы (dunder-методы) - отрабатывают каждый раз при создании экземпляра класса

Чтобы язык считался объектно-ориентированым, он должен соблюдать следующие парадигмы (уметь реализовывать свойства):
- инкапсуляция
- наследование
- полиморфизм (много форм одного и того же метода) - способность системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта (у одного действия несколько реализаций, в зависимости от того, с каким классом ведётся работа)

Модификаторы доступа:
public - self.name - открытый доступ
protected - self._name - используется при наследовании
private - self.__name - защищённый доступ (нельзя получить из вне)

Наследование

родительский (базовый, основной, суперкласс) класс
	дочерний (наследник, подкласс) класс
В Python не преветствуется дублирование кода(например, одинакового инициализатора):
DRY (Don`t Repeate Yourself) -  не повторяйся! -> помагает наследование

# пакет
geometry -> создать: New -> Python Package
	# модули:
	rect.py
	sq.py
	trian.py




